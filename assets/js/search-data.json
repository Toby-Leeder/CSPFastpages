{
  
    
        "post0": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus Change Bits . +1 | 00000000 | 0 | 0 | 0 | -1 | | . Turn on | . | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2022/11/15/binaryStuff.html",
            "relUrl": "/2022/11/15/binaryStuff.html",
            "date": " • Nov 15, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Night at the Museum",
            "content": "Ceramics . These are some of the ceramics pieces that I saw at the night at the museum. I really liked these pieces because it’s a skill set that I don’t really have and find very impressive. . . This piece depicts a devil fruit from One Piece. I personally thought this was really cool. I like the show one piece and I also really like this piece. I wanted to include it because I just thought it was really cool and very high quality as well. . . This is another piece I really liked. Though it isn’t finished the design is really cool and well made. I like dragons and stuff like that in general so this is a very cool depiction to me. . . These pieces were actually made by my twin, Aiden. It’s cool to see what he’s been working on throughout the year and I think it turned out really well. . CS . There are also some cool CS projects that I saw Some of the projects I saw were really cool like a timer to help with school work and a calender with the weather. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_6/2022/11/10/nightAtTheMuseum.html",
            "relUrl": "/week_6/2022/11/10/nightAtTheMuseum.html",
            "date": " • Nov 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Agile Methodology Weekly Plans and Notes",
            "content": "Roles . Scrum Master: Toby Leeder Dev Ops: Gene Chang Frontend: Nathan Capule Backend: Caleb Navarro . Week 9 . Initial Meeting, Monday . Toby: Work on logic for pieces, starting with rook then beginning pawn | Gene: Ensure Flask is running on AWS and stays running | Caleb: Backend (inconclusive, waiting on more lessons from Mortenson) | Nathan: Work on creating a chess board with html and creating the pieces on it | . Midweek Meeting, Wednesday . Toby: Assist Gene with Flask on AWS (more experienced and therefore able to help), work with Nathan on integration (more info in Nathan’s changes) | Gene: Create Group Fastpages | Caleb: Create Functional API on group Fastpages connected to our group flask (running on AWS) | Nathan: Work on integration, help Toby with integrating his code done in Javascript Jupyter Notebook into the ChessBoard | . Final Meeting, Friday . All: Create Video Displaying Our Roles | Gene: Add new requirements to nginx file on AWS (given on Slack) | Nathan: Combine videos into a single four minute video ready to be presented on Monday | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/plans/2022/10/23/agile-stuff.html",
            "relUrl": "/plans/2022/10/23/agile-stuff.html",
            "date": " • Oct 23, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Chess",
            "content": "How do I play chess?&lt;/i&gt; Report an Issue . . a b c d e f g h . 8 | | | | | | | | . 7 | | | | | | | | . 6 | | | | | | | | . 5 | | | | | | | | . 4 | | | | | | | | . 3 | | | | | | | | . 2 | | | | | | | | . 1 | | | | | | | | . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/project/2022/10/20/Chessboard.html",
            "relUrl": "/project/2022/10/20/Chessboard.html",
            "date": " • Oct 20, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Fetching jokes thing",
            "content": "Joke HaHa Boohoo .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%209/2022/10/19/Jokes_Thing.html",
            "relUrl": "/week%209/2022/10/19/Jokes_Thing.html",
            "date": " • Oct 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Chess Logic W/JS",
            "content": "Purpose . This blog is where I tested and created much of the chessboard logic that I used later in our chess project. . Cell #1 . This section creates the chessBoard object and also creates a printboard function that I use later for testing. It also creates this lettersOnBoard string which I use for calculations for moves. I use the index in the list for all of the calculations. . chessBoard = {}; lettersOnBoard = &quot;abcdefgh&quot;; function printBoard(){ for (j = 0; j &lt;= 7; j++){ letter = lettersOnBoard[j]; console.log(&quot;&quot;) for (i = 1; i &lt;= 8; i++){ var newKey = letter + i; process.stdout.write(chessBoard[newKey][0] + &quot; &quot;); } } } . &#39;abcdefgh&#39; . Cell #2 . This cell defines the piece class. This class is intended to be a parent class for the other classes. Initially this class only had the constructor with position and color. Later however, I realized there were duplicate methods in the classes so I added them here. Those being the move method which actually changes the piece on the chessboard and getAvailableMoves which uses the captures and the freemoves and so is the same for all of the classes. . for (j = 0; j &lt;= 7; j++){ letter = lettersOnBoard[j]; for (i = 1; i &lt;= 8; i++){ var newKey = letter + i; chessBoard[newKey] = [&quot;OO&quot;, undefined] } } // piece class, to be extended by other classes class piece{ constructor(_position, _color){ this.position = _position; this.color = _color } move(move, currentM){ let currentBoard = chessBoard[currentM]; if(this.getAvailableMoves().includes(move)) { this.position = move; chessBoard[move] = currentBoard; chessBoard[currentM] = [&quot;OO&quot;, undefined]; } } getAvailableMoves(){ let freeMoves = this.getFreeMoves() let captures = this.getAvailableCaptures() captures.forEach((c) =&gt; { freeMoves.push(c); }) return freeMoves; } } . [ &#39;OO&#39;, undefined ] . Cell #3 . though this cell is higher up, this is actually the last peice I did and it was probably the easiest. I just copied the code from the bishop and rook and seperated them by adding a B and R at the end respectively and then combining them which methods without the identifier at the end in order to be used by the methods in the piece class. . class queen extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this rook this.id = &quot;Q&quot;; } //method to return all of the available moves that the piece can make. getTotalMovesR(){ let currentPosition = this.position.split(&quot;&quot;); let moves = []; for (var i = 1; i &lt;= 8; i++){ var newMove = currentPosition[0] + i; moves[i - 1] = newMove; } for (var i = 1; i &lt;= 8; i++){ var newMove = lettersOnBoard[i - 1] + currentPosition[1]; moves.push(newMove); } let totalMoves = []; moves.forEach((c) =&gt; { if (c != this.position){ totalMoves.push(c); } }); return totalMoves; } //method to return all of the obstructed moves based on the total moves getObstructedMovesR(){ let totalMoves = this.getTotalMovesR(); let obstructedMoves = []; let blockedMoves = []; let index = -1 totalMoves.forEach((c) =&gt; { if (!obstructedMoves.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMoves.push(c); index++ totalMoves.forEach((c) =&gt; { try{ if (obstructedMoves[index][1] &gt; this.position[1] &amp;&amp; c[1] &gt; obstructedMoves[index][1]){ blockedMoves.push(c) } else if (obstructedMoves[index][1] &lt; this.position[1] &amp;&amp; c[1] &lt; obstructedMoves[index][1]){ blockedMoves.push(c) } } catch{} try{ if (lettersOnBoard.indexOf(obstructedMoves[index][0]) &gt; lettersOnBoard.indexOf(this.position[0]) &amp;&amp; lettersOnBoard.indexOf(c[0]) &gt; lettersOnBoard.indexOf(obstructedMoves[index][0])){ blockedMoves.push(c) } if (lettersOnBoard.indexOf(obstructedMoves[index][0]) &lt; lettersOnBoard.indexOf(this.position[0]) &amp;&amp; lettersOnBoard.indexOf(c[0]) &lt; lettersOnBoard.indexOf(obstructedMoves[index][0])){ blockedMoves.push(c) } } catch{} }) } } }) blockedMoves.forEach((c) =&gt; {obstructedMoves.push(c);}) return obstructedMoves; } //method to return all of the moves which are not obstructed getFreeMovesR(){ let totalMoves = this.getTotalMovesR(); let obstructedMoves = this.getObstructedMovesR(); totalMoves = totalMoves.filter( (c) =&gt; !obstructedMoves.includes(c) ); return totalMoves; } //method to return the pieces which can be captured. getAvailableCapturesR(){ // defines new variables as other methods in this class which may be useful. let totalMoves = this.getTotalMovesR(); let obstructedMoves = this.getObstructedMovesR(); // defines arrays let sameRow = []; let sameColumn = []; let columnNums = []; let columnDifs = []; let negDifsColumn = []; let posDifsColumn = []; let rowLets = []; let rowNums = []; let rowDifs = []; let posDifsRow = []; let negDifsRow = []; let captures = []; let finalCaptures = []; // finds all of the moves which are in the same row or in the same column as the rook. obstructedMoves.forEach((c) =&gt; { if (this.position.split(&quot;&quot;)[0] == c.split(&quot;&quot;)[0]){ sameColumn.push(c); } else if (this.position.split(&quot;&quot;)[1] == c.split(&quot;&quot;)[1]){ sameRow.push(c); } }) //adds to a new array all of the numbers in the obstructed columns. Also converts it to an Integer sameColumn.forEach((c) =&gt; { columnNums.push(parseInt(c.split(&quot;&quot;)[1])); }) //elipses is a spread function, basically inputs each value in the array as it&#39;s own parameter. //this foreach finds the difference between the pieces in the same column and the rooks current position columnNums.forEach((c) =&gt; { columnDifs.push(c - parseInt(this.position.split(&quot;&quot;)[1])) }); //this foreach defines two new columnDifs.forEach((c) =&gt; { if (c &lt; 0) negDifsColumn.push(Math.abs(c)); else posDifsColumn.push(c); }) // finds the minimum positive number and the minimum negative number and converts them to an integer var posMinColumn = parseInt(Math.min(...posDifsColumn)); var negMinColumn = parseInt(Math.min(...negDifsColumn)); // works backwards to find the position on the board given the smallest differences sameColumn.forEach((c) =&gt; { if (parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) + posMinColumn || parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) - negMinColumn){ captures.push(c) } }) // basically does all of the same stuff but for the rows using the index of the lettersOnBoard array sameRow.forEach((c) =&gt; { rowLets.push(c.split(&quot;&quot;)[0]); }) rowLets.forEach((c) =&gt; { rowNums.push(lettersOnBoard.indexOf(c) + 1) }) rowNums.forEach((c) =&gt; { rowDifs.push(parseInt(c) - (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + 1)) }) rowDifs.forEach((c) =&gt; { if (c &lt; 0) negDifsRow.push(Math.abs(c)); else posDifsRow.push(c); }) var posMinRow = parseInt(Math.min(...posDifsRow)); var negMinRow = parseInt(Math.min(...negDifsRow)) sameRow.forEach((c) =&gt; { if ((lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + posMinRow + 1) || (lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) - negMinRow + 1)){ captures.push(c) } }) //checks if captures are the same color or not captures.forEach((c) =&gt; { if (chessBoard[c][0].split(&quot;&quot;)[0] != this.color){ finalCaptures.push(c); } }) return finalCaptures } getTotalMovesB(){ let currentPosition = this.position; let movesLToR = []; let movesRToL = []; let furthestLeft = currentPosition; let furthestRight = currentPosition; let bruh = 0; while (furthestLeft[0] != &quot;a&quot; &amp;&amp; furthestLeft[1] != 1){ furthestLeft = lettersOnBoard[lettersOnBoard.indexOf(furthestLeft[0]) - 1] + (furthestLeft[1] - 1); } while (furthestRight[0] != &quot;h&quot; &amp;&amp; furthestRight[1] != 1){ furthestRight = lettersOnBoard[lettersOnBoard.indexOf(furthestRight[0]) + 1] + (furthestRight[1] - 1); } for (i = 0; i &lt; 8 - lettersOnBoard.indexOf(furthestLeft[0]) - furthestLeft[1] + 1; i++){ movesLToR.push(lettersOnBoard[lettersOnBoard.indexOf(furthestLeft[0]) + i] + (parseInt(furthestLeft[1]) + i)); } for (i = 0; i &lt; 2 + lettersOnBoard.indexOf(furthestRight[0]) - furthestRight[1]; i++){ movesRToL.push(lettersOnBoard[lettersOnBoard.indexOf(furthestRight[0]) - i] + (parseInt(furthestRight[1]) + i)); } let totalMovesLToR = []; let totalMovesRToL = [] movesLToR.forEach((c) =&gt; { if (c != this.position){ totalMovesLToR.push(c); } }); movesRToL.forEach((c) =&gt; { if (c != this.position){ totalMovesRToL.push(c); } }); return [totalMovesLToR, totalMovesRToL]; } //method to return all of the obstructed moves based on the total moves getObstructedMovesB(){ let totalMoves = this.getTotalMovesB(); let obstructedMovesLToR = []; let obstructedMovesRToL = []; let blockedMovesLToR = []; let blockedMovesRToL = []; let index = -1 // Finds the moves which are behind an obstructed move and also finds all of the obstructed moves. Only for left to right. Does it by compating whether the letter + number is higher or lower. totalMoves[0].forEach((c) =&gt; { if (!blockedMovesLToR.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMovesLToR.push(c); index++ totalMoves[0].forEach((c) =&gt; { try{ if (parseInt(obstructedMovesLToR[index][1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &gt; parseInt(this.position[1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &amp;&amp; parseInt(c[1]) + lettersOnBoard.indexOf(c[0]) &gt; parseInt(obstructedMovesLToR[index][1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0])){ blockedMovesLToR.push(c) } else if (obstructedMovesLToR[index][1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &lt; this.position[1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &amp;&amp; c[1] + lettersOnBoard.indexOf(c[0]) &lt; obstructedMovesLToR[index][1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0])){ blockedMovesLToR.push(c) } } catch{} }) } } }) index = -1 // Finds the moves which are behind an obstructed move and also finds all of the obstructed moves. Only for right to left. Does it by finding whether the number is bigger or smaller (realized I was being dumb before but i&#39;m not changing the old code. Because it&#39;s only one diaganol though you can easily find if its blocked just by the number.) totalMoves[1].forEach((c) =&gt; { if (!blockedMovesRToL.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMovesRToL.push(c); index++ totalMoves[1].forEach((c) =&gt; { try{ if (parseInt(c[1]) &gt; parseInt(obstructedMovesRToL[index][1]) &amp;&amp; parseInt(obstructedMovesRToL[index][1]) &gt; parseInt(this.position[1])){ blockedMovesRToL.push(c) } else if (parseInt(c[1]) &lt; parseInt(obstructedMovesRToL[index][1]) &amp;&amp; parseInt(obstructedMovesRToL[index][1]) &lt; parseInt(this.position[1])){ blockedMovesRToL.push(c) } } catch{} }) } } }) //seperates the obstructed moves and the blocked moves and returns both. let obstructedMoves = []; obstructedMovesLToR.forEach((c) =&gt; [obstructedMoves.push(c)]) obstructedMovesRToL.forEach((c) =&gt; [obstructedMoves.push(c)]) let blockedMoves = []; blockedMovesLToR.forEach((c) =&gt; {blockedMoves.push(c);}) blockedMovesRToL.forEach((c) =&gt; {blockedMoves.push(c);}) obstructedMoves = obstructedMoves.filter((c) =&gt; !blockedMoves.includes(c)) return [obstructedMoves, blockedMoves]; } //method to return all of the moves which are not obstructed getFreeMovesB(){ let totalMoves = this.getTotalMovesB()[0]; this.getTotalMovesB()[1].forEach((c) =&gt; {totalMoves.push(c)}) let obstructedMoves = this.getObstructedMovesB()[0]; this.getObstructedMovesB()[1].forEach((c) =&gt; {obstructedMoves.push(c)}) totalMoves = totalMoves.filter((c) =&gt; !obstructedMoves.includes(c) ); return totalMoves; } //method to return the pieces which can be captured. getAvailableCapturesB(){ let finalCaptures = []; let obstructedMoves = this.getObstructedMovesB()[0] obstructedMoves.forEach((c) =&gt; { if (chessBoard[c][0][0] != this.color) {finalCaptures.push(c)} }) console.log(finalCaptures) return finalCaptures } getFreeMoves(){ let getFreeMovesB = this.getFreeMovesB() let getFreeMovesR = this.getFreeMovesR() let freeMoves = []; getFreeMovesB.forEach((c) =&gt; freeMoves.push(c)) getFreeMovesR.forEach((c) =&gt; freeMoves.push(c)) return freeMoves } getAvailableCaptures(){ let getAvailableCapturesB = this.getAvailableCapturesB() let getAvailableCapturesR = this.getAvailableCapturesR() let captures = []; getAvailableCapturesB.forEach((c) =&gt; captures.push(c)) getAvailableCapturesR.forEach((c) =&gt; captures.push(c)) return captures } } let queen1 = new queen(&quot;d1&quot;, &quot;w&quot;) setBoard(queen1) printMoves(&quot;d1&quot;) function setBoard(obj){ chessBoard[obj.position] = [obj.color + obj.id, obj] } function movePiece(currentM, newM){ chessBoard[currentM][1].move(newM, currentM) } function printMoves(current){ console.log(chessBoard[current][1].getAvailableMoves()) } . [] [ &#39;e2&#39;, &#39;f3&#39;, &#39;g4&#39;, &#39;h5&#39;, &#39;c2&#39;, &#39;b3&#39;, &#39;a4&#39;, &#39;d2&#39;, &#39;d3&#39;, &#39;d4&#39;, &#39;d5&#39;, &#39;d6&#39;, &#39;d7&#39;, &#39;d8&#39;, &#39;a1&#39;, &#39;b1&#39;, &#39;c1&#39;, &#39;e1&#39;, &#39;f1&#39;, &#39;g1&#39;, &#39;h1&#39; ] . Cell #4 . This is the bishop, the second to last piece I did. I though this piece was going to be really hard and I came up with complicated ways to figure out which moves are blocked and which moves are not. However it ended up working out really nicely. I was thinking about ways of coming up with the blocked moves without thinking of how to get all of the moves first. In the end to find all the moves I ended up going down and left until I reached an edge and then going from there and finding the rest of the moves by going back up and right. I did the same thing for the other way. This ended up with two seperate lists of moves. Then, since the lists were seperate, to check blocked moves I would only need to check one axis, not both. Because of this it was actually easy to find the blocked moves and it was similar to the rook. I actually made some advancements in this code and there&#39;s a lot of extra stuff I did for the rook that I didn&#39;t need to do. . class bishop extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this rook this.id = &quot;B&quot; } //method to return all of the available moves that the piece can make. getTotalMoves(){ let currentPosition = this.position; let movesLToR = []; let movesRToL = []; let furthestLeft = currentPosition; let furthestRight = currentPosition; let bruh = 0; while (furthestLeft[0] != &quot;a&quot; &amp;&amp; furthestLeft[1] != 1){ furthestLeft = lettersOnBoard[lettersOnBoard.indexOf(furthestLeft[0]) - 1] + (furthestLeft[1] - 1); } while (furthestRight[0] != &quot;h&quot; &amp;&amp; furthestRight[1] != 1){ furthestRight = lettersOnBoard[lettersOnBoard.indexOf(furthestRight[0]) + 1] + (furthestRight[1] - 1); } for (i = 0; i &lt; 8 - lettersOnBoard.indexOf(furthestLeft[0]) - furthestLeft[1] + 1; i++){ movesLToR.push(lettersOnBoard[lettersOnBoard.indexOf(furthestLeft[0]) + i] + (parseInt(furthestLeft[1]) + i)); } for (i = 0; i &lt; 2 + lettersOnBoard.indexOf(furthestRight[0]) - furthestRight[1]; i++){ movesRToL.push(lettersOnBoard[lettersOnBoard.indexOf(furthestRight[0]) - i] + (parseInt(furthestRight[1]) + i)); } let totalMovesLToR = []; let totalMovesRToL = [] movesLToR.forEach((c) =&gt; { if (c != this.position){ totalMovesLToR.push(c); } }); movesRToL.forEach((c) =&gt; { if (c != this.position){ totalMovesRToL.push(c); } }); return [totalMovesLToR, totalMovesRToL]; } //method to return all of the obstructed moves based on the total moves getObstructedMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMovesLToR = []; let obstructedMovesRToL = []; let blockedMovesLToR = []; let blockedMovesRToL = []; let index = -1 // Finds the moves which are behind an obstructed move and also finds all of the obstructed moves. Only for left to right. Does it by compating whether the letter + number is higher or lower. totalMoves[0].forEach((c) =&gt; { if (!blockedMovesLToR.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMovesLToR.push(c); index++ totalMoves[0].forEach((c) =&gt; { try{ if (parseInt(obstructedMovesLToR[index][1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &gt; parseInt(this.position[1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &amp;&amp; parseInt(c[1]) + lettersOnBoard.indexOf(c[0]) &gt; parseInt(obstructedMovesLToR[index][1]) + lettersOnBoard.indexOf(obstructedMovesLToR[index][0])){ blockedMovesLToR.push(c) } else if (obstructedMovesLToR[index][1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &lt; this.position[1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0]) &amp;&amp; c[1] + lettersOnBoard.indexOf(c[0]) &lt; obstructedMovesLToR[index][1] + lettersOnBoard.indexOf(obstructedMovesLToR[index][0])){ blockedMovesLToR.push(c) } } catch{} }) } } }) index = -1 // Finds the moves which are behind an obstructed move and also finds all of the obstructed moves. Only for right to left. Does it by finding whether the number is bigger or smaller (realized I was being dumb before but i&#39;m not changing the old code. Because it&#39;s only one diaganol though you can easily find if its blocked just by the number.) totalMoves[1].forEach((c) =&gt; { if (!blockedMovesRToL.includes(c)){ if (chessBoard[c][0] != &quot;OO&quot;){ obstructedMovesRToL.push(c); index++ totalMoves[1].forEach((c) =&gt; { try{ if (parseInt(c[1]) &gt; parseInt(obstructedMovesRToL[index][1]) &amp;&amp; parseInt(obstructedMovesRToL[index][1]) &gt; parseInt(this.position[1])){ blockedMovesRToL.push(c) } else if (parseInt(c[1]) &lt; parseInt(obstructedMovesRToL[index][1]) &amp;&amp; parseInt(obstructedMovesRToL[index][1]) &lt; parseInt(this.position[1])){ blockedMovesRToL.push(c) } } catch{} }) } } }) //seperates the obstructed moves and the blocked moves and returns both. let obstructedMoves = []; obstructedMovesLToR.forEach((c) =&gt; [obstructedMoves.push(c)]) obstructedMovesRToL.forEach((c) =&gt; [obstructedMoves.push(c)]) let blockedMoves = []; blockedMovesLToR.forEach((c) =&gt; {blockedMoves.push(c);}) blockedMovesRToL.forEach((c) =&gt; {blockedMoves.push(c);}) obstructedMoves = obstructedMoves.filter((c) =&gt; !blockedMoves.includes(c)) return [obstructedMoves, blockedMoves]; } //method to return all of the moves which are not obstructed getFreeMoves(){ let totalMoves = this.getTotalMoves()[0]; this.getTotalMoves()[1].forEach((c) =&gt; {totalMoves.push(c)}) let obstructedMoves = this.getObstructedMoves()[0]; this.getObstructedMoves()[1].forEach((c) =&gt; {obstructedMoves.push(c)}) totalMoves = totalMoves.filter((c) =&gt; !obstructedMoves.includes(c) ); return totalMoves; } //method to return the pieces which can be captured. getAvailableCaptures(){ let finalCaptures = []; let obstructedMoves = this.getObstructedMoves()[0] obstructedMoves.forEach((c) =&gt; { if (chessBoard[c][0][0] != this.color) {finalCaptures.push(c)} }) console.log(finalCaptures) return finalCaptures } } let bishop1 = new bishop(&quot;d4&quot;, &quot;w&quot;) chessBoard[bishop1.position] = [bishop1.color + bishop1.id, bishop1] let bishop2 = new bishop(&quot;e3&quot;, &quot;b&quot;) chessBoard[bishop2.position] = [bishop2.color + bishop2.id, bishop2] let biship3 = new bishop(&quot;e5&quot;, &quot;b&quot;) chessBoard[biship3.position] = [biship3.color + biship3.id, biship3] let bishop4 = new bishop(&quot;g1&quot;, &quot;b&quot;) chessBoard[bishop4.position] = [bishop4.color + bishop4.id, bishop4] //printBoard(); bishop1.getAvailableMoves() bishop1.getObstructedMoves() . [ &#39;e5&#39;, &#39;e3&#39; ] . [ [ &#39;e5&#39;, &#39;e3&#39; ], [ &#39;f6&#39;, &#39;g7&#39;, &#39;h8&#39;, &#39;g1&#39;, &#39;f2&#39; ] ] . Cell #5 . This is for the pawn. This piece was easier than the rook and the bishop. The only complicated part was setting up double move for the first move, but it wasn&#39;t that bad. I set up a variable which displayed whether or not it had moved yet and then changed the available moves based on that. Also, this class has it&#39;s own unique move method which uses the parent class move and adds a single line where is changes the hasMoved variable to 1 to show that it can&#39;t move two anymore. The other thing that I had to do different was directionality, but I was able to just used the color to create a direction variable. The captures were also a little different because they weren&#39;t in the possible moves, but that actually made it easier. . class pawn extends piece{ constructor(_position, _color){ // super is the position constructor, uh basically does some super cool inheritence stuff or something. super(_position, _color); // automatically sets the spot on the board which is passed in to this pawn using the parent method if (_color == &quot;w&quot;){this.direction = 1} else if (_color == &quot;b&quot;) {this.direction = -1} this.hasMoved = 0; this.id = &quot;P&quot;; } move(move, currentM){ super.move(move, currentM) this.hasMoved = 1 } getTotalMoves(){ let moves = []; let currentPosition = this.position.split(&quot;&quot;); if(this.hasMoved == 0){ moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (1 * this.direction))) moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (2 * this.direction))) } else{ moves.push(currentPosition[0] + (parseInt(currentPosition[1]) + (1 * this.direction))) } return moves; } getFreeMoves(){ let moves = this.getTotalMoves(); let freeMoves = []; if (chessBoard[moves[0]][0] == &quot;OO&quot;){ freeMoves.push(moves[0]); try{ if (chessBoard[moves[1]][0] == &quot;OO&quot;){freeMoves.push(moves[1]);} }catch{} } return freeMoves; } getAvailableCaptures(){ let captures = []; let currentPosition = this.position.split(&quot;&quot;); let possibleLets = [ lettersOnBoard[lettersOnBoard.indexOf(currentPosition[0]) - 1], lettersOnBoard[lettersOnBoard.indexOf(currentPosition[0]) + 1] ]; possibleLets = possibleLets.filter(c =&gt; c != undefined); possibleLets.forEach((c) =&gt; { let a = parseInt(currentPosition[1]) + (1 * this.direction) let check = c + a if (chessBoard[check][0][0] != this.color &amp;&amp; chessBoard[check][0] != &quot;OO&quot;){ captures.push(check); } }) return captures; } } let pawn1 = new pawn(&quot;c5&quot;, &quot;b&quot;) chessBoard[pawn1.position] = [pawn1.color + pawn1.id, pawn1] printBoard() . OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO bP OO OO OO wQ OO OO wB OO OO OO OO OO OO bB OO bB OO OO OO OO OO OO OO OO OO OO OO bB OO OO OO OO OO OO OO OO OO OO OO OO OO OO OO . class king extends piece{ constructor(_position, _color){ super(_position, _color); // automatically sets the spot on the board which is passed in to this rook } //method to return all of the available moves that the piece can make. getTotalMoves(){ let currentPosition = this.position.split(&quot;&quot;); let moves = []; let aboveNum = parseInt(currentPosition[1]) + 1 let currentLetNum = lettersOnBoard.indexOf(currentPosition[0]) for (var i = -1; i &lt;= 1; i++){ moves.push(lettersOnBoard[currentLetNum + i] + aboveNum); } } let belowNum = parseInt(currentPosition[1]) - 1 for (var i = -1; i &lt;= 1; i++){ if ((belowNum != 0) &amp;&amp; ((currentLetNum + i) != 8) &amp;&amp; (currentLetNum + i) != -1){ moves.push(lettersOnBoard[currentLetNum + i] + belowNum); } let sameNum = parseInt(currentPosition[1]) for (var i = -1; i &lt;= 1;i++){ if (i != 0){ moves.push(lettersOnBoard[currentLetNum + i] + sameNum); } } return moves; } //method to return all of the obstructed moves based on the total moves getObstructedMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = []; for (var i = 0; i &lt; totalMoves.length; i++){ if (chessBoard[totalMoves[i]][0] != &quot;OO&quot;){ obstructedMoves.push(totalMoves[i]); } } return obstructedMoves; } //method to return all of the moves which are not obstructed getFreeMoves(){ let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); totalMoves.forEach((c) =&gt; { //console.log(c); for (var i = 0; i &lt; obstructedMoves.length; i ++){ if (c == obstructedMoves[i]){ totalMoves.splice(totalMoves.indexOf(c), 1); } } }) return totalMoves; } //method to return the pieces which can be captured. getAvailableCaptures(){ // defines new variables as other methods in this class which may be useful. let totalMoves = this.getTotalMoves(); let obstructedMoves = this.getObstructedMoves(); // defines arrays let sameRow = []; let sameColumn = []; let columnNums = []; let columnDifs = []; let negDifsColumn = []; let posDifsColumn = []; let rowLets = []; let rowNums = []; let rowDifs = []; let posDifsRow = []; let negDifsRow = []; let captures = []; let finalCaptures = []; // finds all of the moves which are in the same row or in the same column as the rook. obstructedMoves.forEach((c) =&gt; { if (this.position.split(&quot;&quot;)[0] == c.split(&quot;&quot;)[0]){ sameColumn.push(c); } else if (this.position.split(&quot;&quot;)[1] == c.split(&quot;&quot;)[1]){ sameRow.push(c); } }) //adds to a new array all of the numbers in the obstructed columns. Also converts it to an Integer sameColumn.forEach((c) =&gt; { columnNums.push(parseInt(c.split(&quot;&quot;)[1])); }) //elipses is a spread function, basically inputs each value in the array as it&#39;s own parameter. //this foreach finds the difference between the pieces in the same column and the rooks current position columnNums.forEach((c) =&gt; {columnDifs.push(c - parseInt(this.position.split(&quot;&quot;)[1]))}); //this foreach defines two new columnDifs.forEach((c) =&gt; {if (c &lt; 0) negDifsColumn.push(Math.abs(c)); else posDifsColumn.push(c);}) // finds the minimum positive number and the minimum negative number and converts them to an integer var posMinColumn = parseInt(Math.min(...posDifsColumn)); var negMinColumn = parseInt(Math.min(...negDifsColumn)); // works backwards to find the position on the board given the smallest differences sameColumn.forEach((c) =&gt; {if (parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) + posMinColumn || parseInt(c.split(&quot;&quot;)[1]) == parseInt(this.position.split(&quot;&quot;)[1]) - negMinColumn){captures.push(c)}}) // basically does all of the same stuff but for the rows using the index of the lettersOnBoard array sameRow.forEach((c) =&gt; {rowLets.push(c.split(&quot;&quot;)[0]);}) rowLets.forEach((c) =&gt; {rowNums.push(lettersOnBoard.indexOf(c) + 1)}) rowNums.forEach((c) =&gt; {rowDifs.push(parseInt(c) - (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + 1))}) rowDifs.forEach((c) =&gt; {if (c &lt; 0) negDifsRow.push(Math.abs(c)); else posDifsRow.push(c);}) var posMinRow = parseInt(Math.min(...posDifsRow)); var negMinRow = parseInt(Math.min(...negDifsRow)) sameRow.forEach((c) =&gt; {if ((lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) + posMinRow + 1) || (lettersOnBoard.indexOf(c.split(&quot;&quot;)[0]) + 1) == (lettersOnBoard.indexOf(this.position.split(&quot;&quot;)[0]) - negMinRow + 1)){captures.push(c)}}) //checks if captures are the same color or not captures.forEach((c) =&gt; { if (chessBoard[c].split(&quot;&quot;)[0] != this.color){ finalCaptures.push(c); } }) return finalCaptures } } let king1 = new king(&quot;d5&quot;, &quot;b&quot;); console.log(king1.getObstructedMoves()) . [ &#39;d2&#39;, &#39;e2&#39;, &#39;f2&#39;, &#39;d1&#39;, &#39;f1&#39; ] . [] . let rookb1 = new rook(&quot;a8&quot;, &quot;b&quot;); setBoard(rookb1) let rookb2 = new rook(&quot;h8&quot;, &quot;b&quot;); setBoard(rookb2) let rookw1 = new rook(&quot;a1&quot;, &quot;w&quot;); setBoard(rookw1) let rookw2 = new rook(&quot;h1&quot;, &quot;w&quot;); setBoard(rookw2) let pawnw1 = new pawn(&quot;a2&quot;, &quot;w&quot;) setBoard(pawnw1) let pawnw2 = new pawn(&quot;b2&quot;, &quot;w&quot;) setBoard(pawnw2) let pawnw3 = new pawn(&quot;c2&quot;, &quot;w&quot;) setBoard(pawnw3) let pawnw4 = new pawn(&quot;d2&quot;, &quot;w&quot;) setBoard(pawnw4) let pawnw5 = new pawn(&quot;e2&quot;, &quot;w&quot;) setBoard(pawnw5) let pawnw6 = new pawn(&quot;f2&quot;, &quot;w&quot;) setBoard(pawnw6) let pawnw7 = new pawn(&quot;g2&quot;, &quot;w&quot;) setBoard(pawnw7) let pawnw8 = new pawn(&quot;h2&quot;, &quot;w&quot;) setBoard(pawnw8) printBoard() movePiece(&quot;g2&quot;, &quot;g4&quot;); movePiece(&quot;a1&quot;, &quot;g1&quot;); console.log(&quot;&quot;); movePiece(&quot;g4&quot;, &quot;g5&quot;); movePiece(&quot;g5&quot;, &quot;g6&quot;); movePiece(&quot;g6&quot;, &quot;g7&quot;); printMoves(&quot;g7&quot;) movePiece(&quot;g7&quot;, &quot;h8&quot;); printBoard(); function movePiece(currentM, newM){ chessBoard[currentM][1].move(newM, currentM) } function printMoves(current){ console.log(chessBoard[current][1].getAvailableMoves()) } . evalmachine.&lt;anonymous&gt;:1 let rookb1 = new rook(&#34;a8&#34;, &#34;b&#34;); ^ ReferenceError: rook is not defined at evalmachine.&lt;anonymous&gt;:1:14 at Script.runInThisContext (vm.js:96:20) at Object.runInThisContext (vm.js:303:38) at run ([eval]:1020:15) at onRunRequest ([eval]:864:18) at onMessage ([eval]:828:13) at process.emit (events.js:182:13) at emit (internal/child_process.js:812:12) at process._tickCallback (internal/process/next_tick.js:63:19) . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_8/2022/10/11/Chess_Logic.html",
            "relUrl": "/week_8/2022/10/11/Chess_Logic.html",
            "date": " • Oct 11, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Program Purpose",
            "content": "Program Purpose . Big Idea 1 . Program Purpose and Function Our Program’s purpose is to play a succesful game of chess and declare a victor (or stalemate) and to allow the player to customize the game to a certain degree. The functions will be moving pieces, capturing pieces, recording captured pieces, customizing where the pieces are. . Big Idea 2 . Data Abstraction One small example of a list would be the pieces that have been captured, they would be kept in a list in order to display as well as calculate the points a player has. Also, the moves a pieces can legally make would be in a list as well, actually in a dictionary which corresponds the moves and pieces. Also, there would be lists of pieces for definitions and the board would be defined as a list of corresponding letters and numbers as well. . Big Idea 3 . Managing Complexity The list of possible moves helps to abstract the moves for each piece. In this way each piece instance can function the same way and only be specified by its defined characteristics. The board being defined as letter and number pairs also helps, as we will be able to add the number of squares a piece to the current place on the board in order to check. . Big Idea 4 . Procedural Abstraction We will have many procedures. One might be calculating the possible moves based on the piece type and the current position. This will be abstracted further through a function to calculate the change in letter and number of the posititon and return the change in x and y. . Big Idea 5 . Algorithm Implementation One algorithm we will use which will sequence, select and iterate is the algorithm to determine the possible moves. This will generate a list of options and return those options. . Big Idea 6 . Testing We will be blogging the issues we encounter (probably in a google drive so we can all work together) .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%207/2022/10/10/program_purpose.html",
            "relUrl": "/week%207/2022/10/10/program_purpose.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "RapidAPI the Return",
            "content": "| Intro | Thing | . . import requests from IPython.display import Markdown as md #IMDB API endpoint to get a users bio url = &quot;https://imdb8.p.rapidapi.com/actors/get-bio&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;070652e641mshef3b7431c30b633p174936jsn56763374d512&quot;, &quot;X-RapidAPI-Host&quot;: &quot;imdb8.p.rapidapi.com&quot; } a = 1 def actorCheck(fav, a): if (fav.lower() != &quot;toby leeder&quot; and a &lt;= 5): fav = input(wrongBruh(a)) a += 1 actorCheck(fav, a) else: return &quot;Toby Leeder&quot; def wrongBruh(a): if a == 1: return &quot;Ok lets try this again. Pick your favorite actor who&#39;s name starts with T&quot; elif a == 2: return &quot;Ok ok, they&#39;re pretty good, but what about your favorite actor who&#39;s name starts with Toby?&quot; elif a == 3: return &quot;OK that&#39;s closer, try another Toby.&quot; elif a == 4: return &quot;Wrong. Did You mean Toby Leeder? I think you meant Toby Leeder. It&#39;s ok. Try again.&quot; elif a == 5: return &quot;Thats it I&#39;m chosing for you.&quot; favActor = input(&quot;Write the name of your favorite actor&quot;) favActor = actorCheck(favActor, a) querystring = {&quot;nconst&quot;:&quot;nm5927244&quot;} tobySearch = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(&quot;Here is your favorite actors name and bio!&quot;) print(tobySearch.json().get(&quot;name&quot;)) print(tobySearch.json().get(&quot;miniBios&quot;)[0].get(&quot;text&quot;)) tobyImage = tobySearch.json().get(&quot;image&quot;).get(&quot;url&quot;) print(&quot;Here is the link to the image of toby you see below: &quot; + tobyImage) . Here is your favorite actors name and bio! Toby Leeder Toby Leeder is known for Chuck Hank and the San Diego Twins (2022), The Call (2020) and Love XO (2022). Here is the link to the image of toby you see below: https://m.media-amazon.com/images/M/MV5BNmJjZDVjMWUtMTY2ZS00NDc4LTgwMGYtNjNmZTc1YzhkMWZiXkEyXkFqcGdeQXVyNDY0MDQ4MDg@._V1_.jpg . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/api/thing",
            "relUrl": "/api/thing",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Python RapidAPI",
            "content": "| Intro | Thing | . . &quot;&quot;&quot; Requests is a HTTP library for the Python programming language. The goal of the project is to make HTTP requests simpler and more human-friendly. &quot;&quot;&quot; import requests &quot;&quot;&quot; RapidAPI is the world&#39;s largest API Marketplace. Developers use Rapid API to discover and connect to thousands of APIs. &quot;&quot;&quot; url = &quot;https://corona-virus-world-and-india-data.p.rapidapi.com/api&quot; headers = { &quot;X-RapidAPI-Key&quot;: &quot;070652e641mshef3b7431c30b633p174936jsn56763374d512&quot;, &quot;X-RapidAPI-Host&quot;: &quot;corona-virus-world-and-india-data.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers) # This code looks for &quot;world data&quot; print(&quot;World Totals&quot;) world = response.json().get(&#39;world_total&#39;) # turn response to json() so we can extract &quot;world_total&quot; for key, value in world.items(): # this finds key, value pairs in country print(key, value) print() # This code looks for USA in &quot;countries_stats&quot; print(&quot;Country Totals&quot;) countries = response.json().get(&#39;countries_stat&#39;) for country in countries: # countries is a list if country[&quot;country_name&quot;] == &quot;USA&quot;: # this filters for USA for key, value in country.items(): # this finds key, value pairs in country print(key, value) . World Totals total_cases 509,268,964 new_cases 204,268 total_deaths 6,242,509 new_deaths 630 total_recovered 461,827,849 active_cases 41,198,606 serious_critical 42,510 total_cases_per_1m_population 65,334 deaths_per_1m_population 800.9 statistic_taken_at 2022-04-24 11:18:01 Country Totals country_name USA cases 82,649,779 deaths 1,018,316 region total_recovered 80,434,925 new_deaths 0 new_cases 0 serious_critical 1,465 active_cases 1,196,538 total_cases_per_1m_population 247,080 deaths_per_1m_population 3,044 total_tests 1,000,275,726 tests_per_1m_population 2,990,303 . Digital Coin Example . This example provides digital coin feedback (ie Bitcoin). It include popularity, price, symbols, etc. . A valid X-RapidAPI-Key is required. Look in code for link to RapidAPI page | Read all comments in code for further guidance | . # RapidAPI page https://rapidapi.com/Coinranking/api/coinranking1/ # Begin Rapid API Code url = &quot;https://coinranking1.p.rapidapi.com/coins&quot; querystring = {&quot;referenceCurrencyUuid&quot;:&quot;yhjMzLPhuIDl&quot;,&quot;timePeriod&quot;:&quot;24h&quot;,&quot;tiers[0]&quot;:&quot;1&quot;,&quot;orderBy&quot;:&quot;marketCap&quot;,&quot;orderDirection&quot;:&quot;desc&quot;,&quot;limit&quot;:&quot;50&quot;,&quot;offset&quot;:&quot;0&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;070652e641mshef3b7431c30b633p174936jsn56763374d512&quot;, &quot;X-RapidAPI-Host&quot;: &quot;coinranking1.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) # End Rapid API Code json = response.json() # convert response to python json object # Observe data from an API. This is how data transports over the internet in a &quot;JSON&quot; text form # - The JSON &quot;text&quot; is formed in dictionary {} and list [] divisions # - To read the result, Data Scientist of Developer converts JSON into human readable form # - Review the first line, look for the keys -- &quot;status&quot; and &quot;data&quot; . Formatting Digital Coin example . JSON text transferred from the API in the previous cell was converted to a Python Dictionary called json. The &quot;coins&quot; in the dictionary contain a list of the most relevant data. Look at the code and comments to see how the original text is turned into something understandable. Additionally, there are error check to make sure we are starting the code with the expectation that the API was run correctly. . &quot;&quot;&quot; This cell is dependent on valid run of API above. - try and except code is making sure &quot;json&quot; was properly run above - inside second try is code that is used to process Coin API data Note. Run this cell repeatedly to format data without re-activating API &quot;&quot;&quot; try: print(&quot;JSON data is Python type: &quot; + str(type(json))) try: # Extracting Coins JSON status, if the API worked status = json.get(&#39;status&#39;) print(&quot;API status: &quot; + status) print() # Extracting Coins JSON data, data about the coins data = json.get(&#39;data&#39;) # Procedural abstraction of Print code for coins def print_coin(c): print(c[&quot;symbol&quot;], c[&quot;price&quot;]) print(&quot;Icon Url: &quot; + c[&quot;iconUrl&quot;]) print(&quot;Rank Url: &quot; + c[&quot;coinrankingUrl&quot;]) # Coins data was observed to be a list for coin in data[&#39;coins&#39;]: print_coin(coin) print() except: print(&quot;Did you insert a valid key in X-RapidAPI-Key of API cell above?&quot;) print(json) except: print(&quot;This cell is dependent on running API call in cell above!&quot;) . JSON data is Python type: &lt;class &#39;dict&#39;&gt; API status: success BTC 20049.9237327966 Icon Url: https://cdn.coinranking.com/bOabBYkcX/bitcoin_btc.svg Rank Url: https://coinranking.com/coin/Qwsogvtv82FCd+bitcoin-btc ETH 1358.6355164439092 Icon Url: https://cdn.coinranking.com/rk4RKHOuW/eth.svg Rank Url: https://coinranking.com/coin/razxDUgYGNAdQ+ethereum-eth USDT 1.0007683383144264 Icon Url: https://cdn.coinranking.com/mgHqwlCLj/usdt.svg Rank Url: https://coinranking.com/coin/HIVsRcGKkPFtW+tetherusd-usdt USDC 1.0012907811707508 Icon Url: https://cdn.coinranking.com/jkDf8sQbY/usdc.svg Rank Url: https://coinranking.com/coin/aKzUVe4Hh_CON+usdc-usdc BNB 293.22942267572773 Icon Url: https://cdn.coinranking.com/B1N19L_dZ/bnb.svg Rank Url: https://coinranking.com/coin/WcwrkfNI4FUAe+binancecoin-bnb XRP 0.49598921502331633 Icon Url: https://cdn.coinranking.com/B1oPuTyfX/xrp.svg Rank Url: https://coinranking.com/coin/-l8Mn2pVlRs-p+xrp-xrp BUSD 1.0002974548603891 Icon Url: https://cdn.coinranking.com/6SJHRfClq/busd.svg Rank Url: https://coinranking.com/coin/vSo2fu9iE1s0Y+binanceusd-busd ADA 0.42885971529577105 Icon Url: https://cdn.coinranking.com/ryY28nXhW/ada.svg Rank Url: https://coinranking.com/coin/qzawljRxB5bYu+cardano-ada SOL 33.69664828989402 Icon Url: https://cdn.coinranking.com/yvUG4Qex5/solana.svg Rank Url: https://coinranking.com/coin/zNZHO_Sjf+solana-sol DOGE 0.06382400338374933 Icon Url: https://cdn.coinranking.com/H1arXIuOZ/doge.svg Rank Url: https://coinranking.com/coin/a91GCGd_u96cF+dogecoin-doge MATIC 0.8414524945650208 Icon Url: https://cdn.coinranking.com/WulYRq14o/polygon.png Rank Url: https://coinranking.com/coin/uW2tk-ILY0ii+polygon-matic DOT 6.375081803170367 Icon Url: https://cdn.coinranking.com/RsljYqnbu/polkadot.svg Rank Url: https://coinranking.com/coin/25W7FG7om+polkadot-dot SHIB 0.000011288914472657 Icon Url: https://cdn.coinranking.com/D69LfI-tm/shib.png Rank Url: https://coinranking.com/coin/xz24e0BjL+shibainu-shib DAI 1.0006291992703804 Icon Url: https://cdn.coinranking.com/mAZ_7LwOE/mutli-collateral-dai.svg Rank Url: https://coinranking.com/coin/MoTuySvg7+dai-dai TRX 0.06258052330051515 Icon Url: https://cdn.coinranking.com/behejNqQs/trx.svg Rank Url: https://coinranking.com/coin/qUhEFk1I61atv+tron-trx WETH 1358.9816391781385 Icon Url: https://cdn.coinranking.com/KIviQyZlt/weth.svg Rank Url: https://coinranking.com/coin/Mtfb0obXVh59u+wrappedether-weth UNI 6.883589125213015 Icon Url: https://cdn.coinranking.com/1heSvUgtl/uniswap-v2.svg?size=48x48 Rank Url: https://coinranking.com/coin/_H5FVG9iW+uniswap-uni AVAX 17.16181307250074 Icon Url: https://cdn.coinranking.com/S0C6Cw2-w/avax-avalanche.png Rank Url: https://coinranking.com/coin/dvUj0CzDZ+avalanche-avax WBTC 20041.261732308747 Icon Url: https://cdn.coinranking.com/o3-8cvCHu/wbtc[1].svg Rank Url: https://coinranking.com/coin/x4WXHge-vvFY+wrappedbtc-wbtc ATOM 13.16542473542066 Icon Url: https://cdn.coinranking.com/HJzHboruM/atom.svg Rank Url: https://coinranking.com/coin/Knsels4_Ol-Ny+cosmos-atom OKB 15.66022182512388 Icon Url: https://cdn.coinranking.com/xcZdYtX6E/okx.png Rank Url: https://coinranking.com/coin/PDKcptVnzJTmN+okb-okb LTC 54.05648566389233 Icon Url: https://cdn.coinranking.com/BUvPxmc9o/ltcnew.svg Rank Url: https://coinranking.com/coin/D7B1x_ks7WhV5+litecoin-ltc FTT 24.693691930298066 Icon Url: https://cdn.coinranking.com/WyBm4_EzM/ftx-exchange.svg Rank Url: https://coinranking.com/coin/NfeOYfNcl+ftxtoken-ftt ETC 27.966996516321945 Icon Url: https://cdn.coinranking.com/rJfyor__W/etc.svg Rank Url: https://coinranking.com/coin/hnfQfsYfeIGUQ+ethereumclassic-etc XMR 145.05674939207412 Icon Url: https://cdn.coinranking.com/Syz-oSd_Z/xmr.svg Rank Url: https://coinranking.com/coin/3mVx2FX_iJFp5+monero-xmr ALGO 0.3507195066967462 Icon Url: https://cdn.coinranking.com/lzbmCkUGB/algo.svg Rank Url: https://coinranking.com/coin/TpHE2IShQw-sJ+algorand-algo XLM 0.1204735874762962 Icon Url: https://cdn.coinranking.com/78CxK1xsp/Stellar_symbol_black_RGB.svg Rank Url: https://coinranking.com/coin/f3iaFeCKEmkaZ+stellar-xlm BCH 120.18749052658397 Icon Url: https://cdn.coinranking.com/By8ziihX7/bch.svg Rank Url: https://coinranking.com/coin/ZlZpzOJo43mIo+bitcoincash-bch BTCB 20096.064448414432 Icon Url: https://cdn.coinranking.com/Swr_SeZio/4023.png Rank Url: https://coinranking.com/coin/9_jH48RBW+bitcoinbep2-btcb NEAR 3.6497520889605766 Icon Url: https://cdn.coinranking.com/Cth83dCnl/near.png Rank Url: https://coinranking.com/coin/DCrsaMv68+nearprotocol-near CRO 0.10985709390988495 Icon Url: https://cdn.coinranking.com/2o91jm73M/cro.svg Rank Url: https://coinranking.com/coin/65PHZTpmE55b+cronos-cro LUNC 0.000290883860949558 Icon Url: https://cdn.coinranking.com/F-PJdF8Um/LUNA.svg Rank Url: https://coinranking.com/coin/AaQUAs2Mc+terraclassic-lunc WEMIX 1.8044031649772716 Icon Url: https://cdn.coinranking.com/1N84MQsoO/7548.png Rank Url: https://coinranking.com/coin/08CsQa-Ov+wemixtoken-wemix FLOW 1.6999659347282123 Icon Url: https://cdn.coinranking.com/xh8X8QBss/flow.png Rank Url: https://coinranking.com/coin/QQ0NCmjVq+flow-flow ENS 17.04218243105481 Icon Url: https://cdn.coinranking.com/fmYxEUV5a/cropped-logo37-Converted-01-192x192.png Rank Url: https://coinranking.com/coin/SbWqqTui-+energyswap-ens FIL 5.538424403837201 Icon Url: https://cdn.coinranking.com/vUmvv-IQA/FIL3-filecoin.svg?size=48x48 Rank Url: https://coinranking.com/coin/ymQub4fuB+filecoin-fil ICP 6.036603555263508 Icon Url: https://cdn.coinranking.com/1uJ_RVrmC/dfinity-icp.png Rank Url: https://coinranking.com/coin/aMNLwaUbY+internetcomputerdfinity-icp VET 0.023573370804009435 Icon Url: https://cdn.coinranking.com/B1_TDu9Dm/VEN.svg Rank Url: https://coinranking.com/coin/FEbS54wxo4oIl+vechain-vet CAKE 4.7188031496280685 Icon Url: https://cdn.coinranking.com/aRtgdw7bQ/pancakeswap-cake-logo.png Rank Url: https://coinranking.com/coin/ncYFcP709+pancakeswap-cake MANA 0.7005258478745544 Icon Url: https://cdn.coinranking.com/ph_svUzXs/decentraland(1).svg Rank Url: https://coinranking.com/coin/tEf7-dnwV3BXS+decentraland-mana IMX 0.763686997375083 Icon Url: https://cdn.coinranking.com/naRGT2Y_X/10603.png Rank Url: https://coinranking.com/coin/Z96jIvLU7+immutablex-imx HBAR 0.057945529596335796 Icon Url: https://cdn.coinranking.com/dSCnSLilQ/hedera.svg Rank Url: https://coinranking.com/coin/jad286TjB+hedera-hbar FRAX 1.0005527250081132 Icon Url: https://cdn.coinranking.com/BpVNCX-NM/frax.png Rank Url: https://coinranking.com/coin/KfWtaeV1W+frax-frax QNT 138.49826008575053 Icon Url: https://cdn.coinranking.com/a-i9Dl392/quant.png Rank Url: https://coinranking.com/coin/bauj_21eYVwso+quant-qnt XTZ 1.4321978004903466 Icon Url: https://cdn.coinranking.com/HkLUdilQ7/xtz.svg Rank Url: https://coinranking.com/coin/fsIbGOEJWbzxG+tezos-xtz EGLD 54.856351727337156 Icon Url: https://cdn.coinranking.com/X62ruAuZQ/Elrond.svg Rank Url: https://coinranking.com/coin/omwkOTglq+elrond-egld CHZ 0.2156780704663453 Icon Url: https://cdn.coinranking.com/gTsOlSnwR/4066.png Rank Url: https://coinranking.com/coin/GSCt2y6YSgO26+chiliz-chz SAND 0.8476439614574023 Icon Url: https://cdn.coinranking.com/kd_vwOcnI/sandbox.png Rank Url: https://coinranking.com/coin/pxtKbG5rg+thesandbox-sand LDO 1.5110556907809047 Icon Url: https://cdn.coinranking.com/Wp6LFY6ZZ/8000.png Rank Url: https://coinranking.com/coin/Pe93bIOD2+lidodaotoken-ldo EOS 1.1712521283780641 Icon Url: https://cdn.coinranking.com/PqOYrWSje/eos2.svg Rank Url: https://coinranking.com/coin/iAzbfXiBBKkR6+eos-eos . Go deeper into APIs . Web Development vs Jupyter Notebook. A notebook is certainly a great place to start. But, for your end of Trimester project we want you to build the skill to reference and use APIs within your Project. Here are some resources to get you started with this journey. . In the Nighthawk Coders APCSP you can find an Overview and Examples using APIs:APCSP APIs menu- Using Covid RapidAPI JavaScript frontend API code in APCSP Fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-rapidapi.md | . | Making a Jokes API (this will next API tech talk) Frontend. JavaScript frontend code in APCSP fastpages GitHub repo: https://github.com/nighthawkcoders/APCSP/blob/master/_posts/2022-07-10-PBL-jokes.md | Backend Endpoints. Python code that allows Frontend access: https://github.com/nighthawkcoders/flask_portfolio/blob/main/api.py | Backend Jokes Management. Python code that support Create, Read, Update, Delete (CRUD): https://github.com/nighthawkcoders/flask_portfolio/blob/main/model_jokes.py | . | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/api/intro",
            "relUrl": "/api/intro",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "More Python Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . More Python Learns . Also in the Lists and Dictionaries w/Python . Code Syntax Notes . List | key = [value, value, …] | Lists in python are sorta like arrays in Java. They are different because a list can have multiple different data types within it. Lists can also have multiple dictionary entries in which each dictionary has multiple key and value pairs within it. Entries can be added into a list using the .append() method or just use + and adding it. | . Dictionary | dictionary_key = {key: value, key: value …} | Dictionaries are similar to lists, but instead of just holding values with one single key, each individual value is paired with its own key. That means you can call each value using its unique key. This is useful for a lot of things. You can also create a list of dictionaries, in which a list has multiple dictionary entries. Each dictionary can have multiple key and value pairs and is only considered one entry in the list. | . Try, except | try: code except error: code except: code | This is an interesting code that I already knew about from previous experience, but I found it could be useful here. Essentially the try portion is what runs initially and it will keep running the code within it until it runs and returns an error. Then the except code runs after. You can change what the except code is depending on the error or you can leave it generic so it runs for any error. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/python2",
            "relUrl": "/notes/python2",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Python Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Python Learns . Also in the QnA w/Python post. . I’ve had very little experience with Python before I used it so here’s some of the new functionality I learned and the syntax for it. . Code Syntax Notes . Variables | key = value | Unlike Java, it looks like Python doesn’t really use variable assignments like java. Instead variables can just be assigned “any” and then can be assigned numbers, letters, strings or pretty much watever other value you want including lists. | . Functions | def function_name(parameter1, parameter2, parameterX): code return value | Functions are pretty similar to other languages for the most part. It is a little different than java in that you don’t really use keywords before to define it like int, string or void for the return type or static, private and public. They still function (get it?) pretty much the same though. | . For loops | for newVar in definedVar: code | For loops are probably the most different from Java. This is because they go through a list of a variable instead of creating a new integer and going until that integer reaches a value. That interger is suprisingly useful, so to me it seems like this change removes some of the functionality of a for loop. Despite this though I still found ways around it and was able to accomplish my goals. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/python1",
            "relUrl": "/notes/python1",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Bash Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Bash Learns . Also in the Checks w/Bash post. . I’ve had basically no experience with Bash before this so it was interesting to learn some of the new functionality now as well. Here is some of what I learned. . Code Syntax Notes . Variables | key=value | Most variables work the same and it looks like bash works a similar way as well. You don’t put a space in between the key and the value. If you do it looks like bash reads the key as a command and so the variable doesn’t work. Also, to call a variable it looks like you need a $ sign in front, otherwise it just reads it as a string. | . Echo | echo “what you want to print” | Echo is the bash version of print and pretty much works the same, though you can do some cool stuff with periods with it. | . If then | if [[ condition ]] then code else code fi | This again is pretty similar to java or python though there are some differences. For example the condition needs [[]] which is different. Also, you need a then statement to run the code and at the end you need fi to finish the if statement. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/bash",
            "relUrl": "/notes/bash",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Identifying and Correcting Errors",
            "content": "Here are my fixed code segments . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i + 1) + &quot; letter in the alphabet&quot;) i += 1 . The letter s is the 19 letter in the alphabet . letter = input(&quot;What letter would you like to check?&quot;) count = 1 for i in alphabetList: if i == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(count) + &quot; letter in the alphabet&quot;) count += 1 . The letter a is the 1 letter in the alphabet . evens = [] i = 1 while i &lt;= 10: evens.append(i) i += 2 print(evens) . [1, 3, 5, 7, 9] . odds = [] i = 0 while i &lt;= 10: odds.append(i) i += 2 print(odds) . [0, 2, 4, 6, 8, 10] . numbers = [0,1,2,3,4,5,6,7,8,9,10] evens = [] for i in numbers: if (numbers[i] % 2 == 1): evens.append(numbers[i]) print(evens) . [1, 3, 5, 7, 9] . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 0): odds.append(numbers[i]) print(odds) . [0, 2, 4, 6, 8, 10] . numbers = [] newNumbers = [] i = 0 while i &lt; 100: numbers.append(i) i += 1 for i in numbers: if (numbers[i] % 5 == 0 or numbers[i] % 2 == 0): newNumbers.append(numbers[i]) print(newNumbers) . [0, 2, 4, 5, 6, 8, 10, 12, 14, 15, 16, 18, 20, 22, 24, 25, 26, 28, 30, 32, 34, 35, 36, 38, 40, 42, 44, 45, 46, 48, 50, 52, 54, 55, 56, 58, 60, 62, 64, 65, 66, 68, 70, 72, 74, 75, 76, 78, 80, 82, 84, 85, 86, 88, 90, 92, 94, 95, 96, 98] . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 1.99, &quot;drink&quot;: 0.99, &quot;your mom&quot;: 69, &quot;your mother&quot;: 420, &quot;milkshake&quot;: 2.99} total = 0 more = 1 #shows the user the menu and prompts them to select an item print(&quot;Menu&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) #why does v have &quot;str&quot; in front of it? #ideally the code should prompt the user multiple times def newItem(total): m = 1 addTo = 0 item = input(&quot;Please select an item from the menu&quot;).lower() while (m == 1): for i in menu.keys(): if item == i: addTo = menu.get(item) if addTo != 0: return addTo else: item = input(&quot;Please only use items from the menu. Re-enter your selection&quot;).lower() total += newItem(total) while (more == 1): q = input(&quot;Would you like to order more?&quot;).lower() if q == &quot;yes&quot; or q == &quot;Yes&quot; or q == &quot;y&quot; or q == &quot;yeah&quot; or q == &quot;Yeah&quot; or q == &quot;Y&quot;: total += newItem(total) elif q == &quot;no&quot; or q == &quot;No&quot; or q == &quot;N&quot; or q == &quot;n&quot; or q == &quot;nah&quot; or q == &quot;Nah&quot;: more = 0 else: print(&quot;Please only use yes or no&quot;) #code should add the price of the menu items selected by the user print(&quot;$&quot; + str(total)) . Menu burger $3.99 fries $1.99 drink $0.99 your mom $69 your mother $420 milkshake $2.99 $3.99 .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%207/2022/10/03/AP-error_testing.html",
            "relUrl": "/week%207/2022/10/03/AP-error_testing.html",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Collegeboard Quizes",
            "content": ". Week 6 . Collaboration Quiz . Score: 3/3 This quiz was interesting, but easy. The last question I wasn’t sure on because it was correct on a technicality but I did get it right. While users could help identify errors they made, the couldn’t fix it. . Program Function and Purpose Quiz . Score: 6/6 This was the hardest quiz for sure. The fifth question had some code that was pretty difficult to understand but once I realized how ti worked it was pretty cool. Also in general the code language is a little weird. The way they set variables and print stuff. It seems like they changed a lot of stuff just for the sake of changing it and in turn made it worse. Overall though it was still easy. . Program Design and Development Quiz . Score: 3/3 This quiz was pretty easy overall. The only thing that I was confused on is that indexes for collegeboard start at 1. This means that arrays start at 1 and not zero so one question about switching the valuesin an array was a little weird. . Week 7 . Copy of Identifying and Correcting Errors Quiz . Score: 2/3 This quiz was the hardest one I’d had up to this point. It was the first one I got something wrong, but that was because I didn’t read that there were 2 answers. It doesn’t really make sense to me though. These situations are really unrealistic I feel, you don’t really end up with code like that which is just completely non-functional at a fundamental level. . Final . During the test . Question 16, I don’t think I did the Internet assignment so I didn’t know. I had to use other resources like the internet video to find the correct answer. | Question 17, I also didn’t know this one and had a friend help me figure it out. | Question 18, another I didn’t know. | Question 19 - 21, these questions were about binary and I didn’t know a lot about binary. I knew the basics, but Gene knew more about binary so he was able to help us. | Question 22, how does binary. I didn’t realize that you go right to left for binary numbers so that confused me, but I was able to look back at a previous question to figure it out. Score: 47/50 | Question 43, for this question I made the code myself in javascript, but I did it wrong. I thought it would run 5 times but it actually would have run 6 times so I needed to iterate through one more time. | Question 49, I guessed for this one because I was running out of time. If I had time I would have gotten it correct, it was a pretty simple problem. | Question 50, same as 49 I guessed for this one. It’s also a really simple question though that I would have gotten right. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_6/2022/10/01/collegeboard_quiz.html",
            "relUrl": "/week_6/2022/10/01/collegeboard_quiz.html",
            "date": " • Oct 1, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Table w/Javascript and w/HTML",
            "content": "var result = 0 var x = 0 for(i = 0; i &lt;= 5; i++){ result = result + x x ++ } console.log(result) . 15 . | Home | Python | Bash | More Python | Link 4 (TBD) . | . . function logIt(output) { console.log(output); } . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } . // define a function to hold data for a Person function Person(name, ghID, classOf, grade) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; this.grade = grade; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } Person.prototype.setGrade = function(grade){ this.grade = grade; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // make another New person var toby = new Person(&quot;Toby&quot;, &quot;toby-leeder&quot;, 2024); toby.setRole(&quot;Leeder Of The Friend Group&quot;) toby.setGrade(&quot;11&quot;) logItType(toby); // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role teacher.setGrade(&quot;Not In School&quot;) logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39;, grade: undefined } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Toby&#39;, ghID: &#39;toby-leeder&#39;, classOf: 2024, role: &#39;Leeder Of The Friend Group&#39;, grade: &#39;11&#39; } object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, grade: &#39;Not In School&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . // define a student Array of Person(s) var students = [ new Person(&quot;Anthony&quot;, &quot;tonyhieu&quot;, 2023, &quot;12&quot;), new Person(&quot;Bria&quot;, &quot;B-G101&quot;, 2024, &quot;11&quot;), new Person(&quot;Allie&quot;, &quot;xiaoa0&quot;, 2024, &quot;11&quot;), new Person(&quot;Tigran&quot;, &quot;Tigran7&quot;, 2024, &quot;11&quot;), new Person(&quot;Rebecca&quot;, &quot;Rebecca-123&quot;, 2024, &quot;11&quot;), new Person(&quot;Vidhi&quot;, &quot;unknown&quot;, 2024, &quot;12&quot;), new Person(&quot;Toby&quot;, &quot;toby-leeder&quot;, 2024, &quot;11&quot;), new Person(&quot;Bailey&quot;, &quot;N/A&quot;, 2026, &quot;9&quot;) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); teacher.setGrade(&quot;Not in school&quot;) this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39;, grade: &#39;Not in school&#39; }, Person { name: &#39;Anthony&#39;, ghID: &#39;tonyhieu&#39;, classOf: 2023, role: &#39;Student&#39;, grade: &#39;12&#39; }, Person { name: &#39;Bria&#39;, ghID: &#39;B-G101&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;11&#39; }, Person { name: &#39;Allie&#39;, ghID: &#39;xiaoa0&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;11&#39; }, Person { name: &#39;Tigran&#39;, ghID: &#39;Tigran7&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;11&#39; }, Person { name: &#39;Rebecca&#39;, ghID: &#39;Rebecca-123&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;11&#39; }, Person { name: &#39;Vidhi&#39;, ghID: &#39;unknown&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;12&#39; }, Person { name: &#39;Toby&#39;, ghID: &#39;toby-leeder&#39;, classOf: 2024, role: &#39;Student&#39;, grade: &#39;11&#39; }, Person { name: &#39;Bailey&#39;, ghID: &#39;N/A&#39;, classOf: 2026, role: &#39;Student&#39;, grade: &#39;9&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Grade&quot; + &quot;&lt;/mark&gt;&lt;th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.grade + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRoleGrade&lt;/tr&gt;Mr M | jm1021 | 1977 | Teacher | Not in school | Anthony | tonyhieu | 2023 | Student | 12 | Bria | B-G101 | 2024 | Student | 11 | Allie | xiaoa0 | 2024 | Student | 11 | Tigran | Tigran7 | 2024 | Student | 11 | Rebecca | Rebecca-123 | 2024 | Student | 11 | Vidhi | unknown | 2024 | Student | 12 | Toby | toby-leeder | 2024 | Student | 11 | Bailey | N/A | 2026 | Student | 9 | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . . . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_5/2022/09/25/Javascript_stuff.html",
            "relUrl": "/week_5/2022/09/25/Javascript_stuff.html",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "AppLab Plans",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Plans . To start, my applab will be a quiz. The questions will be about my robotics whatclub because I just wanted to come up with something random. . Who is the president of the club? Raadwan Masum (C) | Adrita Chakraborty | Kevin He | Toby Leeder | . | Which of the following is NOT a department in the robotics club? Outreach | Software (C) | Build | Buisness | . | Who of the following is NOT a member of leadership of the robotics club? Broden Golich | Toby Leeder | Luke Campillo (C) | Rohin Sood | . | Which department is the best department in the robotics club? Tech (Cish) | Build | Outreach | Buisness | None of them (C) | . | Who is the Vice President of the robotics club? Toby Leeder | Kevin He | Adrita Chakraborty | Hema | All of the above (C) | . | Stuff went wrong . this is where I takl about everything that is not really working . The first thing that I just figured out was how to call a table. Ideally my code is abstract, so I want it all to be in functions which run repeatedly with a table. The first part of that though is accessing the data in a table. The only way to do this that I found is use a getColumn function which returns a list of all the entries in the column which you can then access using basic list syntax. I didn’t know that you could use basic list syntax though and it took me a bit to figure that out. | Another thing that went wrong was I made a mistake and started off with the initial question number being 1. This meant that it started with entry number 1 in the table. At the beginning I just added in two table entrys so I didn’t notics this the entire time. This became an issue when I was trying to test mutiplt questions. The second question kept not loading and just saying undefined and it took me a bit to realize that this is because it was looking for a third entry that didn’t exist and not the second entry. I got confused, but eventually figured it out. | . Here it is . Here is a link to my final app lab project .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_3/2022/09/11/appLabPlanning.html",
            "relUrl": "/week_3/2022/09/11/appLabPlanning.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lists and Dictionaries w/Python",
            "content": "These are some lists and dictionaries . Here I use lists and dictionaries in order to ask people what some of their favorite things are and what the names of their pets are. . This code defines the list . RandomThings = [] #defines the Random things list . This is a function I made in order to easily reset the RandomThings list to empty . def reset_RandomThings(): RandomThings.clear() #method to clear a list print(RandomThings) return None reset_RandomThings() #function I made which empties the list so it&#39;s ready for new inputs . [] . print function and for loop printing . This is the first of my functions to print the list. First of all, I created the actual printing function which continues to loop through each dictionary until it reaches an error in which case the function stops. Then I made a for loop . def print_data(entry): #function to print data in any dictionary. made to run again for each entry in a dictionary. print(entry[keys[0]], entry[keys[1]]) #uses the keys list so it is more abstract i = 1 #sets I to 1 and then adds 1 later so it skips over the first two items in the keys list, which are already printed while (True): #while loop which will continue running until the function ends try: #try runs until the code within gives an error and then instead of stopping the code it switches to a different exception i += 1 #adds one to move to the next item in the keys list if keys[i] != &quot;Pets&quot;: #checks if we are on the pets item because it needs to be displayed differently, the dictionary entry is itself a list print(&quot; t&quot;, &quot;Favorite&quot;, keys[i] + &quot;:&quot;, entry[keys[i]]) #prints out the key which is the catagory and the entry in the dictionary which corresponds to that key. else: print(&quot; t&quot;, &quot;Pets:&quot;, &quot;, &quot;.join(entry[keys[i]])) #uses ,join which turns multiple entries in a list into a single string and joins them with the &quot;, &quot; in between print() except: #if it gives an error i.e. i reaches a value such that there are no more corresponding keys in the list the function will be stopped return None def for_loop_print(dictionary): #functoin which takes in a dictionary and runs the print_data function individually for each entry for record in dictionary: print_data(record) for_loop_print(RandomThings) . Toby Leeder Favorite Color: Red Favorite Food: Pizza Favorite Place: London Favorite Animal: Dog Favorite Song: Costa Rica - Kid Laori Pets: Aiden, Bailey Billy Bob Favorite Color: Red, White or Blue Favorite Food: Cheese Favorite Place: The US of A Favorite Animal: Bald Eagle Favorite Song: The United States of America National Anthem Pets: None Jeff Geoff Favorite Color: Jeff Favorite Food: Geoff Favorite Place: Jeff&#39;s house Favorite Animal: Geoffs Favorite Song: Jeff n Geoff, a love story Pets: None . while loop printing . here is a function I made to print with a while loop . def while_loop_print(dict): i = 0 while i &lt; len(dict): print_data(dict[i]) i += 1 return None while_loop_print(RandomThings) . Toby Leeder Favorite Color: Red Favorite Food: Pizza Favorite Place: London Favorite Animal: Dog Favorite Song: Costa Rica - Kid Laori Pets: Aiden, Bailey Billy Bob Favorite Color: Red, White or Blue Favorite Food: Cheese Favorite Place: The US of A Favorite Animal: Bald Eagle Favorite Song: The United States of America National Anthem Pets: None Jeff Geoff Favorite Color: Jeff Favorite Food: Geoff Favorite Place: Jeff&#39;s house Favorite Animal: Geoffs Favorite Song: Jeff n Geoff, a love story Pets: None . recursive loop printing . here is a function I made to print out a dictionary using a recursive loop. This function re-runs itself each time before returning at the end when i is not less than the length of the dictionary. . def recursive_loop_print(dict, i): #function parameters are the list you want to print and 0 if i &lt; len(dict): #continues reruning the function until i is not less than the length of the list print_data(dict[i]) recursive_loop_print(dict, i + 1) return recursive_loop_print(RandomThings, 0) . Toby Leeder Favorite Color: Red Favorite Food: Pizza Favorite Place: London Favorite Animal: Dog Favorite Song: Costa Rica - Kid Laori Pets: Aiden, Bailey Billy Bob Favorite Color: Red, White or Blue Favorite Food: Cheese Favorite Place: The US of A Favorite Animal: Bald Eagle Favorite Song: The United States of America National Anthem Pets: None Jeff Geoff Favorite Color: Jeff Favorite Food: Geoff Favorite Place: Jeff&#39;s house Favorite Animal: Geoffs Favorite Song: Jeff n Geoff, a love story Pets: None . input for new entries . here is a function which asks for a new input for the dictionary. First it sets all of the values in the list of a single entry to a placeholder string. Then it goes through and one by one changes these to a new value based on the input given. . questions = [ #list with all of the questions &quot;What is your first name?&quot;, &quot;What is your last name?&quot;, &quot;What is your favorite color?&quot;, &quot;What is your favorite food?&quot;, &quot;What is your favorite place?&quot;, &quot;What is your favorite animal?&quot;, &quot;What is your favorite song?&quot;, &quot;Do you own any pets?&quot; ] keys = [ #list with the keys &quot;FirstName&quot;, &quot;LastName&quot;, &quot;Color&quot;, &quot;Food&quot;, &quot;Place&quot;, &quot;Animal&quot;, &quot;Song&quot;, &quot;Pets&quot; ] def new_input(): #function to add a new input to the list RandomThings.append({ #adds a new entry in the RandomThings list. It uses placeholder entries which are later changed. keys[0]: &quot;placeholder&quot;, keys[1]: &quot;placeholder&quot;, keys[2]: &quot;placeholder&quot;, keys[3]: &quot;placeholder&quot;, keys[4]: &quot;placeholder&quot;, keys[5]: &quot;placeholder&quot;, keys[6]: &quot;placeholder&quot;, keys[7]: [&quot;placeholder&quot;] }) for x in questions: #for loop for changing the placeholder information if x != questions[len(questions)-1]: #the pets question is different, it&#39;s sorta like a list within a list so it needs to set it differently you cant just use an input. RandomThings[len(RandomThings) - 1][keys[questions.index(x)]] = str(get_input(x)) # &quot;len(RandomThings) - 1&quot; is used to select the correct entry in RandomThings. For &quot;keys[questions.index(x)&quot; the &quot;questions.index(x)&quot; part finds what position in the list called questions, &quot;x&quot; is since x is a string of one of the questions. Then the keys part takes that same entry in the keys list so they match. else: RandomThings[len(RandomThings) - 1][keys[questions.index(x)]] = check_pet() #this is exactly the same as the car question except it can&#39;t just get a basic input since it has to use a list as well for multiple cars. def get_input(question): #function for printing a question and then getting and input print(question) return input() def check_pet(): #function for checking the pets a person has resp = get_input(&quot;Do you have any pets? Y or N&quot;) if resp == &quot;Y&quot; or resp == &quot;y&quot; or resp == &quot;yes&quot; or resp == &quot;Yes&quot;: return pet_count() #function for counting the pets else: return [&quot;None&quot;] #basic return if someone has no pets def pet_count(): #function for counting pets pet = [get_input(&quot;What is the name of your first pet?&quot;)] more_pets = True while (more_pets): p_check = get_input(&quot;What is the name of your next pet? If you have no more pets, type N.&quot;) if p_check == &quot;N&quot; or p_check == &quot;n&quot; or p_check == &quot;no&quot; or p_check == &quot;No&quot;: return pet else: pet = pet + [p_check] #This was my original code before I wanted to abstract it more # second_pet = get_input(&quot;What is your second car? If you have no more type N.&quot;) # if second_pet == &quot;N&quot; or second_pet == &quot;n&quot;: #checks if they don&#39;t have a second car. # return [first_pet] #returns only the first car # else: # third_pet = get_input(&quot;What is your third car? If you have no more type N.&quot;) # if third_pet == &quot;N&quot; or third_pet == &quot;n&quot;: #checks if they only have two cars # return [first_pet, second_pet] #returns the second car # else: # print(&quot;You have too many cars already I&#39;m not asking if you have anymore&quot;) # return [first_pet, second_pet, third_pet] #I just didn&#39;t want to make it go on infinitely, though I could have if I used a list new_input() #for_loop_print(RandomThings) . What is your first name? What is your last name? What is your favorite color? What is your favorite food? What is your favorite place? What is your favorite animal? What is your favorite song? Do you have any pets? Y or N . More Python Learns . Code Syntax Notes . List | key = [value, value, ...] | Lists in python are sorta like arrays in Java. They are different because a list can have multiple different data types within it. Lists can also have multiple dictionary entries in which each dictionary has multiple key and value pairs within it. Entries can be added into a list using the .append() method or just use + and adding it. | . Dictionary | dictionary_key = {key: value, key: value ...} | Dictionaries are similar to lists, but instead of just holding values with one single key, each individual value is paired with its own key. That means you can call each value using its unique key. This is useful for a lot of things. You can also create a list of dictionaries, in which a list has multiple dictionary entries. Each dictionary can have multiple key and value pairs and is only considered one entry in the list. | . Try, except | try: code except error: code except: code | This is an interesting code that I already knew about from previous experience, but I found it could be useful here. Essentially the try portion is what runs initially and it will keep running the code within it until it runs and returns an error. Then the except code runs after. You can change what the except code is depending on the error or you can leave it generic so it runs for any error. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/newcode/week_2/2022/08/29/python_lists.html",
            "relUrl": "/newcode/week_2/2022/08/29/python_lists.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Alumni Panel",
            "content": "Alumni Panel Thoughts . I’m really glad I was able to attend this event. It was really interesting and I learned a lot of new things. I didn’t realize just how much programming is used in the STEM world and it was really interesting for me to learn that. Also, I learned that the best time to apply for internships is in September and December. Overall I’m really glad I went and I feel good about my choice in taking APCSP. . Alumni Panel Notes . Question Colein Anthony Andrew Maybel Allison Nitiya . How did you realize what you wanted to do and how did csp help? | “Hmm I can code well but I can 3d model better” Compsci is a lot about perspective, look at people who are not classmates and see how you compare | Loves problem solving and cs Liked curriculum | Realized he liked complexity, and theory about cs, liked java backends development and all that stuff Thought he was pretty decent at that | Didn’t like class, knew it was important to learn Did cs even though not a cs major It’s useful in life and you’ll need to know it at some point Didn’t like aerospace so switched to cog sci | Didn’t really like cs but still doing it Liked some design aspects of it and is doing cog sci | Always interested in computer science from young age Middle school and high school taking more seriously How could she apply her skills Realized what she’s creating could be used in the real world | . Biggest challenge you’ve encountered in comp sci | Starting sucks Error messages are annoying and you don’t know how to fix it There is something on the internet to help you | Clashing Egos, working together is hard and cs majors aren’t nice are very showy, can be frustrating Can feel bad about yourself You have to focus on yourself and your own path Don’t worry about other people | Theory is difficult, idea behind it Weird, complicated is confusing, hard transition from high school to college | Motivation to do CS, always someone better than you Internship makes you do CS, still need to do CS A specific project or purpose is helpful Frustrated with syntax Don’t expect you to know all the syntax, just google it or ask for help | Starting, temptation to bs stuff Making sure you don’t cut corners, actually do the work to learn Mindset to go above and beyond solves problems in the long run | Not always gonna have a rigid structure and how to do things Willing to kinda just start even if you don’t have a plan | . Are there any PBL (project-based learning) scenarios in College? | - Not that many, working on a project isn’t super common but it does still happen so you need to know how to do it |   | CS courses do have projects but there are also a lot of tests There is still PBL | Teacher doesn’t have time to answer everyone’s attention and answer every question Study groups help There are some project classes where they do work on a lot of projects but thats where managing groups is difficult Figure out what works best for you Especially internships they don’t really expect you to know what to do |   |   | . Have you applied cs in your major if you are not majoring in CS? | A lot of menial tasks that you can speed up by writing a script to help speed up things Coding is everywhere you need so you can know what you’re doing Advanced calculations are easier with coding as well |   | High level math computer science can help Math libraries can be helpful to use | Program stuff in CAD like analysis and cad You can code 3d printing stuff without a 3d model Making things faster so you don’t have to do it all manually Internships sometimes just make you do software Problem solving logic used everywhere | Cog sci does use computer science More front end Requirements are stats and psych courses, can use comp sci in stats Psych has cs as well, mat lab and other stuff |   | . For existing college students have you had a job at your school | Make a resume You put resumes into job sights Push yourself to be above and beyond Make your professors like you | Code ninjas, it’s a franchise | Tutor at the school LG internship, woked with APIs and web development, used javascript html and python | Interact with professors and ask them if there is any space in their lab Interact with the TAs and stuff |   |   | . Any personal projects? |   |   | Companies look for that especially without work experience If you can find the time it looks good 2-3 personal projects are really useful, they can look at what you’re doing |   |   |   | . Computer science in mechanical engineering | Mirrored components say mirrored at the end each time Made a script that isolated the mirrored and took out the text and removed it Sometimes you have to actually go into the code for Computer Aided Machinery Simulations for materials, sometimes done by hand |   |   |   |   |   | . Tips to get a job: . Have a resume | Know when to apply | A lot of companies start hiring in September and November the year before | Have proof of work that you’ve done | It doesn’t really matter what school you go to | Personal projects, project teams and clubs are important | Smaller local companies generally take high school interns | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_2/2022/08/29/alumniPanel.html",
            "relUrl": "/week_2/2022/08/29/alumniPanel.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Lanzi Calendar",
            "content": "Week Monday Tuesday Wednesday Thursday Friday . 0 | August 15 | 16 | First Day of School 17 | 18 | 19 | . | | | Welcome to AP Calculus BC! . Unit 1 HW 1: . Read Finding the Glory in the Struggle and Post Reflection to Canvas Discussion Board (Discussion Closes 11:59 pm 8/21/2022) . *Classes about 51 minutes . | Begin Unit 1: Functions and Limits . 1.1: Domain . 2.2: An Intro to the Limit of a Function . Notes Template . Class Notes . Unit 1 HW 2: . p. 12 1.1: #9, 17, 23-29 . p. 102 2.2: #5, 10, 12, 23 . Worked Out Solutions . | 1.1: Absolute Value . 2.3: Calculating Limits Using the Limit Laws . Notes Template . Class Notes . Unit 1 HW 3: . p. 14 1.1: # 41, 64, 67 . p. 114 2.3: # 7-9, 11, 19, 25, 34, 36, 41 . Worked Out Solutions . | . 1 | 22 | 23 | 24 | 25 | 26 | . | 2.3: Squeeze Theorem . 3.5: Limits of Trigonometric Functions . Notes Template . Class Notes . Unit 1 HW 4: . p. 115 2.3: # 48, 50, 52 . p. 224 3.5: #29-37 . Worked Out Solutions . | 2.4: Limits at Infinity and Horizontal Asymptotes . Notes Template . Class Notes . Unit 1 HW 5: . p. 128 2.4: #13, 18, 23, 28, 38, 42, 54, 58, 80 . Worked Out Solutions . | 2.5: Continuity . Notes Template . Class Notes . Unit 1 HW 6: . p. 143 2.5: # 32-34, 37, 46, 47, 50, 57 . Worked Out Solutions . AND Squeeze Theorem Fun Worksheet 😊 . Solutions . Print Unit 1 Closure Activity and Bring to Class . | Check for Understanding: . Limits and Intermediate Value Theorem . Peer Review . Unit 1 Closure Activity . Unit 1 HW 7: . Complete Unit 1 Closure Core Problems: . 1.1, 1.3(d-h,j,l,m,o), 2.1, 3.1, 4.2, 4.3, 4.4, 4.5, 5.2 b . Worked Out Solutions . | Begin Unit 2: The Derivative . 3.1 &amp; 3.2: The Derivative . Notes Template . Class Notes . Unit 2 HW 1: . p. 173 3.1: # 4, 14, 15, 28, 59, 61, 75 . p. 188 3.2: # 11, 24, 35, 42, 56, 67 . Worked Out Solutions . | . 2 | 29 | 30 | 31 | September 1 | 2 | . | 3.3 &amp; 3.4: Rules of Differentiation . Class Work: . p. 203 3.3: #84, 92, 101, 106 . p. 213 3.4: #66, 68, 75 . Worked Out Solutions . Unit 2 HW 2: . Finish Class Work . p. 203 3.3: # 44, 49, 81 . p. 213 3.4: #34, 44, 55, 56, 63 . Worked Out Solutions . | 3.5: Derivatives of Trigonometric Functions . Notes Template . Class Notes . Unit 2 HW 3: . p. 223 3.5: # 5, 6, 11, 13, 15, 39, 41, 47, 59, 67 . Worked Out Solutions . | 3.6: The Chain Rule . Chain Rule Fun Worksheet 😊 . Unit 2 HW 4: . Finish Chain Rule Fun Worksheet 😊 . Worked Out Solutions . | Test 1 . Functions, Limits, Continuity, and Rates of Change . | 3.7: Implicit Differentiation and Derivatives of Inverse Functions . Notes Template . Class Notes 1/Class Notes 2 . Unit 2 HW 5: . p. 248 3.7: #22, 36, 55, 69, 102, 104, 108, 112, 113 AND . Inverse Functions Fun Worksheet 😊 #7, 10, 13 . Worked Out Solutions (Text) . Worked Out Solutions (Worksheet) . | . 3 | Labor Day September 5 | 6 | 7 | 8 | 9 | . | Holiday - No School 😊 | 3.7: Inverse Trigonometric Functions and Their Derivatives . Notes Template . Class Notes . Unit 2 HW 6: . p. 248 3.7: #41-48, 68, 70-72 . Worked Out Solutions . | 3.8: Derivatives of Logarithmic and Exponential Functions; Logarithmic Differentiation . Notes Template . Class Notes . Unit 2 HW 7: . p. 259 3.8: #18, 28, 31, 33, 41, 44, 47, 52, 68, 72, 76 . Worked Out Solutions . Print Unit 2 Closure Activity and Bring to Class . | Check for Understanding: Derivatives . Differentiability, Inverse Functions &amp; Derivatives (Table/Graph), &amp; Logarithmic Differentiation . Unit 2 Closure Activity . Unit 2 HW 8: . Unit 2 Closure Learning Targets 1.1, 1.3, 2.1, 3.1, 3.2, 4.1, 5.1 . | Peer Review . Unit 2 Closure Activity . Unit 2 HW 9: . Complete Unit 2 Closure . Learning Targets 4.2 (a-h, l), 7.1, 8.1, 8.2 . Worked Out Solutions - Don’t Peek Too Soon!!! . | . Week Monday Tuesday Wednesday Thursday Friday . 4 | 12 | Back to School Night 13 | 14 | 15 | 16 | . | Begin Unit 3 . 3.9: Applications of the Derivative . Rectilinear Motion Screencast . Notes Template . Class Notes . Unit 3 HW 1: . p. 270 3.9: #1, 5, 8, 22 . Worked Out Solutions . Watch Related Rates Screencast and Use Notes Template to Take Notes . | 3.10: Related Rates . Related Rates Fun Worksheet☺ . Unit 3 HW 2: . Related Rates Fun Wksht 😊 . Worked Out Solutions . | 3.11: Local Linearity . Notes Powerpoint . Unit 3 HW 3: . p. 285 3.11 #6, 12, 17, 19-22 . Worked Out Solutions . | Test 2 . Functions, Limits, and Differentiation . | 4.1: Maximum and Minimum Values (Relative) . Notes Template . Class Notes . Unit 3 HW 4: . p. 303 4.1 #35, 40, 49, 72, . 79(skip part d), 91 . Worked Out Solutions . Watch Extreme Value Theorem and Absolute Extrema Screencast and Use Notes Template to Take Notes . | . 5 | Professional Development 19 | 20 | 21 | 22 | 23 | . | No School for Students | 4.1: Maximum and Minimum Values (Absolute) . Class Work: . p. 303 4.1 #10, 12, 16, 18, 44, 48, 50, 62, 65, 66, 68, 70, 71, 80, 81, 88 . Unit 3 HW 5: . Finish Classwork . Worked Out Solutions . | 4.2: Mean Value Theorem . Notes Template . Class Notes . Unit 3 HW 6: . p. 313 4.2 #1, 5, 11, 13, 15, 19, 29, 30, 35, 46 . Worked Out Solutions . | 4.3: How Derivatives Affect the Shape of a Graph . 4.5: Summary of Curve Sketching . Notes Template . Class Notes . Unit 3 HW 7: . Function Analysis &amp; Curve Sketching Fun Worksheet 😊 . #1, 2 (c only), 4, 5, 6, 8, 10 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . Applications of the Derivative . | Function Analysis . | . Peer Review . Unit 3 HW 8: . Watch Optimization Screencast &amp; Use Notes Template to Take Notes . p. 374 4.6 #1, 5 (find MAXIMUM), 9, 13, 18 . Worked Out Solutions . | . 6 | 26 | 27 | 28 | 29 | End of 1st 6-Weeks 30 | . | 4.6: Optimization Problems . Class Work: . p. 374 4.6 #7, 14, 15, 20, 22, 25, 27, 34, 42, 46, 49 . *Core Problems highlighted in yellow . Unit 3 HW 9: . Finish Classwork . Print Unit 3 Closure Activity and Bring to Class . Worked Out Solutions . | Unit 3 Closure Activity . Unit 3 HW 10A: . Unit 3 Closure Activity . Learning Targets 1.1, 2.1, 3.1, 3.2, 3.3, 4.1 . Solutions Part I . | Unit 3 Closure Activity . Unit 3 HW 10B: . Unit 3 Closure Activity . Learning Targets: 4.2, 4.3, 5.1, 6.1, 6.2 . Solutions Part II . Optional: Extra Practice Fun Worksheet #1a, 2-4, 6 . Worked Out Solutions . | Check for Understanding: Application of the Derivative . MVT . | Related Rates . | Optimization . | . Peer Review . Begin Unit 4: Integration . 5.1: Antiderivatives . Notes Powerpoint . Unit 4 HW 1: . p. 392 5.1 #19, 21, 22, 26, 28, 41, 46, 56, 58, 63, 74 . Worked Out Solutions . | 5.2: Riemann Sums . Notes Template . Class Notes . Unit 4 HW 2: . p. 410 5.2 #9, 15, 16, 21-23, 32, 33 . Worked Out Solutions . | . 7 | October 3 | Grades Due/Tri 1 Conferences 4 | 5 | Parent Conferences 6 | Homecoming Parade 7 | . | 5.2: Area as a Limit . Notes Template . Class Notes . Unit 4 HW 3: . p. 410 5.2 #34, 36, 38-40, 42, 43, 44 . Worked Out Solutions . | 5.3: The Definite Integral . Notes Template . Class Notes . Unit 4 HW 4: . p. 428 5.3 #27, 29, 32, 41, 43, 47, 53, 60, 67 . Worked Out Solutions . *Classes about 46 minutes . | Test 3 FR . Functions, Limits, Differentiation, Applications of Differentiation . HW: . No Homework ☺ . | Test 3 MC . Functions, Limits, Differentiation, Applications of Differentiation . *Classes about 46 minutes . | 5.4: The Fundamental Theorem of Calculus . Notes Template . Class Notes . Unit 4 HW 6: . p. 441 5.4 #7, 11, 17, 23, 27, 33, 36, 43, 49, 50, 55, 68, 79 . Worked Out Solutions . *Classes about 67 minutes . | . Week Monday Tuesday Wednesday Thursday Friday . 8 | 10 | 11 | 12 | 13 | 14 | . | 5.4: The Fundamental Theorem of Calculus . Unit 4 HW 7: . Fundamental Theorem of Calculus Fun Worksheet 😊 . Worked Out Solutions . | 5.5: Indefinite Integrals . Notes PowerPoint . Unit 4 HW 8: . p. 454 5.5 #16, 20, 22, 36, 42, 45, 58, 60, 62, 66, 68, 70, 75, 77, 82 . Worked Out Solutions . | 5.6: Method of Substitution . Notes Template . Class Notes . Unit 4 HW 9: . p. 467 5.6 #22, 26, 28, 31, 33, 42, 52, 54, 67, 72, 73, 77, 84 . Worked Out Solutions . | Check for Understanding: Integration . Limit Definition of Definite Integral . | Fundamental Theorem of Calculus . | . Extra Practice . Functions Defined as Definite Integrals Worksheet . Unit 4 HW 10: . Finish Classwork . Worked Out Solutions (Ignore #1) . | Peer Review . Extra Practice . Riemann Sum to Definite Integral . Integration . Unit 4 HW 11: . Riemann Sum to Definite Integral Fun Wksht (All) AND Integration Fun Wksht 😊 #7, 11, 13, 14, 15, 16, 20 AND Print Unit 4 Closure Activity and Bring to Class . Worked Out Solutions 1 . Worked Out Solutions 2 . | . 9 | 17 | 18 | 19 | 20 | 21 | . | Unit 4 Closure Activity . Unit 4 HW 12: . Complete Unit 4 Closure Activity . Core Problems: . 1.2, 1.4, 2.1, 3.1 (a&amp;c), 4.1, 4.2(c), 5.1, 5.3(b), 5.4, 6.1, 6.2, 6.6,7.1, 7.2(c), 7.3(c), 8.1, 8.2 . Worked Out Solutions . | Begin Unit 5: Applications of Integration . 6.1: Area Between Curves . Notes Template . Class Notes . Unit 5 HW 1: . p. 486 6.1 #6, 8, 15, 32, 47, 58, 60, 66, 67, 72 . Worked Out Solutions . | 6.2: Average Value of a Function . Notes PowerPoint . Unit 5 HW 2: . p. 494 6.2 #9, 10, 14, 15, 18, 20, 21, 23, 24, 26, 32 . Worked Out Solutions . | Test 4 . Integration . HW: . See 10/19/2022 . | 6.3: The Definite Integral as an Accumulation Function . Notes PowerPoint . Unit 5 HW 3: . p. 505 6.3 #8, 12, 13, 14, 15, 20, 21, 26, 27 . Worked Out Solutions . | . 10 | 24 | 25 | 26 | 27 | 28 | . | 6.4: Rectilinear Motion Revisited . Notes Template . Class Notes . Unit 5 HW 4: . p. 515 6.4 #15, 17, 24, 26, 28, 34 . Worked Out Solutions . | 6.5: Volume (Known Cross Sections) . Notes Template . Class Notes . Unit 5 HW 5: . Volume of Solids with Known Cross Sections Fun Worksheet 😊 . Worked Out Solutions . | 6.5: Volume (Disks and Washers) . Notes Template . Class Notes . PowerPoint . Reference Questions . Unit 5 HW 6: . p. 528 6.5 #22, 25, 31, 32, 39, 40, 52, 58, 62 . Solutions . | 6.5: Volume (Cylindrical Shells) . Notes Template . Class Notes . Unit 5 HW 7: . p. A28 Appendix D #7, 10, 13, 16, 19, 22, 28, 31, 48 . Worked Out Solutions . | 6.6: Arc Length . Notes Template . Class Notes . Unit 5 HW 8: . Area, Volume, and Arc Length Fun Worksheet 😊 . Worked Out Solutions . Print Unit 5 Closure Activity and Bring to Class . | . 11 | Professional Development 31 | November 1 | 2 | 3 | 4 | . | No School for Students | Unit 5 Closure Activity . Unit 5 HW 9: . Complete Unit 5 Closure Activity . Worked Out Solutions . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . Worked Out Solutions . | Final Part 1: FR . Application of the Definite Integral . HW: . Trimester I Review Fun Worksheet ☺ . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | . 12 | 7 | 8 | 9 | 10 | Veteran’s Day 11 | . | Trimester I Review . HW: . Trimester I Review Fun Worksheet ☺ . | AM: Trimester I Review . PM: Trimester I Final Exam . Multiple Choice . Period 5 . HW: . Study and prepare for Final Exam . | Trimester I Final Exam . Multiple Choice . Periods 1 &amp; 2 . | Trimester I Final Exam . Multiple Choice . Periods 3 &amp; 4 . Notes Template for Monday, Nov. 14 . | Holiday – No School 😊 | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2022/08/29/Lanzi-Calendar.html",
            "relUrl": "/2022/08/29/Lanzi-Calendar.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Checks w/Bash",
            "content": "Python Checks . python --version #uses python tool and runs the command --version which checks the most updated version of python python2 --version #uses python2 tool and runs the same command to check the python2 version . Python 3.9.12 Python 2.7.18 . . Conda Checks . conda list #uses the conda tool and checks the conda packages installed (packages are just a collection of files, sorta like a folder) . # packages in environment at /Users/tobyleeder/opt/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39hecd8cb5_1 aiohttp 3.8.1 py39hca72f7f_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39hecd8cb5_0 anaconda-navigator 2.1.4 py39hecd8cb5_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39hecd8cb5_0 appdirs 1.4.4 pyhd3eb1b0_0 applaunchservices 0.2.1 pyhd3eb1b0_0 appnope 0.1.2 py39hecd8cb5_1001 appscript 1.1.2 py39h9ed2024_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39hca72f7f_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39hecd8cb5_0 astropy 5.0.4 py39h67323c0_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39h9ed2024_0 beautifulsoup4 4.11.1 py39hecd8cb5_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39hca72f7f_0 bkcharts 0.2 py39hecd8cb5_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h2842e9f_0 bokeh 2.4.2 py39hecd8cb5_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39h67323c0_0 brotli 1.0.9 hb1e8313_2 brotlipy 0.7.0 py39h9ed2024_1003 brunsli 0.1 h23ab428_0 bzip2 1.0.8 h1de35cc_0 c-ares 1.18.1 hca72f7f_0 ca-certificates 2022.3.29 hecd8cb5_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39hecd8cb5_2 cffi 1.15.0 py39hc55c11b_1 cfitsio 3.470 hee0f690_6 chardet 4.0.0 py39hecd8cb5_1003 charls 2.2.0 h23ab428_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39hecd8cb5_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39hecd8cb5_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39hecd8cb5_0 conda-build 3.21.8 py39hecd8cb5_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39hca72f7f_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39h2fd3fbb_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 hca72f7f_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39he9d5cce_0 cytoolz 0.11.0 py39h9ed2024_0 daal4py 2021.5.0 py39h24a4e90_0 dal 2021.5.0 hecd8cb5_782 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39hecd8cb5_1 debugpy 1.5.1 py39he9d5cce_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39hecd8cb5_1 entrypoints 0.4 py39hecd8cb5_0 et_xmlfile 1.1.0 py39hecd8cb5_0 executing 0.8.3 pyhd3eb1b0_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 hd8bbffd_0 frozenlist 1.2.0 py39hca72f7f_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39hecd8cb5_1 gensim 4.1.2 py39he9d5cce_0 giflib 5.2.1 haf1e3a3_0 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h23ab428_2 gmpy2 2.1.2 py39hd5de756_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h9ed2024_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39hecd8cb5_0 greenlet 1.1.1 py39h23ab428_0 grpcio 1.42.0 py39ha29bfda_0 h5py 3.6.0 py39h4a1dd59_0 hdf5 1.10.6 hdbbcd12_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 h0a44026_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39ha952a84_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39hecd8cb5_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39hecd8cb5_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 hecd8cb5_3538 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39hecd8cb5_0 ipython 8.2.0 py39hecd8cb5_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39hecd8cb5_1 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e hca72f7f_0 jq 1.6 h9ed2024_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39hecd8cb5_0 jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 haf1e3a3_2 keyring 23.4.0 py39hecd8cb5_0 kiwisolver 1.3.2 py39he9d5cce_0 krb5 1.19.2 hcd88c3b_0 lazy-object-proxy 1.6.0 py39h9ed2024_0 lcms2 2.12 hf1fd2bf_0 lerc 3.0 he9d5cce_0 libaec 1.0.4 hb1e8313_1 libarchive 3.4.2 haa3ed63_0 libcrc32c 1.1.1 hb1e8313_2 libcurl 7.82.0 h6dfd666_0 libcxx 12.0.0 h2f01273_0 libdeflate 1.8 h9ed2024_5 libedit 3.1.20210910 hca72f7f_0 libev 4.33 h9ed2024_1 libffi 3.3 hb1e8313_2 libgfortran 3.0.1 h93005f0_2 libiconv 1.16 hca72f7f_2 libidn2 2.3.2 h9ed2024_0 liblief 0.11.5 he9d5cce_1 libllvm11 11.1.0 h46f1229_1 libnghttp2 1.46.0 ha29bfda_0 libpng 1.6.37 ha441bb4_0 libprotobuf 3.19.1 h8346a28_0 libsodium 1.0.18 h1de35cc_0 libspatialindex 1.9.3 h23ab428_0 libssh2 1.10.0 h0a4fc7d_0 libtiff 4.2.0 h87d7836_0 libunistring 0.9.10 h9ed2024_0 libwebp 1.2.2 h56c3ce4_0 libwebp-base 1.2.2 hca72f7f_0 libxml2 2.9.12 hcdb78fc_0 libxslt 1.1.34 h83b36ba_0 libzopfli 1.0.3 hb1e8313_0 llvm-openmp 12.0.0 h0dcd299_1 llvmlite 0.38.0 py39h8346a28_0 locket 0.2.1 py39hecd8cb5_2 lxml 4.8.0 py39h65b224f_0 lz4-c 1.9.3 h23ab428_1 lzo 2.10 haf1e3a3_2 markdown 3.3.4 py39hecd8cb5_0 markupsafe 2.0.1 py39h9ed2024_0 matplotlib 3.5.1 py39hecd8cb5_1 matplotlib-base 3.5.1 py39hfb0c5b7_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39hecd8cb5_1 mistune 0.8.4 py39h9ed2024_1000 mkl 2021.4.0 hecd8cb5_637 mkl-service 2.4.0 py39h9ed2024_0 mkl_fft 1.3.1 py39h4ab4a9b_0 mkl_random 1.2.2 py39hb2f4e1b_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h6ef4df4_1 mpfr 4.0.2 h9066e36_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39hecd8cb5_0 msgpack-python 1.0.2 py39hf7b0b51_1 multidict 5.2.0 py39hca72f7f_2 multipledispatch 0.6.0 py39hecd8cb5_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39hecd8cb5_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39hecd8cb5_0 nbconvert 6.4.4 py39hecd8cb5_0 nbformat 5.3.0 py39hecd8cb5_0 ncurses 6.3 hca72f7f_2 nest-asyncio 1.5.5 py39hecd8cb5_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 10.13.0 h0a44026_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39hecd8cb5_0 numba 0.55.1 py39hae1ba45_0 numexpr 2.8.1 py39h2e5f0a9_0 numpy 1.21.5 py39h2e5f0a9_1 numpy-base 1.21.5 py39h3b1a694_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h9ed2024_0 openjpeg 2.4.0 h66ea3da_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n hca72f7f_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39he9d5cce_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39hecd8cb5_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39hecd8cb5_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 pathspec 0.7.0 py_0 patsy 0.5.2 py39hecd8cb5_1 pep8 1.7.1 py39hecd8cb5_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39hde71d04_0 pip 21.2.4 py39hecd8cb5_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39hecd8cb5_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39he9d5cce_0 psutil 5.8.0 py39h9ed2024_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39he9d5cce_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h9ed2024_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39hecd8cb5_0 pycurl 7.44.1 py39hbcfaee0_1 pydispatcher 2.0.5 py39hecd8cb5_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h9ed2024_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39hecd8cb5_0 pylint 2.9.6 py39hecd8cb5_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39he9d5cce_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h23ab428_6 pyrsistent 0.18.0 py39hca72f7f_0 pysocks 1.7.1 py39hecd8cb5_0 pytables 3.6.1 py39h648f197_1 pytest 7.1.1 py39hecd8cb5_0 python 3.9.12 hdfd78df_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h23ab428_3 python.app 3 py39hca72f7f_0 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39hca72f7f_0 pyyaml 6.0 py39hca72f7f_1 pyzmq 22.3.0 py39he9d5cce_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h468cd18_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39hecd8cb5_0 readline 8.1.2 hca72f7f_1 regex 2022.3.15 py39hca72f7f_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39hecd8cb5_1 ruamel_yaml 0.15.100 py39h9ed2024_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39hae1ba45_0 scikit-learn 1.0.2 py39hae1ba45_1 scikit-learn-intelex 2021.5.0 py39hecd8cb5_0 scipy 1.7.3 py39h8c7af03_0 scrapy 2.6.1 py39hecd8cb5_0 seaborn 0.11.2 pyhd3eb1b0_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39hecd8cb5_0 sip 4.19.13 py39h23ab428_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 he9d5cce_0 sniffio 1.2.0 py39hecd8cb5_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39hecd8cb5_1 spyder-kernels 2.1.3 py39hecd8cb5_0 sqlalchemy 1.4.32 py39hca72f7f_0 sqlite 3.38.2 h707629a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39hca72f7f_0 sympy 1.10.1 py39hecd8cb5_0 tabulate 0.8.9 py39hecd8cb5_0 tbb 2021.5.0 haf03e11_0 tbb4py 2021.5.0 py39haf03e11_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39hecd8cb5_0 terminado 0.13.1 py39hecd8cb5_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h7bc2e8c_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h9ed2024_0 tqdm 4.64.0 py39hecd8cb5_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39hca72f7f_0 typed-ast 1.4.3 py39h9ed2024_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39he9d5cce_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 haf1e3a3_0 urllib3 1.26.9 py39hecd8cb5_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h999c104_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39hecd8cb5_1 websocket-client 0.58.0 py39hecd8cb5_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h6dfd666_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39hecd8cb5_0 wrapt 1.12.1 py39h9ed2024_1 wurlitzer 3.0.2 py39hecd8cb5_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xlwings 0.24.9 py39hecd8cb5_0 xz 5.2.5 h1de35cc_0 yaml 0.2.5 haf1e3a3_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h9ed2024_0 zeromq 4.3.4 h23ab428_0 zfp 0.5.5 he9d5cce_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h4dc903c_2 zope 1.0 py39hecd8cb5_1 zope.interface 5.4.0 py39h9ed2024_0 zstd 1.4.9 h322a384_0 . . echo Conda Check # &quot;echo&quot; is the bash &quot;print&quot; command. # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # test length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39hecd8cb5_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39hecd8cb5_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . . Jupyter Checks . jupyter --version #uses jupyter tool and runs the --version command to find the version jupyter kernelspec list #uses the kernelspec list command to list the kernels that jupyter has available . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: bash /Users/tobyleeder/Library/Jupyter/kernels/bash javascript /Users/tobyleeder/Library/Jupyter/kernels/javascript python3 /Users/tobyleeder/opt/anaconda3/share/jupyter/kernels/python3 . . # test for a kernel installation test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length, $# is used to find the ammount of arguments passed through if [[ ${n} &gt; 0 ]]; # test length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /Users/tobyleeder/opt/anaconda3/share/jupyter/kernels/python3 . . echo {1000..0}ash Learns . I&#39;ve had basically no experience with Bash before this so it was interesting to learn some of the new functionality now as well. Here is some of what I learned. . Code Syntax Notes . Variables | key=value | Most variables work the same and it looks like bash works a similar way as well. You don&#39;t put a space in between the key and the value. If you do it looks like bash reads the key as a command and so the variable doesn&#39;t work. Also, to call a variable it looks like you need a $ sign in front, otherwise it just reads it as a string. | . Echo | echo &quot;what you want to print&quot; | Echo is the bash version of print and pretty much works the same, though you can do some cool stuff with periods with it. | . If then | if [[ condition ]] then code else code fi | This again is pretty similar to java or python though there are some differences. For example the condition needs [[]] which is different. Also, you need a then statement to run the code and at the end you need fi to finish the if statement. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/newcode/week_1/2022/08/28/Checks.html",
            "relUrl": "/newcode/week_1/2022/08/28/Checks.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "QnA w/Python",
            "content": "This Is a QnA . I made it with python. It&#39;s pretty efficient I think. My goal was to get rid of as much repeating code as possible and I think I did that. There is still some repitition, but at this point it wouldn&#39;t make much sense to get rid of it. . import getpass, sys #initialize variables qnumber = 0 #number of questions correct = 0 #number of correct answers #list of questions which each correspond with an answer questions = [&quot;What command is used to include other functions that were previously developed?&quot;, &quot;What command is used to evaluate correct or incorrect response in this example?&quot;, &quot;Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition?&quot;, &quot;What language are you using?&quot;, &quot;What language am I using?&quot;, &quot;What is the square root of 169?&quot;, &quot;What is the command to output a line of text?&quot; ] #list of answers which each correspond with a question answers = [&quot;import&quot;, &quot;if&quot;, &quot;expression&quot;, &quot;english&quot;, &quot;python&quot;, &quot;13&quot;, &quot;print&quot; ] def question_with_response(prompt): #question and answer function print(&quot;Question: &quot; + prompt) msg = input() #asks for an input as the answer return msg #returns the input def rsp (msg, correctAnswer): #function to check if the answer is correct, has both the input and the correct answer as the parameters if msg == correctAnswer: #checks if your answer is correct print(msg + &quot; is correct&quot;) return 1 #returns 1 if correct else: print(msg + &quot; is incorrect! The correct answer is &quot; + correctAnswer) return 0 #returns 0 if false def whatGrade(percent): #determines what letter grade you get based on your percent and returns the letter as a string (includes a/an because it&#39;s dependent on the letter) if 90 &lt;= percent and percent &lt;= 100: return &quot;an A&quot; if 80 &lt;= percent and percent &lt;= 90: return &quot;a B&quot; if 70 &lt;= percent and percent &lt;= 80: return &quot;a C&quot; if 60 &lt;= percent and percent &lt;= 70: return &quot;a D&quot; if percent &lt;= 60: return &quot;an F&quot; #start of the test print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;Are you ready to take a test?&quot;) #code that runs a for loop for each question for x in questions: correct += rsp(question_with_response(x), answers[qnumber]) #asks the questions which corresponds with the correct answer. If you get it correct it adds 1 and if you get it wrong it adds 0 qnumber += 1 #increases the question number. After the request for the response so the &quot;answers&quot; list starts at 0 #rounds the correct number to a percent cnumber = round(correct/qnumber*100, 2) #prints your final score and letter grade print(getpass.getuser() + &quot; you scored &quot; + str(cnumber) + &quot;%, you got &quot; + whatGrade(cnumber) + &quot;.&quot;) #finds the username of the current user, rounds their score to the nearest tenth and gives you a letter grade . . Hello, tobyleeder running /usr/local/bin/python3 Are you ready to take a test? Question: What command is used to include other functions that were previously developed? import is correct Question: What command is used to evaluate correct or incorrect response in this example? if is correct Question: Each &#39;if&#39; command contains an &#39;_________&#39; to determine a true or false condition? expression is correct Question: What language are you using? English is incorrect! The correct answer is english Question: What language am I using? java is incorrect! The correct answer is python Question: What is the square root of 169? 12 is incorrect! The correct answer is 13 Question: What is the command to output a line of text? pringle is incorrect! The correct answer is print tobyleeder you scored 42.86%, you got an F. . Python Learns . I&#39;ve had very little experience with Python before I used it so here&#39;s some of the new functionality I learned and the syntax for it. . Code Syntax Notes . Variables | key = value | Unlike Java, it looks like Python doesn&#39;t really use variable assignments like java. Instead variables can just be assigned &quot;any&quot; and then can be assigned numbers, letters, strings or pretty much watever other value you want including lists. | . Functions | def function_name(parameter1, parameter2, parameterX): code return value | Functions are pretty similar to other languages for the most part. It is a little different than java in that you don&#39;t really use keywords before to define it like int, string or void for the return type or static, private and public. They still function (get it?) pretty much the same though. | . For loops | for newVar in definedVar: code | For loops are probably the most different from Java. This is because they go through a list of a variable instead of creating a new integer and going until that integer reaches a value. That interger is suprisingly useful, so to me it seems like this change removes some of the functionality of a for loop. Despite this though I still found ways around it and was able to accomplish my goals. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/newcode/week_1/2022/08/24/pythonQnA.html",
            "relUrl": "/newcode/week_1/2022/08/24/pythonQnA.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Second thing",
            "content": "What did I do? . I disabled comments. Why did I do it? I did it because I wanted to. You shouldn&#39;t be able to comment on this. If you can it means I did something wrong which would be bad, but I don&#39;t think I did. I think I did it right. Go try it right now actually I&#39;ll wait... . Gullable . Thats a good word. It describes you. Did you just go check if you can comment on this page? I told you you couldn&#39;t. Did you still look? Did you scroll all the way to the bottom only to realize you couldn&#39;t actually comment and I was telling the truth? Did you realize that I didn&#39;t make a mistake and my new page works perfectly (and it works first time)? If you did shame on you. If you didn&#39;t I don&#39;t really care it&#39;s not like it really matters to me what you do. If I had ads on this website it would be one thing, but I don&#39;t. I don&#39;t even know if I can have ads. Can I? Who knows. Maybe I&#39;ll try it. I could make some money every time my assignments get graded. That could be a good idea. Though the money would probably be percents of a cent. It&#39;s still money. It&#39;s called passive income. Always the right choice. . ... . Anyway. . That&#39;s the end. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_0/2022/08/20/Second.html",
            "relUrl": "/week_0/2022/08/20/Second.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "First Thing",
            "content": "What even is this? . This is a thing. Duh. To be honest I don&#39;t really know what it is I&#39;m just trying something. We&#39;ll see how it goes I guess. . msg = &quot;Hello world&quot; print(msg) . . Hello world .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_0/2022/08/20/First.html",
            "relUrl": "/week_0/2022/08/20/First.html",
            "date": " • Aug 20, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Is this gonna work?",
            "content": "My first markdown thingy . It’s not actually called a markdown thingy . It’s really just a markdown post. It’s actually less letters than a markdown thingy so there is no reason to write markdown thingy. Maybe if I forgot the name I would write markdown thingy, but clearly I remember it is called a markdown post. Well that is all. . . . . . I just put a lot of dividers there . because why not . . this is a picture of among us . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_0/2020/08/20/markdownpost.html",
            "relUrl": "/week_0/2020/08/20/markdownpost.html",
            "date": " • Aug 20, 2020"
        }
        
    
  
    
        ,"post24": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://toby-leeder.github.io/CSPFastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post25": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://toby-leeder.github.io/CSPFastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi. My name is Toby. I do a little bit of CS every once and a while (that’s why I’m here) and I like doing it. I don’t know a lot but I’m looking forward to learning more! - August 26, 2022 .",
          "url": "https://toby-leeder.github.io/CSPFastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Notes",
          "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . This is my notes pages, I plan on putting a lot of the things I learn and some important syntax in here as well as in the notebook which demonstrates my learning. That means most of the information here can be found somewhere else, but it will all be organized and in one place on this page. . Python Learns . Also in the QnA w/Python post. . I’ve had very little experience with Python before I used it so here’s some of the new functionality I learned and the syntax for it. . Code Syntax Notes . Variables | key = value | Unlike Java, it looks like Python doesn’t really use variable assignments like java. Instead variables can just be assigned “any” and then can be assigned numbers, letters, strings or pretty much watever other value you want including lists. | . Functions | def function_name(parameter1, parameter2, parameterX): code return value | Functions are pretty similar to other languages for the most part. It is a little different than java in that you don’t really use keywords before to define it like int, string or void for the return type or static, private and public. They still function (get it?) pretty much the same though. | . For loops | for newVar in definedVar: code | For loops are probably the most different from Java. This is because they go through a list of a variable instead of creating a new integer and going until that integer reaches a value. That interger is suprisingly useful, so to me it seems like this change removes some of the functionality of a for loop. Despite this though I still found ways around it and was able to accomplish my goals. | . Bash Learns . Also in the Checks w/Bash post. . I’ve had basically no experience with Bash before this so it was interesting to learn some of the new functionality now as well. Here is some of what I learned. . Code Syntax Notes . Variables | key=value | Most variables work the same and it looks like bash works a similar way as well. You don’t put a space in between the key and the value. If you do it looks like bash reads the key as a command and so the variable doesn’t work. Also, to call a variable it looks like you need a $ sign in front, otherwise it just reads it as a string. | . Echo | echo “what you want to print” | Echo is the bash version of print and pretty much works the same, though you can do some cool stuff with periods with it. | . If then | if [[ condition ]] then code else code fi | This again is pretty similar to java or python though there are some differences. For example the condition needs [[]] which is different. Also, you need a then statement to run the code and at the end you need fi to finish the if statement. | . More Python Learns . Also in the Lists and Dictionaries w/Python . Code Syntax Notes . List | key = [value, value, …] | Lists in python are sorta like arrays in Java. They are different because a list can have multiple different data types within it. Lists can also have multiple dictionary entries in which each dictionary has multiple key and value pairs within it. Entries can be added into a list using the .append() method or just use + and adding it. | . Dictionary | dictionary_key = {key: value, key: value …} | Dictionaries are similar to lists, but instead of just holding values with one single key, each individual value is paired with its own key. That means you can call each value using its unique key. This is useful for a lot of things. You can also create a list of dictionaries, in which a list has multiple dictionary entries. Each dictionary can have multiple key and value pairs and is only considered one entry in the list. | . Try, except | try: code except error: code except: code | This is an interesting code that I already knew about from previous experience, but I found it could be useful here. Essentially the try portion is what runs initially and it will keep running the code within it until it runs and returns an error. Then the except code runs after. You can change what the except code is depending on the error or you can leave it generic so it runs for any error. | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page8": {
          "title": "Timeline",
          "content": "Week Posts . 0 | First Markdown, First Jupyter Notebook, Second Jupyter Notebook | . 1 | QnA w/Python, Checks w/Bash, Alumni Panel Notes, Lanzi Class Calendar | . 2 | Lists and Dictionaries w/Python | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/timeline/",
          "relUrl": "/timeline/",
          "date": ""
      }
      
  

  
      ,"page9": {
          "title": "Vocabulary",
          "content": "This is a page where I will record the vocabulary that I learn throughout this course. . Variable a way to store data | can be put into different categories | Primitive Types Integer (Int): a whole number | Character (Char): a single letter or symbol | Float (Float): A number with a decimal | String (String): A line of text | Double (Double): A number with a decimal | Boolean (Bool) True of false value (stored as 1 or 0) | . | Collections List/Array (Arr): a list of values of the same type | Dictionary: A list of values of different types with keys and values | . | . | Concatenation Adding variables together use +, creates a larger variable or can be used for stuff like printing | . | Function A block of code that can be run when the function is called. Some functions are built in like printing functions and some are created by the programmer. Syntax differs by language, but most have | . | Jekyll language used for some parts of fastpages | . | Liquid Language used to build the tags page | . | Procedural Abstraction this is confusing for me. Essentially its a procedure of abstracting out functions to higher levels. For example, if we have a multiplication function and we run that function we don’t care how it multiplies the numbers we input, we just want it to multiply the numbers. This is procedurally abstracting the process to the lowest level of computations. | . | Local Server Running one right now! It’s a server running locally on my computer using Docker Packages. Allows for quick editing as your changes show up instantly. You also don’t need to push your changes to github for the changes to show up. This is because the server is built by reading the local files, not the cloud files on github. | . | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}