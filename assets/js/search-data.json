{
  
    
        "post0": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: | Memory in GB: | Storage in GB: | OS: | . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices | Output devices | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • 2023-04-05 00:00:00 -0500"
        }
        
    
  
    
        ,"post1": {
            "title": "Collegeboard MCQ 4",
            "content": ". MCQ #4 . 48/50 Q29: I didn’t know the answer to this question so I had to look it up. Q36: I forgot what hueristic meant. I googled it and learned it meant use an approximate solution rather than an accurate solution due to the timee complexity. . Corections: Q23: I didn’t read all of the answers, I just thought the first one was correct. Q37: I thought that n^2 complexity was unreasonable, but according to collegeboard it is reasonable. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2023/04/04/collegeboard_mcq_4.html",
            "relUrl": "/2023/04/04/collegeboard_mcq_4.html",
            "date": " • 2023-04-04 00:00:00 -0500"
        }
        
    
  
    
        ,"post2": {
            "title": "Escape room",
            "content": "",
            "url": "https://toby-leeder.github.io/CSPFastpages/2023/03/27/escaperoom.html",
            "relUrl": "/2023/03/27/escaperoom.html",
            "date": " • 2023-03-27 00:00:00 -0500"
        }
        
    
  
    
        ,"post3": {
            "title": "Collegeboard MCQ Final tri 2",
            "content": ". Final . 12/25 Q13: I got this question wrong because I misread, I thought the camera recorded the driver, not the point of view of the driver. Q14: I didn’t get to this questions and it auto-submitted. The answer is C, I would have gotten it right Q15: I didn’t get to this questions and it auto-submitted. The answer is B, I would have gotten it right, it doesn’t record the day of the week so it can’t tell that. Q16: I didn’t get to this questions and it auto-submitted. The answer is A, I would have gotten it right through process of elimination. Q17: I didn’t get to this questions and it auto-submitted. The answer is D, I would have gotten it right Q18: I didn’t get to this questions and it auto-submitted. The answer is D, I would have gotten it right Q19: I didn’t get to this questions and it auto-submitted. The answer is D, I would have gotten it right Q20: I didn’t get to this questions and it auto-submitted. The answer is B, I would have gotten it right Q21: I didn’t get to this questions and it auto-submitted. The answers are B and D, I would have gotten it right Q22: I didn’t get to this questions and it auto-submitted. The answer is C, I would have gotten it right Q23: I didn’t get to this questions and it auto-submitted. The answer is B, I would have gotten it right Q24: I didn’t get to this questions and it auto-submitted. The answer is A, I would have gotten it right Q25: I didn’t get to this questions and it auto-submitted. The answer is C, I would have gotten it right .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2023/03/27/collegeboard_mcq_big_idea_2.html",
            "relUrl": "/2023/03/27/collegeboard_mcq_big_idea_2.html",
            "date": " • 2023-03-27 00:00:00 -0500"
        }
        
    
  
    
        ,"post4": {
            "title": "Unit 2.3 Extracting Information from Data, Pandas",
            "content": "Files To Get . Save this file to your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/2023-03-09-AP-unit2-3.ipynb . Save these files into a subfolder named files in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/data.csv . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/files/grade.json . Save this image into a subfolder named images in your _notebooks folder . wget https://raw.githubusercontent.com/nighthawkcoders/APCSP/master/_notebooks/images/table_dataframe.png . Pandas and DataFrames . In this lesson we will be exploring data analysis using Pandas. . College Board talks about ideas like Tools. &quot;the ability to process data depends on users capabilities and their tools&quot; | Combining Data. &quot;combine county data sets&quot; | Status on Data&quot;determining the artist with the greatest attendance during a particular month&quot; | Data poses challenge. &quot;the need to clean data&quot;, &quot;incomplete data&quot; | . | . From Pandas Overview -- When working with tabular data, such as data stored in spreadsheets or databases, pandas is the right tool for you. pandas will help you to explore, clean, and process your data. In pandas, a data table is called a DataFrame. | . . &#39;&#39;&#39;Pandas is used to gather data sets through its DataFrames implementation&#39;&#39;&#39; import pandas as pd . Cleaning Data . When looking at a data set, check to see what data needs to be cleaned. Examples include: . Missing Data Points | Invalid Data | Inaccurate Data | . Run the following code to see what needs to be cleaned . import pandas as pd # reads the JSON file and converts it to a Pandas DataFrame df = pd.read_json(&#39;files/grade.json&#39;) print(df) # What part of the data set needs to be cleaned? # a few values in the school year, &quot;Junior&quot; and &quot;9th Grade&quot;. one student ID also isn&#39;t valid, it&#39;s value is &quot;nil&quot;. # From PBL learning, what is a good time to clean data? Hint, remember Garbage in, Garbage out? # A good time to clean data is when getting an input. If you never let garbage get into the database then you never have to worry about garbage in the database. . Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 2 578 12 2.78 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 6 145 12 2.95 7 167 10 3.90 8 235 9th Grade 3.15 9 nil 9 2.80 10 469 11 3.45 11 456 10 2.75 . Extracting Info . Take a look at some features that the Pandas library has that extracts info from the dataset . DataFrame Extract Column . print(df[[&#39;GPA&#39;]]) print() #try two columns and remove the index from print statement print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]].to_string(index=True)) print(df[[&#39;Student ID&#39;,&#39;GPA&#39;]]) . GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID GPA 0 123 3.57 1 246 4.00 2 578 2.78 3 469 3.45 4 324 4.75 5 313 3.33 6 145 2.95 7 167 3.90 8 235 3.15 9 nil 2.80 10 469 3.45 11 456 2.75 Student ID GPA 0 123 3.57 1 246 4.00 2 578 2.78 3 469 3.45 4 324 4.75 5 313 3.33 6 145 2.95 7 167 3.90 8 235 3.15 9 nil 2.80 10 469 3.45 11 456 2.75 . DataFrame Sort . print(df.sort_values(by=[&#39;GPA&#39;])) print() #sort the values in reverse order print(df.sort_values(by=[&#39;GPA&#39;], ascending=False)) . Student ID Year in School GPA 11 456 10 2.75 2 578 12 2.78 9 nil 9 2.80 6 145 12 2.95 8 235 9th Grade 3.15 5 313 20 3.33 3 469 11 3.45 10 469 11 3.45 0 123 12 3.57 7 167 10 3.90 1 246 10 4.00 4 324 Junior 4.75 Student ID Year in School GPA 4 324 Junior 4.75 1 246 10 4.00 7 167 10 3.90 0 123 12 3.57 3 469 11 3.45 10 469 11 3.45 5 313 20 3.33 8 235 9th Grade 3.15 6 145 12 2.95 9 nil 9 2.80 2 578 12 2.78 11 456 10 2.75 . DataFrame Selection or Filter . print(df.GPA) print(df[[&quot;GPA&quot;]]) print(df[df.GPA &gt; 3.00]) . 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Name: GPA, dtype: float64 GPA 0 3.57 1 4.00 2 2.78 3 3.45 4 4.75 5 3.33 6 2.95 7 3.90 8 3.15 9 2.80 10 3.45 11 2.75 Student ID Year in School GPA 0 123 12 3.57 1 246 10 4.00 3 469 11 3.45 4 324 Junior 4.75 5 313 20 3.33 7 167 10 3.90 8 235 9th Grade 3.15 10 469 11 3.45 . DataFrame Selection Max and Min . print(df[df.GPA == df.GPA.max()]) print() print(df[df.GPA == df.GPA.min()]) print() . Student ID Year in School GPA 4 324 Junior 4.75 Student ID Year in School GPA 11 456 10 2.75 . Create your own DataFrame . Using Pandas allows you to create your own DataFrame in Python. . import pandas as pd database = pd.read_json(&quot;files/test.json&quot;) print(database) . name Coolness Awesomness badness 0 Dash 10 5 3.57 1 Aiden Huynh 50 100 9.6 lipbite emoji 2 Aiden Leeder 0 3 2.78 3 Bailey Leeder 1 14 3.45 4 Nathan 4 6 4.75 5 Austin 5 13 3.33 6 Gavin 8 7 2.95 7 Mort 7 8 3.9 8 Pham 2 3 3.15 9 [Redacted] nil 9 2.8 10 Toby 11 15 3.45 11 Trains 8 1 2.75 . Python Dictionary to Pandas DataFrame . import pandas as pd #the data can be stored as a python dictionary dict = { &quot;calories&quot;: [420, 380, 390], &quot;duration&quot;: [50, 40, 45] } #stores the data in a data frame print(&quot;-Dict_to_DF&quot;) df = pd.DataFrame(dict) print(df) print(&quot;-Dict_to_DF_labels--&quot;) #or with the index argument, you can label rows. df = pd.DataFrame(dict, index = [&quot;day1&quot;, &quot;day2&quot;, &quot;day3&quot;]) print(df) . -Dict_to_DF calories duration 0 420 50 1 380 40 2 390 45 -Dict_to_DF_labels-- calories duration day1 420 50 day2 380 40 day3 390 45 . Examine DataFrame Rows . print(&quot;-Examine Selected Rows&quot;) #use a list for multiple labels: print(df.loc[[&quot;day1&quot;, &quot;day3&quot;]]) #refer to the row index: print(&quot;--Examine Single Row--&quot;) print(df.loc[&quot;day1&quot;]) print() . -Examine Selected Rows calories duration day1 420 50 day3 390 45 --Examine Single Row-- calories 420 duration 50 Name: day1, dtype: int64 . Pandas DataFrame Information . print(df.info()) . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Index: 3 entries, day1 to day3 Data columns (total 2 columns): # Column Non-Null Count Dtype -- -- 0 calories 3 non-null int64 1 duration 3 non-null int64 dtypes: int64(2) memory usage: 180.0+ bytes None . Example of larger data set . Pandas can read CSV and many other types of files, run the following code to see more features with a larger data set . import pandas as pd #read csv and sort &#39;Duration&#39; largest to smallest df = pd.read_csv(&#39;files/data.csv&#39;).sort_values(by=[&#39;Duration&#39;], ascending=False) print(&quot;--Duration Top 10&quot;) print(df.head(10)) print(&quot;--Duration Bottom 10&quot;) print(df.tail(10)) print(&quot;Number of rows and columns&quot;) print(&quot;Rows&quot;, len(df.axes[0])) print(&quot;Columns&quot;, len(df.axes[1])) . --Duration Top 10 Duration Pulse Maxpulse Calories 69 300 108 143 1500.2 79 270 100 131 1729.0 109 210 137 184 1860.4 60 210 108 160 1376.0 106 180 90 120 800.3 90 180 101 127 600.1 65 180 90 130 800.4 61 160 110 137 1034.4 62 160 109 135 853.0 67 150 107 130 816.0 --Duration Bottom 10 Duration Pulse Maxpulse Calories 68 20 106 136 110.4 100 20 95 112 77.7 89 20 83 107 50.3 135 20 136 156 189.0 94 20 150 171 127.4 95 20 151 168 229.4 139 20 141 162 222.4 64 20 110 130 131.4 112 15 124 139 124.2 93 15 80 100 50.5 Number of rows and columns Rows 169 Columns 4 . APIs are a Source for Writing Programs with Data . 3rd Party APIs are a great source for creating Pandas Data Frames. . Data can be fetched and resulting json can be placed into a Data Frame | Observe output, this looks very similar to a Database | . &#39;&#39;&#39;Pandas can be used to analyze data&#39;&#39;&#39; import pandas as pd import requests def fetch(): &#39;&#39;&#39;Obtain data from an endpoint&#39;&#39;&#39; url = &quot;https://flask.nighthawkcodingsociety.com/api/covid/&quot; fetch = requests.get(url) json = fetch.json() # filter data for requirement df = pd.DataFrame(json[&#39;countries_stat&#39;]) # filter endpoint for country stats print(df.loc[0:5, &#39;country_name&#39;:&#39;deaths&#39;]) # show row 0 through 5 and columns country_name through deaths fetch() . country_name cases deaths 0 USA 82,649,779 1,018,316 1 India 43,057,545 522,193 2 Brazil 30,345,654 662,663 3 France 28,244,977 145,020 4 Germany 24,109,433 134,624 5 UK 21,933,206 173,352 . Hacks . Early Seed award . Add this Blog to you own Blogging site. | Have all lecture files saved to your files directory before Tech Talk starts. Have data.csv open in vscode. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | In blog add College Board practice problems for 2.3. | . The next 4 weeks, Teachers want you to improve your understanding of data. Look at the blog and others on Unit 2. Your intention is to find some things to differentiate your individual College Board project. . Create or Find your own dataset. The suggestion is to use a JSON file, integrating with your PBL project would be Amazing. . | When choosing a data set, think about the following... . Does it have a good sample size? | Is there bias in the data? | Does the data set need to be cleaned? | What is the purpose of the data set? | ... | . | Continue this Blog using Pandas extract info from that dataset (ex. max, min, mean, median, mode, etc.) . | . Hack Helpers . Here is how Mort started on this assignment by asking ChatGPT ... Regarding Python Pandas, what are some data sets that would be good for learning Pandas? . There are many data sets that are suitable for learning pandas, depending on your interests and the skills you want to develop. . Here are some suggestions... . Titanic Dataset:This is a classic dataset for data analysis and machine learning, and is often used as an introduction to pandas. The dataset contains information about passengers on the Titanic, including their demographics, ticket class, and survival status. | Iris Dataset: This is another classic dataset that is often used in machine learning and data analysis courses. The dataset contains information about iris flowers, including their sepal length, sepal width, petal length, and petal width. . | NBA Player Stats: This dataset contains information about NBA players, including their stats for various games, their positions, and their salaries. It is a great dataset for learning how to clean and manipulate data using pandas. . | Housing Prices Dataset: This dataset contains information about housing prices in a particular city or region, including variables such as the number of bedrooms, square footage, and price. It is a great dataset for learning how to manipulate and analyze numerical data using pandas. . | COVID-19 Dataset: This dataset contains information about the COVID-19 pandemic, including the number of cases, deaths, and recoveries in various countries and regions. It is a great dataset for learning how to manipulate and analyze time-series data using pandas. . | World Bank Dataset: This dataset contains information about economic indicators from various countries, such as GDP, population, and poverty rates. It is a great dataset for learning how to manipulate and analyze large datasets using pandas. . | . | . These are just a few examples of the many datasets that are suitable for learning pandas. The best dataset for you will depend on your interests and the specific skills you want to develop. . Follow up question, &quot;where can I find Titanic data set?&quot; . | The Titanic dataset is a popular dataset for data analysis and machine learning, and it can be found on various websites and data repositories. Here are a few places where you can find the Titanic dataset... . Kaggle:The Titanic dataset is available on Kaggle, which is a popular platform for data scientists and machine learning enthusiasts. You can download the dataset from the Kaggle website after creating an account. | UCI Machine Learning Repository: The Titanic dataset is also available on the UCI Machine Learning Repository, which is a collection of datasets that are commonly used for machine learning research. You can download the dataset from the UCI Machine Learning Repository website. . | Seaborn library: If you have the Seaborn library installed in your Python environment, you can load the Titanic dataset directly from the library using the following code: . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) . | . | . import os # assign directory directory = &#39;files/Minecraft_Composting_v2/&#39; # iterate over files in # that directory for filename in os.listdir(directory): f = os.path.join(directory, filename) # checking if it is a file if os.path.isfile(f): print(f) . files/Minecraft_Composting_v2/Cookie_v2.csv files/Minecraft_Composting_v2/Sugarcane_v2.csv files/Minecraft_Composting_v2/Wheatseed_v2.csv files/Minecraft_Composting_v2/Carrot_v2.csv files/Minecraft_Composting_v2/Apple_v2.csv files/Minecraft_Composting_v2/Wheat_v2.csv files/Minecraft_Composting_v2/Oaksapling_v2.csv files/Minecraft_Composting_v2/Melonseed_v2.csv files/Minecraft_Composting_v2/Potato_v2.csv files/Minecraft_Composting_v2/Oakleaf_v2.csv files/Minecraft_Composting_v2/Melon_v2.csv files/Minecraft_Composting_v2/Cactus_v2.csv files/Minecraft_Composting_v2/Radish_v2.csv files/Minecraft_Composting_v2/Pumpkin_v2.csv files/Minecraft_Composting_v2/Pumpkinseed_v2.csv files/Minecraft_Composting_v2/Radishseed_v2.csv . import pandas as pd import os minecraft = pd.DataFrame() directory = &#39;files/Minecraft_Composting_v2/&#39; for filename in os.listdir(directory): f = os.path.join(directory, filename) if os.path.isfile(f): minecraft[f[30:29 + f[29:].find(&quot;_&quot;)]] = pd.read_csv(f) # print(minecraft) print(minecraft.mode()) print(&quot;Mean&quot;) print(minecraft.mean()) print(&quot;Median:&quot;) print(minecraft.median()) print(&quot;Max&quot;) print(minecraft.max()) column = input(&quot;What column would you like to sort by?&quot;) ascension = input(&quot;would you like it in ascending or descending order? (y/n)&quot;) check = lambda ascension : True if ascension == &#39;y&#39; else False print(minecraft.sort_values(by=[column], ascending=(check(ascension)))) . Cookie Sugarcane Wheatseed Carrot Apple Wheat Oaksapling Melonseed 0 7 12 17 9 9 9 19 17 Potato Oakleaf Melon Cactus Radish Pumpkin Pumpkinseed Radishseed 0 9 18 9 12 9 9 19 20 Mean Cookie 8.034667 Sugarcane 13.171667 Wheatseed 20.797333 Carrot 10.278000 Apple 10.243333 Wheat 10.243333 Oaksapling 21.064667 Melonseed 21.052333 Potato 10.229000 Oakleaf 20.938667 Melon 10.302667 Cactus 13.007333 Radish 10.218333 Pumpkin 10.233333 Pumpkinseed 21.133000 Radishseed 20.860000 dtype: float64 Median: Cookie 8.0 Sugarcane 13.0 Wheatseed 20.0 Carrot 10.0 Apple 10.0 Wheat 10.0 Oaksapling 20.0 Melonseed 20.0 Potato 10.0 Oakleaf 20.0 Melon 10.0 Cactus 12.0 Radish 10.0 Pumpkin 10.0 Pumpkinseed 20.0 Radishseed 20.0 dtype: float64 Max Cookie 15 Sugarcane 41 Wheatseed 50 Carrot 22 Apple 21 Wheat 22 Oaksapling 56 Melonseed 55 Potato 21 Oakleaf 57 Melon 22 Cactus 28 Radish 23 Pumpkin 21 Pumpkinseed 73 Radishseed 52 dtype: int64 Cookie Sugarcane Wheatseed Carrot Apple Wheat Oaksapling 885 7 10 15 9 10 10 56 590 8 17 18 10 14 13 53 2842 8 8 35 8 10 9 53 102 8 10 9 8 9 7 50 467 8 17 27 7 9 8 50 ... ... ... ... ... ... ... ... 512 9 11 14 18 11 14 8 415 7 12 22 8 11 11 8 1349 8 15 29 9 10 12 8 2638 7 10 16 10 13 15 7 640 9 14 20 13 7 9 7 Melonseed Potato Oakleaf Melon Cactus Radish Pumpkin Pumpkinseed 885 33 9 27 10 13 10 11 17 590 21 9 12 9 15 9 8 20 2842 32 11 38 10 13 10 8 26 102 22 10 24 13 12 10 8 16 467 18 8 19 7 11 10 9 18 ... ... ... ... ... ... ... ... ... 512 14 11 15 7 14 10 9 23 415 18 10 28 8 13 15 14 11 1349 32 10 23 9 10 13 11 15 2638 24 7 31 11 10 10 11 15 640 21 11 15 9 11 11 10 19 Radishseed 885 21 590 26 2842 17 102 17 467 17 ... ... 512 24 415 18 1349 13 2638 22 640 19 [3000 rows x 16 columns] . import pandas as pd bank = pd.read_json(&quot;files/world-bank-projects.json&quot;) print(bank[bank.countryname == &quot;Republic of Indonesia&quot;]) print(bank[[&quot;countryname&quot;]].mode()) print() print(bank[bank.countryname == &quot;Republic of Indonesia&quot;].axes[0]) . _id approvalfy board_approval_month 92 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c7dc&#39;} 2013 July 138 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c80a&#39;} 2013 June 176 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c830&#39;} 2013 May 202 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c84a&#39;} 2013 May 210 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c852&#39;} 2013 May 212 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c854&#39;} 2013 May 232 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c868&#39;} 2013 April 247 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c877&#39;} 2013 March 299 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c8ab&#39;} 2013 March 300 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c8ac&#39;} 2013 March 364 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c8ec&#39;} 2013 December 377 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c8f9&#39;} 2013 December 395 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c90b&#39;} 2013 November 396 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c90c&#39;} 2013 November 397 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c90d&#39;} 2013 November 398 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c90e&#39;} 2013 November 445 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c93d&#39;} 2013 October 475 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c95b&#39;} 2013 September 498 {&#39;$oid&#39;: &#39;52b213b38594d8a2be17c972&#39;} 2013 August boardapprovaldate borrower 92 2013-07-08T00:00:00Z REPUBLIC OF INDONESIA 138 2013-06-13T00:00:00Z GOVERNMENT OF INDONESIA 176 2013-05-24T00:00:00Z TBD (TO BE DETERMINED) 202 2013-05-10T00:00:00Z TBD (TO BE DETERMINED) 210 2013-05-07T00:00:00Z GOVERNMENT OF INDONESIA 212 2013-05-02T00:00:00Z GOVERNMENT OF INDONESIA 232 2013-04-24T00:00:00Z TBD (TO BE DETERMINED) 247 2013-03-29T00:00:00Z REPUBLIC OF INDONESIA 299 2013-03-04T00:00:00Z NGO 300 2013-03-04T00:00:00Z DG COMMUNITY AND VILLAGE EMPOWERMENT, MI 364 2012-12-19T00:00:00Z GOVERNMENT OF INDONESIA 377 2012-12-11T00:00:00Z REPUBLIC OF INDONESIA 395 2012-11-20T00:00:00Z REPUBLIC OF INDONESIA 396 2012-11-20T00:00:00Z REPUBLIC OF INDONESIA 397 2012-11-20T00:00:00Z GOVERNMENT OF INDONESIA 398 2012-11-20T00:00:00Z REPUBLIC OF INDONESIA 445 2012-10-05T00:00:00Z NGO 475 2012-09-11T00:00:00Z GOVERNMENT OF INDONESIA 498 2012-08-02T00:00:00Z REPUBLIC OF INDONESIA closingdate country_namecode countrycode 92 2018-12-31T00:00:00Z Republic of Indonesia!$!ID ID 138 2015-12-31T00:00:00Z Republic of Indonesia!$!ID ID 176 NaN Republic of Indonesia!$!ID ID 202 NaN Republic of Indonesia!$!ID ID 210 2013-12-31T00:00:00Z Republic of Indonesia!$!ID ID 212 NaN Republic of Indonesia!$!ID ID 232 2013-12-31T00:00:00Z Republic of Indonesia!$!ID ID 247 2020-12-31T00:00:00Z Republic of Indonesia!$!ID ID 299 2013-12-31T00:00:00Z Republic of Indonesia!$!ID ID 300 NaN Republic of Indonesia!$!ID ID 364 2014-12-31T00:00:00Z Republic of Indonesia!$!ID ID 377 2015-12-31T00:00:00Z Republic of Indonesia!$!ID ID 395 2013-04-30T00:00:00Z Republic of Indonesia!$!ID ID 396 2015-12-31T00:00:00Z Republic of Indonesia!$!ID ID 397 2013-04-30T00:00:00Z Republic of Indonesia!$!ID ID 398 2013-12-31T00:00:00Z Republic of Indonesia!$!ID ID 445 2014-06-30T00:00:00Z Republic of Indonesia!$!ID ID 475 2018-03-31T00:00:00Z Republic of Indonesia!$!ID ID 498 2017-09-30T00:00:00Z Republic of Indonesia!$!ID ID countryname countryshortname ... sectorcode source 92 Republic of Indonesia Indonesia ... LT IBRD 138 Republic of Indonesia Indonesia ... LS,LC IBRD 176 Republic of Indonesia Indonesia ... BG IBRD 202 Republic of Indonesia Indonesia ... JB IBRD 210 Republic of Indonesia Indonesia ... BH,BC,EP,JA IBRD 212 Republic of Indonesia Indonesia ... JB,BC,BH,WA,WC IBRD 232 Republic of Indonesia Indonesia ... EV IBRD 247 Republic of Indonesia Indonesia ... EZ,BN,EV,ET IBRD 299 Republic of Indonesia Indonesia ... JB,BH IBRD 300 Republic of Indonesia Indonesia ... BH IBRD 364 Republic of Indonesia Indonesia ... BH,BC IBRD 377 Republic of Indonesia Indonesia ... WZ,TI,JA,EZ,BH IBRD 395 Republic of Indonesia Indonesia ... LZ,WZ,JA,CT,TZ IBRD 396 Republic of Indonesia Indonesia ... BH,JB,LZ,WZ,TI IBRD 397 Republic of Indonesia Indonesia ... BK,JB,BZ,BC IBRD 398 Republic of Indonesia Indonesia ... FD,FK,FA,FZ IBRD 445 Republic of Indonesia Indonesia ... EV IBRD 475 Republic of Indonesia Indonesia ... BO,BH,LZ,TZ,WZ IBRD 498 Republic of Indonesia Indonesia ... YA,BL,AB IBRD status supplementprojectflg 92 Active N 138 Active N 176 Active N 202 Active N 210 Active N 212 Active Y 232 Active N 247 Active N 299 Active N 300 Active N 364 Active Y 377 Active N 395 Closed N 396 Active N 397 Closed N 398 Closed N 445 Active N 475 Active N 498 Active N theme1 92 {&#39;Name&#39;: &#39;Climate change&#39;, &#39;Percent&#39;: 10} 138 {&#39;Name&#39;: &#39;Other public sector governance&#39;, &#39;Pe... 176 {&#39;Name&#39;: &#39;Other accountability/anti-corruption... 202 {&#39;Name&#39;: &#39;Participation and civic engagement&#39;,... 210 {&#39;Name&#39;: &#39;Education for all&#39;, &#39;Percent&#39;: 24} 212 {&#39;Name&#39;: &#39;Participation and civic engagement&#39;,... 232 {&#39;Name&#39;: &#39;Participation and civic engagement&#39;,... 247 {&#39;Name&#39;: &#39;Education for the knowledge economy&#39;... 299 {&#39;Name&#39;: &#39;Other rural development&#39;, &#39;Percent&#39;:... 300 {&#39;Name&#39;: &#39;Other public sector governance&#39;, &#39;Pe... 364 {&#39;Name&#39;: &#39;Vulnerability assessment and monitor... 377 {&#39;Name&#39;: &#39;Participation and civic engagement&#39;,... 395 {&#39;Name&#39;: &#39;Infrastructure services for private ... 396 {&#39;Name&#39;: &#39;Other social protection and risk man... 397 {&#39;Name&#39;: &#39;Participation and civic engagement&#39;,... 398 {&#39;Name&#39;: &#39;International financial standards an... 445 {&#39;Name&#39;: &#39;Other social development&#39;, &#39;Percent&#39;... 475 {&#39;Name&#39;: &#39;Infrastructure services for private ... 498 {&#39;Name&#39;: &#39;Rural services and infrastructure&#39;, ... theme_namecode themecode 92 [{&#39;name&#39;: &#39;Climate change&#39;, &#39;code&#39;: &#39;81&#39;}, {&#39;n... 39,81 138 [{&#39;name&#39;: &#39;Other public sector governance&#39;, &#39;c... 30 176 [{&#39;name&#39;: &#39;Other accountability/anti-corruptio... 35,31,29 202 [{&#39;name&#39;: &#39;Participation and civic engagement&#39;... 57 210 [{&#39;name&#39;: &#39;Education for all&#39;, &#39;code&#39;: &#39;65&#39;}, ... 57,63,69,68,65 212 [{&#39;name&#39;: &#39;Participation and civic engagement&#39;... 78,57 232 [{&#39;name&#39;: &#39;Participation and civic engagement&#39;... 57 247 [{&#39;name&#39;: &#39;Education for the knowledge economy... 59,66 299 [{&#39;name&#39;: &#39;Other rural development&#39;, &#39;code&#39;: &#39;... 62,79 300 [{&#39;name&#39;: &#39;Other public sector governance&#39;, &#39;c... 29,79,30 364 [{&#39;name&#39;: &#39;Vulnerability assessment and monito... 52,55 377 [{&#39;name&#39;: &#39;Participation and civic engagement&#39;... 78,68,65,77,57 395 [{&#39;name&#39;: &#39;Infrastructure services for private... 78,47,49,39 396 [{&#39;name&#39;: &#39;Other social protection and risk ma... 59,57,41,56 397 [{&#39;name&#39;: &#39;Participation and civic engagement&#39;... 27,53,54,28,57 398 [{&#39;name&#39;: &#39;International financial standards a... 40,41,59,42 445 [{&#39;name&#39;: &#39;Other social development&#39;, &#39;code&#39;: ... 62 475 [{&#39;name&#39;: &#39;Infrastructure services for private... 72,39 498 [{&#39;name&#39;: &#39;Rural services and infrastructure&#39;,... 77,91,78 totalamt totalcommamt url 92 325000000 325000000 http://www.worldbank.org/projects/P123994/indo... 138 0 1050000 http://www.worldbank.org/projects/P133729/indo... 176 0 3960000 http://www.worldbank.org/projects/P144386/pnpm... 202 0 1800000 http://www.worldbank.org/projects/P143354/id-t... 210 0 31700000 http://www.worldbank.org/projects/P132585/id-t... 212 99900000 99900000 http://www.worldbank.org/projects/P129486/add-... 232 0 880000 http://www.worldbank.org/projects/P132831/pnpm... 247 95000000 95000000 http://www.worldbank.org/projects/P121842/rese... 299 0 1670000 http://www.worldbank.org/projects/P131815/id-t... 300 0 1650000 http://www.worldbank.org/projects/P132945/id-p... 364 0 2380000 http://www.worldbank.org/projects/P124674?lang=en 377 650000000 650000000 http://www.worldbank.org/projects/P128832/nati... 395 100000000 100000000 http://www.worldbank.org/projects/P124006/firs... 396 266000000 266000000 http://www.worldbank.org/projects/P125405/four... 397 300000000 300000000 http://www.worldbank.org/projects/P126162/inst... 398 100000000 100000000 http://www.worldbank.org/projects/P130150/fina... 445 0 4150000 http://www.worldbank.org/projects/P131387/bare... 475 29600000 29600000 http://www.worldbank.org/projects/P118916/infr... 498 80000000 80000000 http://www.worldbank.org/projects/P117243/sust... [19 rows x 50 columns] countryname 0 People&#39;s Republic of China 1 Republic of Indonesia Int64Index([ 92, 138, 176, 202, 210, 212, 232, 247, 299, 300, 364, 377, 395, 396, 397, 398, 445, 475, 498], dtype=&#39;int64&#39;) . Titanic Data . Look at a sample of data. . import seaborn as sns # Load the titanic dataset titanic_data = sns.load_dataset(&#39;titanic&#39;) print(&quot;Titanic Data&quot;) # print(titanic_data.columns) # titanic data set # print(titanic_data[[&#39;survived&#39;,&#39;pclass&#39;, &#39;sex&#39;, &#39;age&#39;, &#39;sibsp&#39;, &#39;parch&#39;, &#39;class&#39;, &#39;fare&#39;, &#39;embark_town&#39;]]) # look at selected columns # and titanic_data.survived == 0 print(&quot;Number of kids on the titanic:&quot;, len(titanic_data[titanic_data.age &lt; 18].axes[0])) child_data = titanic_data[titanic_data.age &lt; 18] print(&quot;Number of kids who died on the titanic:&quot;, len(child_data[child_data.survived &lt; 1].axes[0])) . Titanic Data Number of kids on the titanic: 113 Number of kids who died on the titanic: 52 . Use Pandas to clean the data. Most analysis, like Machine Learning or even Pandas in general like data to be in standardized format. This is called &#39;Training&#39; or &#39;Cleaning&#39; data. . import seaborn as sns titanic_data = sns.load_dataset(&#39;titanic&#39;) # Preprocess the data from sklearn.preprocessing import OneHotEncoder td = titanic_data td.drop([&#39;alive&#39;, &#39;who&#39;, &#39;adult_male&#39;, &#39;class&#39;, &#39;embark_town&#39;, &#39;deck&#39;], axis=1, inplace=True) td.dropna(inplace=True) td[&#39;sex&#39;] = td[&#39;sex&#39;].apply(lambda x: 1 if x == &#39;male&#39; else 0) td[&#39;alone&#39;] = td[&#39;alone&#39;].apply(lambda x: 1 if x == True else 0) # Encode categorical variables print(td) enc = OneHotEncoder(handle_unknown=&#39;ignore&#39;) enc.fit(td[[&#39;embarked&#39;]]) onehot = enc.transform(td[[&#39;embarked&#39;]]).toarray() cols = [&#39;embarked_&#39; + val for val in enc.categories_[0]] td[cols] = pd.DataFrame(onehot) td.drop([&#39;embarked&#39;], axis=1, inplace=True) td.dropna(inplace=True) print(&quot;new table&quot;) . survived pclass sex age sibsp parch fare embarked alone 0 0 3 1 22.0 1 0 7.2500 S 0 1 1 1 0 38.0 1 0 71.2833 C 0 2 1 3 0 26.0 0 0 7.9250 S 1 3 1 1 0 35.0 1 0 53.1000 S 0 4 0 3 1 35.0 0 0 8.0500 S 1 .. ... ... ... ... ... ... ... ... ... 885 0 3 0 39.0 0 5 29.1250 Q 0 886 0 2 1 27.0 0 0 13.0000 S 1 887 1 1 0 19.0 0 0 30.0000 S 1 889 1 1 1 26.0 0 0 30.0000 C 1 890 0 3 1 32.0 0 0 7.7500 Q 1 [712 rows x 9 columns] survived pclass sex age sibsp parch fare embarked alone 0 0 3 1 22.0 1 0 7.2500 S 0 1 1 1 0 38.0 1 0 71.2833 C 0 2 1 3 0 26.0 0 0 7.9250 S 1 3 1 1 0 35.0 1 0 53.1000 S 0 4 0 3 1 35.0 0 0 8.0500 S 1 .. ... ... ... ... ... ... ... ... ... 885 0 3 0 39.0 0 5 29.1250 Q 0 886 0 2 1 27.0 0 0 13.0000 S 1 887 1 1 0 19.0 0 0 30.0000 S 1 889 1 1 1 26.0 0 0 30.0000 C 1 890 0 3 1 32.0 0 0 7.7500 Q 1 embarked_C embarked_Q embarked_S 0 0.0 0.0 1.0 1 1.0 0.0 0.0 2 0.0 0.0 1.0 3 0.0 0.0 1.0 4 0.0 0.0 1.0 .. ... ... ... 885 NaN NaN NaN 886 NaN NaN NaN 887 NaN NaN NaN 889 NaN NaN NaN 890 NaN NaN NaN [712 rows x 12 columns] survived pclass sex age sibsp parch fare alone embarked_C 0 0 3 1 22.0 1 0 7.2500 0 0.0 1 1 1 0 38.0 1 0 71.2833 0 1.0 2 1 3 0 26.0 0 0 7.9250 1 0.0 3 1 1 0 35.0 1 0 53.1000 0 0.0 4 0 3 1 35.0 0 0 8.0500 1 0.0 .. ... ... ... ... ... ... ... ... ... 885 0 3 0 39.0 0 5 29.1250 0 NaN 886 0 2 1 27.0 0 0 13.0000 1 NaN 887 1 1 0 19.0 0 0 30.0000 1 NaN 889 1 1 1 26.0 0 0 30.0000 1 NaN 890 0 3 1 32.0 0 0 7.7500 1 NaN embarked_Q embarked_S 0 0.0 1.0 1 0.0 0.0 2 0.0 1.0 3 0.0 1.0 4 0.0 1.0 .. ... ... 885 NaN NaN 886 NaN NaN 887 NaN NaN 889 NaN NaN 890 NaN NaN [712 rows x 11 columns] new table . The result of &#39;Training&#39; data is making it easier to analyze or make conclusions. In looking at the Titanic, as you clean you would probably want to make assumptions on likely chance of survival. . This would involve analyzing various factors (such as age, gender, class, etc.) that may have affected a person&#39;s chances of survival, and using that information to make predictions about whether an individual would have survived or not. . Data description:- Survival - Survival (0 = No; 1 = Yes). Not included in test.csv file. - Pclass - Passenger Class (1 = 1st; 2 = 2nd; 3 = 3rd) . Name - Name | Sex - Sex | Age - Age | Sibsp - Number of Siblings/Spouses Aboard | Parch - Number of Parents/Children Aboard | Ticket - Ticket Number | Fare - Passenger Fare | Cabin - Cabin | Embarked - Port of Embarkation (C = Cherbourg; Q = Queenstown; S = Southampton) | . | Perished Mean/Average . | . print(titanic_data.query(&quot;survived == 0&quot;).mean()) . survived 0.000000 pclass 2.464072 sex 0.844311 age 31.073353 sibsp 0.562874 parch 0.398204 fare 24.835902 alone 0.616766 embarked_C 0.185629 embarked_Q 0.038922 embarked_S 0.775449 dtype: float64 . Survived Mean/Average | . print(td.query(&quot;survived == 1&quot;).mean()) . survived 1.000000 pclass 1.878261 sex 0.326087 age 28.481522 sibsp 0.504348 parch 0.508696 fare 50.188806 alone 0.456522 embarked_C 0.152174 embarked_Q 0.034783 embarked_S 0.813043 dtype: float64 . Survived Max and Min Stats . print(td.query(&quot;survived == 1&quot;).max()) print(td.query(&quot;survived == 1&quot;).min()) . survived 1.0000 pclass 3.0000 sex 1.0000 age 80.0000 sibsp 4.0000 parch 5.0000 fare 512.3292 alone 1.0000 embarked_C 1.0000 embarked_Q 1.0000 embarked_S 1.0000 dtype: float64 survived 1.00 pclass 1.00 sex 0.00 age 0.75 sibsp 0.00 parch 0.00 fare 0.00 alone 0.00 embarked_C 0.00 embarked_Q 0.00 embarked_S 0.00 dtype: float64 . Machine Learning Visit Tutorials Point . Scikit-learn (Sklearn) is the most useful and robust library for machine learning in Python. It provides a selection of efficient tools for machine learning and statistical modeling including classification, regression, clustering and dimensionality reduction via a consistence interface in Python. . Description from ChatGPT. The Titanic dataset is a popular dataset for data analysis and machine learning. In the context of machine learning, accuracy refers to the percentage of correctly classified instances in a set of predictions. In this case, the testing data is a subset of the original Titanic dataset that the decision tree model has not seen during training......After training the decision tree model on the training data, we can evaluate its performance on the testing data by making predictions on the testing data and comparing them to the actual outcomes. The accuracy of the decision tree classifier on the testing data tells us how well the model generalizes to new data that it hasn&#39;t seen before......For example, if the accuracy of the decision tree classifier on the testing data is 0.8 (or 80%), this means that 80% of the predictions made by the model on the testing data were correct....Chance of survival could be done using various machine learning techniques, including decision trees, logistic regression, or support vector machines, among others. . | Code Below prepares data for further analysis and provides an Accuracy. IMO, you would insert a new passenger and predict survival. Datasets could be used on various factors like prediction if a player will hit a Home Run, or a Stock will go up or down. . Decision Trees, prediction by a piecewise constant approximation. | Logistic Regression, the probabilities describing the possible outcomes. | . | . from sklearn.model_selection import train_test_split from sklearn.tree import DecisionTreeClassifier from sklearn.linear_model import LogisticRegression from sklearn.metrics import accuracy_score # Split arrays or matrices into random train and test subsets. X = td.drop(&#39;survived&#39;, axis=1) y = td[&#39;survived&#39;] X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42) # Train a decision tree classifier dt = DecisionTreeClassifier() dt.fit(X_train, y_train) # Test the model y_pred = dt.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;DecisionTreeClassifier Accuracy:&#39;, accuracy) # Train a logistic regression model logreg = LogisticRegression() logreg.fit(X_train, y_train) # Test the model y_pred = logreg.predict(X_test) accuracy = accuracy_score(y_test, y_pred) print(&#39;LogisticRegression Accuracy:&#39;, accuracy) . DecisionTreeClassifier Accuracy: 0.7588235294117647 LogisticRegression Accuracy: 0.788235294117647 . /Users/tobyleeder/opt/anaconda3/lib/python3.9/site-packages/sklearn/linear_model/_logistic.py:814: ConvergenceWarning: lbfgs failed to converge (status=1): STOP: TOTAL NO. of ITERATIONS REACHED LIMIT. Increase the number of iterations (max_iter) or scale the data as shown in: https://scikit-learn.org/stable/modules/preprocessing.html Please also refer to the documentation for alternative solver options: https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression n_iter_i = _check_optimize_result( .",
            "url": "https://toby-leeder.github.io/CSPFastpages/unit2/2023/03/09/AP-unit2-3.html",
            "relUrl": "/unit2/2023/03/09/AP-unit2-3.html",
            "date": " • 2023-03-09 00:00:00 -0600"
        }
        
    
  
    
        ,"post5": {
            "title": "Collegeboard MCQ Final tri 2",
            "content": ". Final . 46/50 Q2: I got this question wrong, I didn’t realize that the IP doesn’t actually give information about the user, but instead the cookies are because they actually contain information which can be used to track the user. Q8: I didn’t really know what digital certificates were at all, but now I know they’re not used to verify that the connection is fault tolerant. Q28: I got this one wrong because of weird substring stuff. I forgot that the second value in the substring function was the length and not the distance from the end. It needs to be four not 2 because the first two are removed so 2 less than the length would just be everything after that. Q41: I don’t really know what I was thinking for this one. I know binary search needs to be done on a sorted list but for some reason I thought converting it from decimal was the same as sorting it and I don’t really know why. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2023/03/08/collegeboard_mcq_tri_2.html",
            "relUrl": "/2023/03/08/collegeboard_mcq_tri_2.html",
            "date": " • 2023-03-08 00:00:00 -0600"
        }
        
    
  
    
        ,"post6": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": "Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. - Clouds Impression . Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Python Libraries and Concepts used for Jupyter and Files/Directories . Introduction to displaying images in Jupyter notebook . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . #elements formatted: colors[colorname] = CONSTANT from collections import namedtuple, OrderedDict Color = namedtuple(&#39;RGB&#39;,&#39;red, green, blue&#39;) colors = {} #dict of colors class RGB(Color): def hex_format(self): #Returns color in hex format return &#39;#{:02X}{:02X}{:02X}&#39;.format(self.red,self.green,self.blue) #Color Contants ALICEBLUE = RGB(240, 248, 255) ANTIQUEWHITE = RGB(250, 235, 215) ANTIQUEWHITE1 = RGB(255, 239, 219) ANTIQUEWHITE2 = RGB(238, 223, 204) ANTIQUEWHITE3 = RGB(205, 192, 176) ANTIQUEWHITE4 = RGB(139, 131, 120) AQUA = RGB(0, 255, 255) AQUAMARINE1 = RGB(127, 255, 212) AQUAMARINE2 = RGB(118, 238, 198) AQUAMARINE3 = RGB(102, 205, 170) AQUAMARINE4 = RGB(69, 139, 116) AZURE1 = RGB(240, 255, 255) AZURE2 = RGB(224, 238, 238) AZURE3 = RGB(193, 205, 205) AZURE4 = RGB(131, 139, 139) BANANA = RGB(227, 207, 87) BEIGE = RGB(245, 245, 220) BISQUE1 = RGB(255, 228, 196) BISQUE2 = RGB(238, 213, 183) BISQUE3 = RGB(205, 183, 158) BISQUE4 = RGB(139, 125, 107) BLACK = RGB(0, 0, 0) BLANCHEDALMOND = RGB(255, 235, 205) BLUE = RGB(0, 0, 255) BLUE2 = RGB(0, 0, 238) BLUE3 = RGB(0, 0, 205) BLUE4 = RGB(0, 0, 139) BLUEVIOLET = RGB(138, 43, 226) BRICK = RGB(156, 102, 31) BROWN = RGB(165, 42, 42) BROWN1 = RGB(255, 64, 64) BROWN2 = RGB(238, 59, 59) BROWN3 = RGB(205, 51, 51) BROWN4 = RGB(139, 35, 35) BURLYWOOD = RGB(222, 184, 135) BURLYWOOD1 = RGB(255, 211, 155) BURLYWOOD2 = RGB(238, 197, 145) BURLYWOOD3 = RGB(205, 170, 125) BURLYWOOD4 = RGB(139, 115, 85) BURNTSIENNA = RGB(138, 54, 15) BURNTUMBER = RGB(138, 51, 36) CADETBLUE = RGB(95, 158, 160) CADETBLUE1 = RGB(152, 245, 255) CADETBLUE2 = RGB(142, 229, 238) CADETBLUE3 = RGB(122, 197, 205) CADETBLUE4 = RGB(83, 134, 139) CADMIUMORANGE = RGB(255, 97, 3) CADMIUMYELLOW = RGB(255, 153, 18) CARROT = RGB(237, 145, 33) CHARTREUSE1 = RGB(127, 255, 0) CHARTREUSE2 = RGB(118, 238, 0) CHARTREUSE3 = RGB(102, 205, 0) CHARTREUSE4 = RGB(69, 139, 0) CHOCOLATE = RGB(210, 105, 30) CHOCOLATE1 = RGB(255, 127, 36) CHOCOLATE2 = RGB(238, 118, 33) CHOCOLATE3 = RGB(205, 102, 29) CHOCOLATE4 = RGB(139, 69, 19) COBALT = RGB(61, 89, 171) COBALTGREEN = RGB(61, 145, 64) COLDGREY = RGB(128, 138, 135) CORAL = RGB(255, 127, 80) CORAL1 = RGB(255, 114, 86) CORAL2 = RGB(238, 106, 80) CORAL3 = RGB(205, 91, 69) CORAL4 = RGB(139, 62, 47) CORNFLOWERBLUE = RGB(100, 149, 237) CORNSILK1 = RGB(255, 248, 220) CORNSILK2 = RGB(238, 232, 205) CORNSILK3 = RGB(205, 200, 177) CORNSILK4 = RGB(139, 136, 120) CRIMSON = RGB(220, 20, 60) CYAN2 = RGB(0, 238, 238) CYAN3 = RGB(0, 205, 205) CYAN4 = RGB(0, 139, 139) DARKGOLDENROD = RGB(184, 134, 11) DARKGOLDENROD1 = RGB(255, 185, 15) DARKGOLDENROD2 = RGB(238, 173, 14) DARKGOLDENROD3 = RGB(205, 149, 12) DARKGOLDENROD4 = RGB(139, 101, 8) DARKGRAY = RGB(169, 169, 169) DARKGREEN = RGB(0, 100, 0) DARKKHAKI = RGB(189, 183, 107) DARKOLIVEGREEN = RGB(85, 107, 47) DARKOLIVEGREEN1 = RGB(202, 255, 112) DARKOLIVEGREEN2 = RGB(188, 238, 104) DARKOLIVEGREEN3 = RGB(162, 205, 90) DARKOLIVEGREEN4 = RGB(110, 139, 61) DARKORANGE = RGB(255, 140, 0) DARKORANGE1 = RGB(255, 127, 0) DARKORANGE2 = RGB(238, 118, 0) DARKORANGE3 = RGB(205, 102, 0) DARKORANGE4 = RGB(139, 69, 0) DARKORCHID = RGB(153, 50, 204) DARKORCHID1 = RGB(191, 62, 255) DARKORCHID2 = RGB(178, 58, 238) DARKORCHID3 = RGB(154, 50, 205) DARKORCHID4 = RGB(104, 34, 139) DARKSALMON = RGB(233, 150, 122) DARKSEAGREEN = RGB(143, 188, 143) DARKSEAGREEN1 = RGB(193, 255, 193) DARKSEAGREEN2 = RGB(180, 238, 180) DARKSEAGREEN3 = RGB(155, 205, 155) DARKSEAGREEN4 = RGB(105, 139, 105) DARKSLATEBLUE = RGB(72, 61, 139) DARKSLATEGRAY = RGB(47, 79, 79) DARKSLATEGRAY1 = RGB(151, 255, 255) DARKSLATEGRAY2 = RGB(141, 238, 238) DARKSLATEGRAY3 = RGB(121, 205, 205) DARKSLATEGRAY4 = RGB(82, 139, 139) DARKTURQUOISE = RGB(0, 206, 209) DARKVIOLET = RGB(148, 0, 211) DEEPPINK1 = RGB(255, 20, 147) DEEPPINK2 = RGB(238, 18, 137) DEEPPINK3 = RGB(205, 16, 118) DEEPPINK4 = RGB(139, 10, 80) DEEPSKYBLUE1 = RGB(0, 191, 255) DEEPSKYBLUE2 = RGB(0, 178, 238) DEEPSKYBLUE3 = RGB(0, 154, 205) DEEPSKYBLUE4 = RGB(0, 104, 139) DIMGRAY = RGB(105, 105, 105) DIMGRAY = RGB(105, 105, 105) DODGERBLUE1 = RGB(30, 144, 255) DODGERBLUE2 = RGB(28, 134, 238) DODGERBLUE3 = RGB(24, 116, 205) DODGERBLUE4 = RGB(16, 78, 139) EGGSHELL = RGB(252, 230, 201) EMERALDGREEN = RGB(0, 201, 87) FIREBRICK = RGB(178, 34, 34) FIREBRICK1 = RGB(255, 48, 48) FIREBRICK2 = RGB(238, 44, 44) FIREBRICK3 = RGB(205, 38, 38) FIREBRICK4 = RGB(139, 26, 26) FLESH = RGB(255, 125, 64) FLORALWHITE = RGB(255, 250, 240) FORESTGREEN = RGB(34, 139, 34) GAINSBORO = RGB(220, 220, 220) GHOSTWHITE = RGB(248, 248, 255) GOLD1 = RGB(255, 215, 0) GOLD2 = RGB(238, 201, 0) GOLD3 = RGB(205, 173, 0) GOLD4 = RGB(139, 117, 0) GOLDENROD = RGB(218, 165, 32) GOLDENROD1 = RGB(255, 193, 37) GOLDENROD2 = RGB(238, 180, 34) GOLDENROD3 = RGB(205, 155, 29) GOLDENROD4 = RGB(139, 105, 20) GRAY = RGB(128, 128, 128) GRAY1 = RGB(3, 3, 3) GRAY10 = RGB(26, 26, 26) GRAY11 = RGB(28, 28, 28) GRAY12 = RGB(31, 31, 31) GRAY13 = RGB(33, 33, 33) GRAY14 = RGB(36, 36, 36) GRAY15 = RGB(38, 38, 38) GRAY16 = RGB(41, 41, 41) GRAY17 = RGB(43, 43, 43) GRAY18 = RGB(46, 46, 46) GRAY19 = RGB(48, 48, 48) GRAY2 = RGB(5, 5, 5) GRAY20 = RGB(51, 51, 51) GRAY21 = RGB(54, 54, 54) GRAY22 = RGB(56, 56, 56) GRAY23 = RGB(59, 59, 59) GRAY24 = RGB(61, 61, 61) GRAY25 = RGB(64, 64, 64) GRAY26 = RGB(66, 66, 66) GRAY27 = RGB(69, 69, 69) GRAY28 = RGB(71, 71, 71) GRAY29 = RGB(74, 74, 74) GRAY3 = RGB(8, 8, 8) GRAY30 = RGB(77, 77, 77) GRAY31 = RGB(79, 79, 79) GRAY32 = RGB(82, 82, 82) GRAY33 = RGB(84, 84, 84) GRAY34 = RGB(87, 87, 87) GRAY35 = RGB(89, 89, 89) GRAY36 = RGB(92, 92, 92) GRAY37 = RGB(94, 94, 94) GRAY38 = RGB(97, 97, 97) GRAY39 = RGB(99, 99, 99) GRAY4 = RGB(10, 10, 10) GRAY40 = RGB(102, 102, 102) GRAY42 = RGB(107, 107, 107) GRAY43 = RGB(110, 110, 110) GRAY44 = RGB(112, 112, 112) GRAY45 = RGB(115, 115, 115) GRAY46 = RGB(117, 117, 117) GRAY47 = RGB(120, 120, 120) GRAY48 = RGB(122, 122, 122) GRAY49 = RGB(125, 125, 125) GRAY5 = RGB(13, 13, 13) GRAY50 = RGB(127, 127, 127) GRAY51 = RGB(130, 130, 130) GRAY52 = RGB(133, 133, 133) GRAY53 = RGB(135, 135, 135) GRAY54 = RGB(138, 138, 138) GRAY55 = RGB(140, 140, 140) GRAY56 = RGB(143, 143, 143) GRAY57 = RGB(145, 145, 145) GRAY58 = RGB(148, 148, 148) GRAY59 = RGB(150, 150, 150) GRAY6 = RGB(15, 15, 15) GRAY60 = RGB(153, 153, 153) GRAY61 = RGB(156, 156, 156) GRAY62 = RGB(158, 158, 158) GRAY63 = RGB(161, 161, 161) GRAY64 = RGB(163, 163, 163) GRAY65 = RGB(166, 166, 166) GRAY66 = RGB(168, 168, 168) GRAY67 = RGB(171, 171, 171) GRAY68 = RGB(173, 173, 173) GRAY69 = RGB(176, 176, 176) GRAY7 = RGB(18, 18, 18) GRAY70 = RGB(179, 179, 179) GRAY71 = RGB(181, 181, 181) GRAY72 = RGB(184, 184, 184) GRAY73 = RGB(186, 186, 186) GRAY74 = RGB(189, 189, 189) GRAY75 = RGB(191, 191, 191) GRAY76 = RGB(194, 194, 194) GRAY77 = RGB(196, 196, 196) GRAY78 = RGB(199, 199, 199) GRAY79 = RGB(201, 201, 201) GRAY8 = RGB(20, 20, 20) GRAY80 = RGB(204, 204, 204) GRAY81 = RGB(207, 207, 207) GRAY82 = RGB(209, 209, 209) GRAY83 = RGB(212, 212, 212) GRAY84 = RGB(214, 214, 214) GRAY85 = RGB(217, 217, 217) GRAY86 = RGB(219, 219, 219) GRAY87 = RGB(222, 222, 222) GRAY88 = RGB(224, 224, 224) GRAY89 = RGB(227, 227, 227) GRAY9 = RGB(23, 23, 23) GRAY90 = RGB(229, 229, 229) GRAY91 = RGB(232, 232, 232) GRAY92 = RGB(235, 235, 235) GRAY93 = RGB(237, 237, 237) GRAY94 = RGB(240, 240, 240) GRAY95 = RGB(242, 242, 242) GRAY97 = RGB(247, 247, 247) GRAY98 = RGB(250, 250, 250) GRAY99 = RGB(252, 252, 252) GREEN = RGB(0, 128, 0) GREEN1 = RGB(0, 255, 0) GREEN2 = RGB(0, 238, 0) GREEN3 = RGB(0, 205, 0) GREEN4 = RGB(0, 139, 0) GREENYELLOW = RGB(173, 255, 47) HONEYDEW1 = RGB(240, 255, 240) HONEYDEW2 = RGB(224, 238, 224) HONEYDEW3 = RGB(193, 205, 193) HONEYDEW4 = RGB(131, 139, 131) HOTPINK = RGB(255, 105, 180) HOTPINK1 = RGB(255, 110, 180) HOTPINK2 = RGB(238, 106, 167) HOTPINK3 = RGB(205, 96, 144) HOTPINK4 = RGB(139, 58, 98) INDIANRED = RGB(176, 23, 31) INDIANRED = RGB(205, 92, 92) INDIANRED1 = RGB(255, 106, 106) INDIANRED2 = RGB(238, 99, 99) INDIANRED3 = RGB(205, 85, 85) INDIANRED4 = RGB(139, 58, 58) INDIGO = RGB(75, 0, 130) IVORY1 = RGB(255, 255, 240) IVORY2 = RGB(238, 238, 224) IVORY3 = RGB(205, 205, 193) IVORY4 = RGB(139, 139, 131) IVORYBLACK = RGB(41, 36, 33) KHAKI = RGB(240, 230, 140) KHAKI1 = RGB(255, 246, 143) KHAKI2 = RGB(238, 230, 133) KHAKI3 = RGB(205, 198, 115) KHAKI4 = RGB(139, 134, 78) LAVENDER = RGB(230, 230, 250) LAVENDERBLUSH1 = RGB(255, 240, 245) LAVENDERBLUSH2 = RGB(238, 224, 229) LAVENDERBLUSH3 = RGB(205, 193, 197) LAVENDERBLUSH4 = RGB(139, 131, 134) LAWNGREEN = RGB(124, 252, 0) LEMONCHIFFON1 = RGB(255, 250, 205) LEMONCHIFFON2 = RGB(238, 233, 191) LEMONCHIFFON3 = RGB(205, 201, 165) LEMONCHIFFON4 = RGB(139, 137, 112) LIGHTBLUE = RGB(173, 216, 230) LIGHTBLUE1 = RGB(191, 239, 255) LIGHTBLUE2 = RGB(178, 223, 238) LIGHTBLUE3 = RGB(154, 192, 205) LIGHTBLUE4 = RGB(104, 131, 139) LIGHTCORAL = RGB(240, 128, 128) LIGHTCYAN1 = RGB(224, 255, 255) LIGHTCYAN2 = RGB(209, 238, 238) LIGHTCYAN3 = RGB(180, 205, 205) LIGHTCYAN4 = RGB(122, 139, 139) LIGHTGOLDENROD1 = RGB(255, 236, 139) LIGHTGOLDENROD2 = RGB(238, 220, 130) LIGHTGOLDENROD3 = RGB(205, 190, 112) LIGHTGOLDENROD4 = RGB(139, 129, 76) LIGHTGOLDENRODYELLOW = RGB(250, 250, 210) LIGHTGREY = RGB(211, 211, 211) LIGHTPINK = RGB(255, 182, 193) LIGHTPINK1 = RGB(255, 174, 185) LIGHTPINK2 = RGB(238, 162, 173) LIGHTPINK3 = RGB(205, 140, 149) LIGHTPINK4 = RGB(139, 95, 101) LIGHTSALMON1 = RGB(255, 160, 122) LIGHTSALMON2 = RGB(238, 149, 114) LIGHTSALMON3 = RGB(205, 129, 98) LIGHTSALMON4 = RGB(139, 87, 66) LIGHTSEAGREEN = RGB(32, 178, 170) LIGHTSKYBLUE = RGB(135, 206, 250) LIGHTSKYBLUE1 = RGB(176, 226, 255) LIGHTSKYBLUE2 = RGB(164, 211, 238) LIGHTSKYBLUE3 = RGB(141, 182, 205) LIGHTSKYBLUE4 = RGB(96, 123, 139) LIGHTSLATEBLUE = RGB(132, 112, 255) LIGHTSLATEGRAY = RGB(119, 136, 153) LIGHTSTEELBLUE = RGB(176, 196, 222) LIGHTSTEELBLUE1 = RGB(202, 225, 255) LIGHTSTEELBLUE2 = RGB(188, 210, 238) LIGHTSTEELBLUE3 = RGB(162, 181, 205) LIGHTSTEELBLUE4 = RGB(110, 123, 139) LIGHTYELLOW1 = RGB(255, 255, 224) LIGHTYELLOW2 = RGB(238, 238, 209) LIGHTYELLOW3 = RGB(205, 205, 180) LIGHTYELLOW4 = RGB(139, 139, 122) LIMEGREEN = RGB(50, 205, 50) LINEN = RGB(250, 240, 230) MAGENTA = RGB(255, 0, 255) MAGENTA2 = RGB(238, 0, 238) MAGENTA3 = RGB(205, 0, 205) MAGENTA4 = RGB(139, 0, 139) MANGANESEBLUE = RGB(3, 168, 158) MAROON = RGB(128, 0, 0) MAROON1 = RGB(255, 52, 179) MAROON2 = RGB(238, 48, 167) MAROON3 = RGB(205, 41, 144) MAROON4 = RGB(139, 28, 98) MEDIUMORCHID = RGB(186, 85, 211) MEDIUMORCHID1 = RGB(224, 102, 255) MEDIUMORCHID2 = RGB(209, 95, 238) MEDIUMORCHID3 = RGB(180, 82, 205) MEDIUMORCHID4 = RGB(122, 55, 139) MEDIUMPURPLE = RGB(147, 112, 219) MEDIUMPURPLE1 = RGB(171, 130, 255) MEDIUMPURPLE2 = RGB(159, 121, 238) MEDIUMPURPLE3 = RGB(137, 104, 205) MEDIUMPURPLE4 = RGB(93, 71, 139) MEDIUMSEAGREEN = RGB(60, 179, 113) MEDIUMSLATEBLUE = RGB(123, 104, 238) MEDIUMSPRINGGREEN = RGB(0, 250, 154) MEDIUMTURQUOISE = RGB(72, 209, 204) MEDIUMVIOLETRED = RGB(199, 21, 133) MELON = RGB(227, 168, 105) MIDNIGHTBLUE = RGB(25, 25, 112) MINT = RGB(189, 252, 201) MINTCREAM = RGB(245, 255, 250) MISTYROSE1 = RGB(255, 228, 225) MISTYROSE2 = RGB(238, 213, 210) MISTYROSE3 = RGB(205, 183, 181) MISTYROSE4 = RGB(139, 125, 123) MOCCASIN = RGB(255, 228, 181) NAVAJOWHITE1 = RGB(255, 222, 173) NAVAJOWHITE2 = RGB(238, 207, 161) NAVAJOWHITE3 = RGB(205, 179, 139) NAVAJOWHITE4 = RGB(139, 121, 94) NAVY = RGB(0, 0, 128) OLDLACE = RGB(253, 245, 230) OLIVE = RGB(128, 128, 0) OLIVEDRAB = RGB(107, 142, 35) OLIVEDRAB1 = RGB(192, 255, 62) OLIVEDRAB2 = RGB(179, 238, 58) OLIVEDRAB3 = RGB(154, 205, 50) OLIVEDRAB4 = RGB(105, 139, 34) ORANGE = RGB(255, 128, 0) ORANGE1 = RGB(255, 165, 0) ORANGE2 = RGB(238, 154, 0) ORANGE3 = RGB(205, 133, 0) ORANGE4 = RGB(139, 90, 0) ORANGERED1 = RGB(255, 69, 0) ORANGERED2 = RGB(238, 64, 0) ORANGERED3 = RGB(205, 55, 0) ORANGERED4 = RGB(139, 37, 0) ORCHID = RGB(218, 112, 214) ORCHID1 = RGB(255, 131, 250) ORCHID2 = RGB(238, 122, 233) ORCHID3 = RGB(205, 105, 201) ORCHID4 = RGB(139, 71, 137) PALEGOLDENROD = RGB(238, 232, 170) PALEGREEN = RGB(152, 251, 152) PALEGREEN1 = RGB(154, 255, 154) PALEGREEN2 = RGB(144, 238, 144) PALEGREEN3 = RGB(124, 205, 124) PALEGREEN4 = RGB(84, 139, 84) PALETURQUOISE1 = RGB(187, 255, 255) PALETURQUOISE2 = RGB(174, 238, 238) PALETURQUOISE3 = RGB(150, 205, 205) PALETURQUOISE4 = RGB(102, 139, 139) PALEVIOLETRED = RGB(219, 112, 147) PALEVIOLETRED1 = RGB(255, 130, 171) PALEVIOLETRED2 = RGB(238, 121, 159) PALEVIOLETRED3 = RGB(205, 104, 137) PALEVIOLETRED4 = RGB(139, 71, 93) PAPAYAWHIP = RGB(255, 239, 213) PEACHPUFF1 = RGB(255, 218, 185) PEACHPUFF2 = RGB(238, 203, 173) PEACHPUFF3 = RGB(205, 175, 149) PEACHPUFF4 = RGB(139, 119, 101) PEACOCK = RGB(51, 161, 201) PINK = RGB(255, 192, 203) PINK1 = RGB(255, 181, 197) PINK2 = RGB(238, 169, 184) PINK3 = RGB(205, 145, 158) PINK4 = RGB(139, 99, 108) PLUM = RGB(221, 160, 221) PLUM1 = RGB(255, 187, 255) PLUM2 = RGB(238, 174, 238) PLUM3 = RGB(205, 150, 205) PLUM4 = RGB(139, 102, 139) POWDERBLUE = RGB(176, 224, 230) PURPLE = RGB(128, 0, 128) PURPLE1 = RGB(155, 48, 255) PURPLE2 = RGB(145, 44, 238) PURPLE3 = RGB(125, 38, 205) PURPLE4 = RGB(85, 26, 139) RASPBERRY = RGB(135, 38, 87) RAWSIENNA = RGB(199, 97, 20) RED1 = RGB(255, 0, 0) RED2 = RGB(238, 0, 0) RED3 = RGB(205, 0, 0) RED4 = RGB(139, 0, 0) ROSYBROWN = RGB(188, 143, 143) ROSYBROWN1 = RGB(255, 193, 193) ROSYBROWN2 = RGB(238, 180, 180) ROSYBROWN3 = RGB(205, 155, 155) ROSYBROWN4 = RGB(139, 105, 105) ROYALBLUE = RGB(65, 105, 225) ROYALBLUE1 = RGB(72, 118, 255) ROYALBLUE2 = RGB(67, 110, 238) ROYALBLUE3 = RGB(58, 95, 205) ROYALBLUE4 = RGB(39, 64, 139) SALMON = RGB(250, 128, 114) SALMON1 = RGB(255, 140, 105) SALMON2 = RGB(238, 130, 98) SALMON3 = RGB(205, 112, 84) SALMON4 = RGB(139, 76, 57) SANDYBROWN = RGB(244, 164, 96) SAPGREEN = RGB(48, 128, 20) SEAGREEN1 = RGB(84, 255, 159) SEAGREEN2 = RGB(78, 238, 148) SEAGREEN3 = RGB(67, 205, 128) SEAGREEN4 = RGB(46, 139, 87) SEASHELL1 = RGB(255, 245, 238) SEASHELL2 = RGB(238, 229, 222) SEASHELL3 = RGB(205, 197, 191) SEASHELL4 = RGB(139, 134, 130) SEPIA = RGB(94, 38, 18) SGIBEET = RGB(142, 56, 142) SGIBRIGHTGRAY = RGB(197, 193, 170) SGICHARTREUSE = RGB(113, 198, 113) SGIDARKGRAY = RGB(85, 85, 85) SGIGRAY12 = RGB(30, 30, 30) SGIGRAY16 = RGB(40, 40, 40) SGIGRAY32 = RGB(81, 81, 81) SGIGRAY36 = RGB(91, 91, 91) SGIGRAY52 = RGB(132, 132, 132) SGIGRAY56 = RGB(142, 142, 142) SGIGRAY72 = RGB(183, 183, 183) SGIGRAY76 = RGB(193, 193, 193) SGIGRAY92 = RGB(234, 234, 234) SGIGRAY96 = RGB(244, 244, 244) SGILIGHTBLUE = RGB(125, 158, 192) SGILIGHTGRAY = RGB(170, 170, 170) SGIOLIVEDRAB = RGB(142, 142, 56) SGISALMON = RGB(198, 113, 113) SGISLATEBLUE = RGB(113, 113, 198) SGITEAL = RGB(56, 142, 142) SIENNA = RGB(160, 82, 45) SIENNA1 = RGB(255, 130, 71) SIENNA2 = RGB(238, 121, 66) SIENNA3 = RGB(205, 104, 57) SIENNA4 = RGB(139, 71, 38) SILVER = RGB(192, 192, 192) SKYBLUE = RGB(135, 206, 235) SKYBLUE1 = RGB(135, 206, 255) SKYBLUE2 = RGB(126, 192, 238) SKYBLUE3 = RGB(108, 166, 205) SKYBLUE4 = RGB(74, 112, 139) SLATEBLUE = RGB(106, 90, 205) SLATEBLUE1 = RGB(131, 111, 255) SLATEBLUE2 = RGB(122, 103, 238) SLATEBLUE3 = RGB(105, 89, 205) SLATEBLUE4 = RGB(71, 60, 139) SLATEGRAY = RGB(112, 128, 144) SLATEGRAY1 = RGB(198, 226, 255) SLATEGRAY2 = RGB(185, 211, 238) SLATEGRAY3 = RGB(159, 182, 205) SLATEGRAY4 = RGB(108, 123, 139) SNOW1 = RGB(255, 250, 250) SNOW2 = RGB(238, 233, 233) SNOW3 = RGB(205, 201, 201) SNOW4 = RGB(139, 137, 137) SPRINGGREEN = RGB(0, 255, 127) SPRINGGREEN1 = RGB(0, 238, 118) SPRINGGREEN2 = RGB(0, 205, 102) SPRINGGREEN3 = RGB(0, 139, 69) STEELBLUE = RGB(70, 130, 180) STEELBLUE1 = RGB(99, 184, 255) STEELBLUE2 = RGB(92, 172, 238) STEELBLUE3 = RGB(79, 148, 205) STEELBLUE4 = RGB(54, 100, 139) TAN = RGB(210, 180, 140) TAN1 = RGB(255, 165, 79) TAN2 = RGB(238, 154, 73) TAN3 = RGB(205, 133, 63) TAN4 = RGB(139, 90, 43) TEAL = RGB(0, 128, 128) THISTLE = RGB(216, 191, 216) THISTLE1 = RGB(255, 225, 255) THISTLE2 = RGB(238, 210, 238) THISTLE3 = RGB(205, 181, 205) THISTLE4 = RGB(139, 123, 139) TOMATO1 = RGB(255, 99, 71) TOMATO2 = RGB(238, 92, 66) TOMATO3 = RGB(205, 79, 57) TOMATO4 = RGB(139, 54, 38) TURQUOISE = RGB(64, 224, 208) TURQUOISE1 = RGB(0, 245, 255) TURQUOISE2 = RGB(0, 229, 238) TURQUOISE3 = RGB(0, 197, 205) TURQUOISE4 = RGB(0, 134, 139) TURQUOISEBLUE = RGB(0, 199, 140) VIOLET = RGB(238, 130, 238) VIOLETRED = RGB(208, 32, 144) VIOLETRED1 = RGB(255, 62, 150) VIOLETRED2 = RGB(238, 58, 140) VIOLETRED3 = RGB(205, 50, 120) VIOLETRED4 = RGB(139, 34, 82) WARMGREY = RGB(128, 128, 105) WHEAT = RGB(245, 222, 179) WHEAT1 = RGB(255, 231, 186) WHEAT2 = RGB(238, 216, 174) WHEAT3 = RGB(205, 186, 150) WHEAT4 = RGB(139, 126, 102) WHITE = RGB(255, 255, 255) WHITESMOKE = RGB(245, 245, 245) WHITESMOKE = RGB(245, 245, 245) YELLOW1 = RGB(255, 255, 0) YELLOW2 = RGB(238, 238, 0) YELLOW3 = RGB(205, 205, 0) YELLOW4 = RGB(139, 139, 0) #Add colors to colors dictionary colors[&#39;aliceblue&#39;] = ALICEBLUE colors[&#39;antiquewhite&#39;] = ANTIQUEWHITE colors[&#39;antiquewhite1&#39;] = ANTIQUEWHITE1 colors[&#39;antiquewhite2&#39;] = ANTIQUEWHITE2 colors[&#39;antiquewhite3&#39;] = ANTIQUEWHITE3 colors[&#39;antiquewhite4&#39;] = ANTIQUEWHITE4 colors[&#39;aqua&#39;] = AQUA colors[&#39;aquamarine1&#39;] = AQUAMARINE1 colors[&#39;aquamarine2&#39;] = AQUAMARINE2 colors[&#39;aquamarine3&#39;] = AQUAMARINE3 colors[&#39;aquamarine4&#39;] = AQUAMARINE4 colors[&#39;azure1&#39;] = AZURE1 colors[&#39;azure2&#39;] = AZURE2 colors[&#39;azure3&#39;] = AZURE3 colors[&#39;azure4&#39;] = AZURE4 colors[&#39;banana&#39;] = BANANA colors[&#39;beige&#39;] = BEIGE colors[&#39;bisque1&#39;] = BISQUE1 colors[&#39;bisque2&#39;] = BISQUE2 colors[&#39;bisque3&#39;] = BISQUE3 colors[&#39;bisque4&#39;] = BISQUE4 colors[&#39;black&#39;] = BLACK colors[&#39;blanchedalmond&#39;] = BLANCHEDALMOND colors[&#39;blue&#39;] = BLUE colors[&#39;blue2&#39;] = BLUE2 colors[&#39;blue3&#39;] = BLUE3 colors[&#39;blue4&#39;] = BLUE4 colors[&#39;blueviolet&#39;] = BLUEVIOLET colors[&#39;brick&#39;] = BRICK colors[&#39;brown&#39;] = BROWN colors[&#39;brown1&#39;] = BROWN1 colors[&#39;brown2&#39;] = BROWN2 colors[&#39;brown3&#39;] = BROWN3 colors[&#39;brown4&#39;] = BROWN4 colors[&#39;burlywood&#39;] = BURLYWOOD colors[&#39;burlywood1&#39;] = BURLYWOOD1 colors[&#39;burlywood2&#39;] = BURLYWOOD2 colors[&#39;burlywood3&#39;] = BURLYWOOD3 colors[&#39;burlywood4&#39;] = BURLYWOOD4 colors[&#39;burntsienna&#39;] = BURNTSIENNA colors[&#39;burntumber&#39;] = BURNTUMBER colors[&#39;cadetblue&#39;] = CADETBLUE colors[&#39;cadetblue1&#39;] = CADETBLUE1 colors[&#39;cadetblue2&#39;] = CADETBLUE2 colors[&#39;cadetblue3&#39;] = CADETBLUE3 colors[&#39;cadetblue4&#39;] = CADETBLUE4 colors[&#39;cadmiumorange&#39;] = CADMIUMORANGE colors[&#39;cadmiumyellow&#39;] = CADMIUMYELLOW colors[&#39;carrot&#39;] = CARROT colors[&#39;chartreuse1&#39;] = CHARTREUSE1 colors[&#39;chartreuse2&#39;] = CHARTREUSE2 colors[&#39;chartreuse3&#39;] = CHARTREUSE3 colors[&#39;chartreuse4&#39;] = CHARTREUSE4 colors[&#39;chocolate&#39;] = CHOCOLATE colors[&#39;chocolate1&#39;] = CHOCOLATE1 colors[&#39;chocolate2&#39;] = CHOCOLATE2 colors[&#39;chocolate3&#39;] = CHOCOLATE3 colors[&#39;chocolate4&#39;] = CHOCOLATE4 colors[&#39;cobalt&#39;] = COBALT colors[&#39;cobaltgreen&#39;] = COBALTGREEN colors[&#39;coldgrey&#39;] = COLDGREY colors[&#39;coral&#39;] = CORAL colors[&#39;coral1&#39;] = CORAL1 colors[&#39;coral2&#39;] = CORAL2 colors[&#39;coral3&#39;] = CORAL3 colors[&#39;coral4&#39;] = CORAL4 colors[&#39;cornflowerblue&#39;] = CORNFLOWERBLUE colors[&#39;cornsilk1&#39;] = CORNSILK1 colors[&#39;cornsilk2&#39;] = CORNSILK2 colors[&#39;cornsilk3&#39;] = CORNSILK3 colors[&#39;cornsilk4&#39;] = CORNSILK4 colors[&#39;crimson&#39;] = CRIMSON colors[&#39;cyan2&#39;] = CYAN2 colors[&#39;cyan3&#39;] = CYAN3 colors[&#39;cyan4&#39;] = CYAN4 colors[&#39;darkgoldenrod&#39;] = DARKGOLDENROD colors[&#39;darkgoldenrod1&#39;] = DARKGOLDENROD1 colors[&#39;darkgoldenrod2&#39;] = DARKGOLDENROD2 colors[&#39;darkgoldenrod3&#39;] = DARKGOLDENROD3 colors[&#39;darkgoldenrod4&#39;] = DARKGOLDENROD4 colors[&#39;darkgray&#39;] = DARKGRAY colors[&#39;darkgreen&#39;] = DARKGREEN colors[&#39;darkkhaki&#39;] = DARKKHAKI colors[&#39;darkolivegreen&#39;] = DARKOLIVEGREEN colors[&#39;darkolivegreen1&#39;] = DARKOLIVEGREEN1 colors[&#39;darkolivegreen2&#39;] = DARKOLIVEGREEN2 colors[&#39;darkolivegreen3&#39;] = DARKOLIVEGREEN3 colors[&#39;darkolivegreen4&#39;] = DARKOLIVEGREEN4 colors[&#39;darkorange&#39;] = DARKORANGE colors[&#39;darkorange1&#39;] = DARKORANGE1 colors[&#39;darkorange2&#39;] = DARKORANGE2 colors[&#39;darkorange3&#39;] = DARKORANGE3 colors[&#39;darkorange4&#39;] = DARKORANGE4 colors[&#39;darkorchid&#39;] = DARKORCHID colors[&#39;darkorchid1&#39;] = DARKORCHID1 colors[&#39;darkorchid2&#39;] = DARKORCHID2 colors[&#39;darkorchid3&#39;] = DARKORCHID3 colors[&#39;darkorchid4&#39;] = DARKORCHID4 colors[&#39;darksalmon&#39;] = DARKSALMON colors[&#39;darkseagreen&#39;] = DARKSEAGREEN colors[&#39;darkseagreen1&#39;] = DARKSEAGREEN1 colors[&#39;darkseagreen2&#39;] = DARKSEAGREEN2 colors[&#39;darkseagreen3&#39;] = DARKSEAGREEN3 colors[&#39;darkseagreen4&#39;] = DARKSEAGREEN4 colors[&#39;darkslateblue&#39;] = DARKSLATEBLUE colors[&#39;darkslategray&#39;] = DARKSLATEGRAY colors[&#39;darkslategray1&#39;] = DARKSLATEGRAY1 colors[&#39;darkslategray2&#39;] = DARKSLATEGRAY2 colors[&#39;darkslategray3&#39;] = DARKSLATEGRAY3 colors[&#39;darkslategray4&#39;] = DARKSLATEGRAY4 colors[&#39;darkturquoise&#39;] = DARKTURQUOISE colors[&#39;darkviolet&#39;] = DARKVIOLET colors[&#39;deeppink1&#39;] = DEEPPINK1 colors[&#39;deeppink2&#39;] = DEEPPINK2 colors[&#39;deeppink3&#39;] = DEEPPINK3 colors[&#39;deeppink4&#39;] = DEEPPINK4 colors[&#39;deepskyblue1&#39;] = DEEPSKYBLUE1 colors[&#39;deepskyblue2&#39;] = DEEPSKYBLUE2 colors[&#39;deepskyblue3&#39;] = DEEPSKYBLUE3 colors[&#39;deepskyblue4&#39;] = DEEPSKYBLUE4 colors[&#39;dimgray&#39;] = DIMGRAY colors[&#39;dimgray&#39;] = DIMGRAY colors[&#39;dodgerblue1&#39;] = DODGERBLUE1 colors[&#39;dodgerblue2&#39;] = DODGERBLUE2 colors[&#39;dodgerblue3&#39;] = DODGERBLUE3 colors[&#39;dodgerblue4&#39;] = DODGERBLUE4 colors[&#39;eggshell&#39;] = EGGSHELL colors[&#39;emeraldgreen&#39;] = EMERALDGREEN colors[&#39;firebrick&#39;] = FIREBRICK colors[&#39;firebrick1&#39;] = FIREBRICK1 colors[&#39;firebrick2&#39;] = FIREBRICK2 colors[&#39;firebrick3&#39;] = FIREBRICK3 colors[&#39;firebrick4&#39;] = FIREBRICK4 colors[&#39;flesh&#39;] = FLESH colors[&#39;floralwhite&#39;] = FLORALWHITE colors[&#39;forestgreen&#39;] = FORESTGREEN colors[&#39;gainsboro&#39;] = GAINSBORO colors[&#39;ghostwhite&#39;] = GHOSTWHITE colors[&#39;gold1&#39;] = GOLD1 colors[&#39;gold2&#39;] = GOLD2 colors[&#39;gold3&#39;] = GOLD3 colors[&#39;gold4&#39;] = GOLD4 colors[&#39;goldenrod&#39;] = GOLDENROD colors[&#39;goldenrod1&#39;] = GOLDENROD1 colors[&#39;goldenrod2&#39;] = GOLDENROD2 colors[&#39;goldenrod3&#39;] = GOLDENROD3 colors[&#39;goldenrod4&#39;] = GOLDENROD4 colors[&#39;gray&#39;] = GRAY colors[&#39;gray1&#39;] = GRAY1 colors[&#39;gray10&#39;] = GRAY10 colors[&#39;gray11&#39;] = GRAY11 colors[&#39;gray12&#39;] = GRAY12 colors[&#39;gray13&#39;] = GRAY13 colors[&#39;gray14&#39;] = GRAY14 colors[&#39;gray15&#39;] = GRAY15 colors[&#39;gray16&#39;] = GRAY16 colors[&#39;gray17&#39;] = GRAY17 colors[&#39;gray18&#39;] = GRAY18 colors[&#39;gray19&#39;] = GRAY19 colors[&#39;gray2&#39;] = GRAY2 colors[&#39;gray20&#39;] = GRAY20 colors[&#39;gray21&#39;] = GRAY21 colors[&#39;gray22&#39;] = GRAY22 colors[&#39;gray23&#39;] = GRAY23 colors[&#39;gray24&#39;] = GRAY24 colors[&#39;gray25&#39;] = GRAY25 colors[&#39;gray26&#39;] = GRAY26 colors[&#39;gray27&#39;] = GRAY27 colors[&#39;gray28&#39;] = GRAY28 colors[&#39;gray29&#39;] = GRAY29 colors[&#39;gray3&#39;] = GRAY3 colors[&#39;gray30&#39;] = GRAY30 colors[&#39;gray31&#39;] = GRAY31 colors[&#39;gray32&#39;] = GRAY32 colors[&#39;gray33&#39;] = GRAY33 colors[&#39;gray34&#39;] = GRAY34 colors[&#39;gray35&#39;] = GRAY35 colors[&#39;gray36&#39;] = GRAY36 colors[&#39;gray37&#39;] = GRAY37 colors[&#39;gray38&#39;] = GRAY38 colors[&#39;gray39&#39;] = GRAY39 colors[&#39;gray4&#39;] = GRAY4 colors[&#39;gray40&#39;] = GRAY40 colors[&#39;gray42&#39;] = GRAY42 colors[&#39;gray43&#39;] = GRAY43 colors[&#39;gray44&#39;] = GRAY44 colors[&#39;gray45&#39;] = GRAY45 colors[&#39;gray46&#39;] = GRAY46 colors[&#39;gray47&#39;] = GRAY47 colors[&#39;gray48&#39;] = GRAY48 colors[&#39;gray49&#39;] = GRAY49 colors[&#39;gray5&#39;] = GRAY5 colors[&#39;gray50&#39;] = GRAY50 colors[&#39;gray51&#39;] = GRAY51 colors[&#39;gray52&#39;] = GRAY52 colors[&#39;gray53&#39;] = GRAY53 colors[&#39;gray54&#39;] = GRAY54 colors[&#39;gray55&#39;] = GRAY55 colors[&#39;gray56&#39;] = GRAY56 colors[&#39;gray57&#39;] = GRAY57 colors[&#39;gray58&#39;] = GRAY58 colors[&#39;gray59&#39;] = GRAY59 colors[&#39;gray6&#39;] = GRAY6 colors[&#39;gray60&#39;] = GRAY60 colors[&#39;gray61&#39;] = GRAY61 colors[&#39;gray62&#39;] = GRAY62 colors[&#39;gray63&#39;] = GRAY63 colors[&#39;gray64&#39;] = GRAY64 colors[&#39;gray65&#39;] = GRAY65 colors[&#39;gray66&#39;] = GRAY66 colors[&#39;gray67&#39;] = GRAY67 colors[&#39;gray68&#39;] = GRAY68 colors[&#39;gray69&#39;] = GRAY69 colors[&#39;gray7&#39;] = GRAY7 colors[&#39;gray70&#39;] = GRAY70 colors[&#39;gray71&#39;] = GRAY71 colors[&#39;gray72&#39;] = GRAY72 colors[&#39;gray73&#39;] = GRAY73 colors[&#39;gray74&#39;] = GRAY74 colors[&#39;gray75&#39;] = GRAY75 colors[&#39;gray76&#39;] = GRAY76 colors[&#39;gray77&#39;] = GRAY77 colors[&#39;gray78&#39;] = GRAY78 colors[&#39;gray79&#39;] = GRAY79 colors[&#39;gray8&#39;] = GRAY8 colors[&#39;gray80&#39;] = GRAY80 colors[&#39;gray81&#39;] = GRAY81 colors[&#39;gray82&#39;] = GRAY82 colors[&#39;gray83&#39;] = GRAY83 colors[&#39;gray84&#39;] = GRAY84 colors[&#39;gray85&#39;] = GRAY85 colors[&#39;gray86&#39;] = GRAY86 colors[&#39;gray87&#39;] = GRAY87 colors[&#39;gray88&#39;] = GRAY88 colors[&#39;gray89&#39;] = GRAY89 colors[&#39;gray9&#39;] = GRAY9 colors[&#39;gray90&#39;] = GRAY90 colors[&#39;gray91&#39;] = GRAY91 colors[&#39;gray92&#39;] = GRAY92 colors[&#39;gray93&#39;] = GRAY93 colors[&#39;gray94&#39;] = GRAY94 colors[&#39;gray95&#39;] = GRAY95 colors[&#39;gray97&#39;] = GRAY97 colors[&#39;gray98&#39;] = GRAY98 colors[&#39;gray99&#39;] = GRAY99 colors[&#39;green&#39;] = GREEN colors[&#39;green1&#39;] = GREEN1 colors[&#39;green2&#39;] = GREEN2 colors[&#39;green3&#39;] = GREEN3 colors[&#39;green4&#39;] = GREEN4 colors[&#39;greenyellow&#39;] = GREENYELLOW colors[&#39;honeydew1&#39;] = HONEYDEW1 colors[&#39;honeydew2&#39;] = HONEYDEW2 colors[&#39;honeydew3&#39;] = HONEYDEW3 colors[&#39;honeydew4&#39;] = HONEYDEW4 colors[&#39;hotpink&#39;] = HOTPINK colors[&#39;hotpink1&#39;] = HOTPINK1 colors[&#39;hotpink2&#39;] = HOTPINK2 colors[&#39;hotpink3&#39;] = HOTPINK3 colors[&#39;hotpink4&#39;] = HOTPINK4 colors[&#39;indianred&#39;] = INDIANRED colors[&#39;indianred&#39;] = INDIANRED colors[&#39;indianred1&#39;] = INDIANRED1 colors[&#39;indianred2&#39;] = INDIANRED2 colors[&#39;indianred3&#39;] = INDIANRED3 colors[&#39;indianred4&#39;] = INDIANRED4 colors[&#39;indigo&#39;] = INDIGO colors[&#39;ivory1&#39;] = IVORY1 colors[&#39;ivory2&#39;] = IVORY2 colors[&#39;ivory3&#39;] = IVORY3 colors[&#39;ivory4&#39;] = IVORY4 colors[&#39;ivoryblack&#39;] = IVORYBLACK colors[&#39;khaki&#39;] = KHAKI colors[&#39;khaki1&#39;] = KHAKI1 colors[&#39;khaki2&#39;] = KHAKI2 colors[&#39;khaki3&#39;] = KHAKI3 colors[&#39;khaki4&#39;] = KHAKI4 colors[&#39;lavender&#39;] = LAVENDER colors[&#39;lavenderblush1&#39;] = LAVENDERBLUSH1 colors[&#39;lavenderblush2&#39;] = LAVENDERBLUSH2 colors[&#39;lavenderblush3&#39;] = LAVENDERBLUSH3 colors[&#39;lavenderblush4&#39;] = LAVENDERBLUSH4 colors[&#39;lawngreen&#39;] = LAWNGREEN colors[&#39;lemonchiffon1&#39;] = LEMONCHIFFON1 colors[&#39;lemonchiffon2&#39;] = LEMONCHIFFON2 colors[&#39;lemonchiffon3&#39;] = LEMONCHIFFON3 colors[&#39;lemonchiffon4&#39;] = LEMONCHIFFON4 colors[&#39;lightblue&#39;] = LIGHTBLUE colors[&#39;lightblue1&#39;] = LIGHTBLUE1 colors[&#39;lightblue2&#39;] = LIGHTBLUE2 colors[&#39;lightblue3&#39;] = LIGHTBLUE3 colors[&#39;lightblue4&#39;] = LIGHTBLUE4 colors[&#39;lightcoral&#39;] = LIGHTCORAL colors[&#39;lightcyan1&#39;] = LIGHTCYAN1 colors[&#39;lightcyan2&#39;] = LIGHTCYAN2 colors[&#39;lightcyan3&#39;] = LIGHTCYAN3 colors[&#39;lightcyan4&#39;] = LIGHTCYAN4 colors[&#39;lightgoldenrod1&#39;] = LIGHTGOLDENROD1 colors[&#39;lightgoldenrod2&#39;] = LIGHTGOLDENROD2 colors[&#39;lightgoldenrod3&#39;] = LIGHTGOLDENROD3 colors[&#39;lightgoldenrod4&#39;] = LIGHTGOLDENROD4 colors[&#39;lightgoldenrodyellow&#39;] = LIGHTGOLDENRODYELLOW colors[&#39;lightgrey&#39;] = LIGHTGREY colors[&#39;lightpink&#39;] = LIGHTPINK colors[&#39;lightpink1&#39;] = LIGHTPINK1 colors[&#39;lightpink2&#39;] = LIGHTPINK2 colors[&#39;lightpink3&#39;] = LIGHTPINK3 colors[&#39;lightpink4&#39;] = LIGHTPINK4 colors[&#39;lightsalmon1&#39;] = LIGHTSALMON1 colors[&#39;lightsalmon2&#39;] = LIGHTSALMON2 colors[&#39;lightsalmon3&#39;] = LIGHTSALMON3 colors[&#39;lightsalmon4&#39;] = LIGHTSALMON4 colors[&#39;lightseagreen&#39;] = LIGHTSEAGREEN colors[&#39;lightskyblue&#39;] = LIGHTSKYBLUE colors[&#39;lightskyblue1&#39;] = LIGHTSKYBLUE1 colors[&#39;lightskyblue2&#39;] = LIGHTSKYBLUE2 colors[&#39;lightskyblue3&#39;] = LIGHTSKYBLUE3 colors[&#39;lightskyblue4&#39;] = LIGHTSKYBLUE4 colors[&#39;lightslateblue&#39;] = LIGHTSLATEBLUE colors[&#39;lightslategray&#39;] = LIGHTSLATEGRAY colors[&#39;lightsteelblue&#39;] = LIGHTSTEELBLUE colors[&#39;lightsteelblue1&#39;] = LIGHTSTEELBLUE1 colors[&#39;lightsteelblue2&#39;] = LIGHTSTEELBLUE2 colors[&#39;lightsteelblue3&#39;] = LIGHTSTEELBLUE3 colors[&#39;lightsteelblue4&#39;] = LIGHTSTEELBLUE4 colors[&#39;lightyellow1&#39;] = LIGHTYELLOW1 colors[&#39;lightyellow2&#39;] = LIGHTYELLOW2 colors[&#39;lightyellow3&#39;] = LIGHTYELLOW3 colors[&#39;lightyellow4&#39;] = LIGHTYELLOW4 colors[&#39;limegreen&#39;] = LIMEGREEN colors[&#39;linen&#39;] = LINEN colors[&#39;magenta&#39;] = MAGENTA colors[&#39;magenta2&#39;] = MAGENTA2 colors[&#39;magenta3&#39;] = MAGENTA3 colors[&#39;magenta4&#39;] = MAGENTA4 colors[&#39;manganeseblue&#39;] = MANGANESEBLUE colors[&#39;maroon&#39;] = MAROON colors[&#39;maroon1&#39;] = MAROON1 colors[&#39;maroon2&#39;] = MAROON2 colors[&#39;maroon3&#39;] = MAROON3 colors[&#39;maroon4&#39;] = MAROON4 colors[&#39;mediumorchid&#39;] = MEDIUMORCHID colors[&#39;mediumorchid1&#39;] = MEDIUMORCHID1 colors[&#39;mediumorchid2&#39;] = MEDIUMORCHID2 colors[&#39;mediumorchid3&#39;] = MEDIUMORCHID3 colors[&#39;mediumorchid4&#39;] = MEDIUMORCHID4 colors[&#39;mediumpurple&#39;] = MEDIUMPURPLE colors[&#39;mediumpurple1&#39;] = MEDIUMPURPLE1 colors[&#39;mediumpurple2&#39;] = MEDIUMPURPLE2 colors[&#39;mediumpurple3&#39;] = MEDIUMPURPLE3 colors[&#39;mediumpurple4&#39;] = MEDIUMPURPLE4 colors[&#39;mediumseagreen&#39;] = MEDIUMSEAGREEN colors[&#39;mediumslateblue&#39;] = MEDIUMSLATEBLUE colors[&#39;mediumspringgreen&#39;] = MEDIUMSPRINGGREEN colors[&#39;mediumturquoise&#39;] = MEDIUMTURQUOISE colors[&#39;mediumvioletred&#39;] = MEDIUMVIOLETRED colors[&#39;melon&#39;] = MELON colors[&#39;midnightblue&#39;] = MIDNIGHTBLUE colors[&#39;mint&#39;] = MINT colors[&#39;mintcream&#39;] = MINTCREAM colors[&#39;mistyrose1&#39;] = MISTYROSE1 colors[&#39;mistyrose2&#39;] = MISTYROSE2 colors[&#39;mistyrose3&#39;] = MISTYROSE3 colors[&#39;mistyrose4&#39;] = MISTYROSE4 colors[&#39;moccasin&#39;] = MOCCASIN colors[&#39;navajowhite1&#39;] = NAVAJOWHITE1 colors[&#39;navajowhite2&#39;] = NAVAJOWHITE2 colors[&#39;navajowhite3&#39;] = NAVAJOWHITE3 colors[&#39;navajowhite4&#39;] = NAVAJOWHITE4 colors[&#39;navy&#39;] = NAVY colors[&#39;oldlace&#39;] = OLDLACE colors[&#39;olive&#39;] = OLIVE colors[&#39;olivedrab&#39;] = OLIVEDRAB colors[&#39;olivedrab1&#39;] = OLIVEDRAB1 colors[&#39;olivedrab2&#39;] = OLIVEDRAB2 colors[&#39;olivedrab3&#39;] = OLIVEDRAB3 colors[&#39;olivedrab4&#39;] = OLIVEDRAB4 colors[&#39;orange&#39;] = ORANGE colors[&#39;orange1&#39;] = ORANGE1 colors[&#39;orange2&#39;] = ORANGE2 colors[&#39;orange3&#39;] = ORANGE3 colors[&#39;orange4&#39;] = ORANGE4 colors[&#39;orangered1&#39;] = ORANGERED1 colors[&#39;orangered2&#39;] = ORANGERED2 colors[&#39;orangered3&#39;] = ORANGERED3 colors[&#39;orangered4&#39;] = ORANGERED4 colors[&#39;orchid&#39;] = ORCHID colors[&#39;orchid1&#39;] = ORCHID1 colors[&#39;orchid2&#39;] = ORCHID2 colors[&#39;orchid3&#39;] = ORCHID3 colors[&#39;orchid4&#39;] = ORCHID4 colors[&#39;palegoldenrod&#39;] = PALEGOLDENROD colors[&#39;palegreen&#39;] = PALEGREEN colors[&#39;palegreen1&#39;] = PALEGREEN1 colors[&#39;palegreen2&#39;] = PALEGREEN2 colors[&#39;palegreen3&#39;] = PALEGREEN3 colors[&#39;palegreen4&#39;] = PALEGREEN4 colors[&#39;paleturquoise1&#39;] = PALETURQUOISE1 colors[&#39;paleturquoise2&#39;] = PALETURQUOISE2 colors[&#39;paleturquoise3&#39;] = PALETURQUOISE3 colors[&#39;paleturquoise4&#39;] = PALETURQUOISE4 colors[&#39;palevioletred&#39;] = PALEVIOLETRED colors[&#39;palevioletred1&#39;] = PALEVIOLETRED1 colors[&#39;palevioletred2&#39;] = PALEVIOLETRED2 colors[&#39;palevioletred3&#39;] = PALEVIOLETRED3 colors[&#39;palevioletred4&#39;] = PALEVIOLETRED4 colors[&#39;papayawhip&#39;] = PAPAYAWHIP colors[&#39;peachpuff1&#39;] = PEACHPUFF1 colors[&#39;peachpuff2&#39;] = PEACHPUFF2 colors[&#39;peachpuff3&#39;] = PEACHPUFF3 colors[&#39;peachpuff4&#39;] = PEACHPUFF4 colors[&#39;peacock&#39;] = PEACOCK colors[&#39;pink&#39;] = PINK colors[&#39;pink1&#39;] = PINK1 colors[&#39;pink2&#39;] = PINK2 colors[&#39;pink3&#39;] = PINK3 colors[&#39;pink4&#39;] = PINK4 colors[&#39;plum&#39;] = PLUM colors[&#39;plum1&#39;] = PLUM1 colors[&#39;plum2&#39;] = PLUM2 colors[&#39;plum3&#39;] = PLUM3 colors[&#39;plum4&#39;] = PLUM4 colors[&#39;powderblue&#39;] = POWDERBLUE colors[&#39;purple&#39;] = PURPLE colors[&#39;purple1&#39;] = PURPLE1 colors[&#39;purple2&#39;] = PURPLE2 colors[&#39;purple3&#39;] = PURPLE3 colors[&#39;purple4&#39;] = PURPLE4 colors[&#39;raspberry&#39;] = RASPBERRY colors[&#39;rawsienna&#39;] = RAWSIENNA colors[&#39;red1&#39;] = RED1 colors[&#39;red2&#39;] = RED2 colors[&#39;red3&#39;] = RED3 colors[&#39;red4&#39;] = RED4 colors[&#39;rosybrown&#39;] = ROSYBROWN colors[&#39;rosybrown1&#39;] = ROSYBROWN1 colors[&#39;rosybrown2&#39;] = ROSYBROWN2 colors[&#39;rosybrown3&#39;] = ROSYBROWN3 colors[&#39;rosybrown4&#39;] = ROSYBROWN4 colors[&#39;royalblue&#39;] = ROYALBLUE colors[&#39;royalblue1&#39;] = ROYALBLUE1 colors[&#39;royalblue2&#39;] = ROYALBLUE2 colors[&#39;royalblue3&#39;] = ROYALBLUE3 colors[&#39;royalblue4&#39;] = ROYALBLUE4 colors[&#39;salmon&#39;] = SALMON colors[&#39;salmon1&#39;] = SALMON1 colors[&#39;salmon2&#39;] = SALMON2 colors[&#39;salmon3&#39;] = SALMON3 colors[&#39;salmon4&#39;] = SALMON4 colors[&#39;sandybrown&#39;] = SANDYBROWN colors[&#39;sapgreen&#39;] = SAPGREEN colors[&#39;seagreen1&#39;] = SEAGREEN1 colors[&#39;seagreen2&#39;] = SEAGREEN2 colors[&#39;seagreen3&#39;] = SEAGREEN3 colors[&#39;seagreen4&#39;] = SEAGREEN4 colors[&#39;seashell1&#39;] = SEASHELL1 colors[&#39;seashell2&#39;] = SEASHELL2 colors[&#39;seashell3&#39;] = SEASHELL3 colors[&#39;seashell4&#39;] = SEASHELL4 colors[&#39;sepia&#39;] = SEPIA colors[&#39;sgibeet&#39;] = SGIBEET colors[&#39;sgibrightgray&#39;] = SGIBRIGHTGRAY colors[&#39;sgichartreuse&#39;] = SGICHARTREUSE colors[&#39;sgidarkgray&#39;] = SGIDARKGRAY colors[&#39;sgigray12&#39;] = SGIGRAY12 colors[&#39;sgigray16&#39;] = SGIGRAY16 colors[&#39;sgigray32&#39;] = SGIGRAY32 colors[&#39;sgigray36&#39;] = SGIGRAY36 colors[&#39;sgigray52&#39;] = SGIGRAY52 colors[&#39;sgigray56&#39;] = SGIGRAY56 colors[&#39;sgigray72&#39;] = SGIGRAY72 colors[&#39;sgigray76&#39;] = SGIGRAY76 colors[&#39;sgigray92&#39;] = SGIGRAY92 colors[&#39;sgigray96&#39;] = SGIGRAY96 colors[&#39;sgilightblue&#39;] = SGILIGHTBLUE colors[&#39;sgilightgray&#39;] = SGILIGHTGRAY colors[&#39;sgiolivedrab&#39;] = SGIOLIVEDRAB colors[&#39;sgisalmon&#39;] = SGISALMON colors[&#39;sgislateblue&#39;] = SGISLATEBLUE colors[&#39;sgiteal&#39;] = SGITEAL colors[&#39;sienna&#39;] = SIENNA colors[&#39;sienna1&#39;] = SIENNA1 colors[&#39;sienna2&#39;] = SIENNA2 colors[&#39;sienna3&#39;] = SIENNA3 colors[&#39;sienna4&#39;] = SIENNA4 colors[&#39;silver&#39;] = SILVER colors[&#39;skyblue&#39;] = SKYBLUE colors[&#39;skyblue1&#39;] = SKYBLUE1 colors[&#39;skyblue2&#39;] = SKYBLUE2 colors[&#39;skyblue3&#39;] = SKYBLUE3 colors[&#39;skyblue4&#39;] = SKYBLUE4 colors[&#39;slateblue&#39;] = SLATEBLUE colors[&#39;slateblue1&#39;] = SLATEBLUE1 colors[&#39;slateblue2&#39;] = SLATEBLUE2 colors[&#39;slateblue3&#39;] = SLATEBLUE3 colors[&#39;slateblue4&#39;] = SLATEBLUE4 colors[&#39;slategray&#39;] = SLATEGRAY colors[&#39;slategray1&#39;] = SLATEGRAY1 colors[&#39;slategray2&#39;] = SLATEGRAY2 colors[&#39;slategray3&#39;] = SLATEGRAY3 colors[&#39;slategray4&#39;] = SLATEGRAY4 colors[&#39;snow1&#39;] = SNOW1 colors[&#39;snow2&#39;] = SNOW2 colors[&#39;snow3&#39;] = SNOW3 colors[&#39;snow4&#39;] = SNOW4 colors[&#39;springgreen&#39;] = SPRINGGREEN colors[&#39;springgreen1&#39;] = SPRINGGREEN1 colors[&#39;springgreen2&#39;] = SPRINGGREEN2 colors[&#39;springgreen3&#39;] = SPRINGGREEN3 colors[&#39;steelblue&#39;] = STEELBLUE colors[&#39;steelblue1&#39;] = STEELBLUE1 colors[&#39;steelblue2&#39;] = STEELBLUE2 colors[&#39;steelblue3&#39;] = STEELBLUE3 colors[&#39;steelblue4&#39;] = STEELBLUE4 colors[&#39;tan&#39;] = TAN colors[&#39;tan1&#39;] = TAN1 colors[&#39;tan2&#39;] = TAN2 colors[&#39;tan3&#39;] = TAN3 colors[&#39;tan4&#39;] = TAN4 colors[&#39;teal&#39;] = TEAL colors[&#39;thistle&#39;] = THISTLE colors[&#39;thistle1&#39;] = THISTLE1 colors[&#39;thistle2&#39;] = THISTLE2 colors[&#39;thistle3&#39;] = THISTLE3 colors[&#39;thistle4&#39;] = THISTLE4 colors[&#39;tomato1&#39;] = TOMATO1 colors[&#39;tomato2&#39;] = TOMATO2 colors[&#39;tomato3&#39;] = TOMATO3 colors[&#39;tomato4&#39;] = TOMATO4 colors[&#39;turquoise&#39;] = TURQUOISE colors[&#39;turquoise1&#39;] = TURQUOISE1 colors[&#39;turquoise2&#39;] = TURQUOISE2 colors[&#39;turquoise3&#39;] = TURQUOISE3 colors[&#39;turquoise4&#39;] = TURQUOISE4 colors[&#39;turquoiseblue&#39;] = TURQUOISEBLUE colors[&#39;violet&#39;] = VIOLET colors[&#39;violetred&#39;] = VIOLETRED colors[&#39;violetred1&#39;] = VIOLETRED1 colors[&#39;violetred2&#39;] = VIOLETRED2 colors[&#39;violetred3&#39;] = VIOLETRED3 colors[&#39;violetred4&#39;] = VIOLETRED4 colors[&#39;warmgrey&#39;] = WARMGREY colors[&#39;wheat&#39;] = WHEAT colors[&#39;wheat1&#39;] = WHEAT1 colors[&#39;wheat2&#39;] = WHEAT2 colors[&#39;wheat3&#39;] = WHEAT3 colors[&#39;wheat4&#39;] = WHEAT4 colors[&#39;white&#39;] = WHITE colors[&#39;whitesmoke&#39;] = WHITESMOKE colors[&#39;whitesmoke&#39;] = WHITESMOKE colors[&#39;yellow&#39;] = YELLOW1 colors[&#39;yellow2&#39;] = YELLOW2 colors[&#39;yellow3&#39;] = YELLOW3 colors[&#39;yellow4&#39;] = YELLOW4 color = &quot;blue&quot; print(type(colors[color][0])) . &lt;class &#39;int&#39;&gt; . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smile&quot;, &#39;file&#39;: &quot;smile.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? Base64 is similar to Binary or Hexadecimal because it is just a different base counting system. Binary is base 2, Hexadecimal is base 16, Base64 is base 64. Essentially each character can represent up to 64 different numbers. . Translate first 3 letters of your name to Base64. Tob --&gt; First convert to decimal, = T, 111 = o, 98 = b. --&gt; Next convert decimal to base 64 (base 10 to base 64). | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? One example of buffering is on youtube, the video buffers often when I have a bad wifi connection and if the quality is on auto, then it will also compress the video. | From your consumer experience, what effects have you experienced from buffering? Annoyance mostly. It&#39;s annoying to have to wait for a video or even picture to load just because the image is big. Even though it&#39;s not the fault of the site I&#39;m using, it&#39;s still annoying. | How do these effects apply to images? These effects sometimes cause images to be automatically compressed or can cause the entire website to run slower. | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano-original.jpg&quot;}, {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smile&quot;, &#39;file&#39;: &quot;smile.jpeg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_shift(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((int(average/2), int(average/2), int((average + 255)/2), pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((int(average/2), int(average/2), int((average + 255)/2))) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_shift(image) display(HTML(image[&#39;html_grey&#39;])) print() . - meta data -- Green Square Internet PNG RGBA Original size: (16, 16) Scaled size: (320, 320) -- original image -- . grey image - . - meta data -- Clouds Impression Peter Carolin PNG RGBA Original size: (320, 234) Scaled size: (320, 234) -- original image -- . grey image - . - meta data -- Lassen Volcano Peter Carolin JPEG RGB Original size: (2792, 2094) Scaled size: (320, 240) -- original image -- . grey image - . - meta data -- Smile Internet JPEG RGB Original size: (259, 194) Scaled size: (320, 239) -- original image -- . grey image - . . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, color, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth self._color = color # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_shift = self.image_to_html_shift() @property def color(self): return self._color @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_shift # Large image scaled to baseWidth of 320 def set_color(self): self._color = input(&quot;please write what color you want&quot;) return def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_shift(self): self.set_color() color = self._color img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((int((average + colors[color][0])/2), int((average + colors[color][1])/2), int((average + colors[color][2])/2), pixel[3])) # PNG format else: grey_data.append((int((average + colors[color][0])/2), int((average + colors[color][1])/2), int((average + colors[color][2])/2))) img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;../images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Smile&quot;, &#39;file&#39;: &quot;smile.jpeg&quot;, &#39;color&#39;:&quot;yellow&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], color=image[&#39;color&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; &quot; + ido.color[0].upper() + ido.color[1:] + &quot; image &quot;) display(HTML(ido.html_grey)) print() . . - meta data -- Smile Internet smile.jpeg JPEG RGB Original size: (259, 194) Scaled size: (320, 239) -- scaled image -- . Green image . . Hacks . . Early Seed award . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/unit2/2023/03/07/AP-unit2-2.html",
            "relUrl": "/unit2/2023/03/07/AP-unit2-2.html",
            "date": " • 2023-03-07 00:00:00 -0600"
        }
        
    
  
    
        ,"post7": {
            "title": "Night at the Museum",
            "content": "CS . There are also some cool CS projects that I saw Some of the projects I saw were cool like a workout planner and some other unique projects like a game website. . Ceramics . These are some of the ceramics pieces that I saw at the night at the museum. I really liked these pieces because it’s a skill set that I don’t really have and find very impressive. . . This piece depicts a devil fruit from One Piece. I personally thought this was really cool. I like the show one piece and I also really like this piece. I wanted to include it because I just thought it was really cool and very high quality as well. . . This is another piece I really liked. Though it isn’t finished the design is really cool and well made. I like dragons and stuff like that in general so this is a very cool depiction to me. . . These pieces were actually made by my twin, Aiden. It’s cool to see what he’s been working on throughout the year and I think it turned out really well. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_22/2023/02/27/nightAtTheMuseum.html",
            "relUrl": "/week_22/2023/02/27/nightAtTheMuseum.html",
            "date": " • 2023-02-27 00:00:00 -0600"
        }
        
    
  
    
        ,"post8": {
            "title": "CPT project",
            "content": "https://youtu.be/uNyqrT9Pus8 . 3.A.i: The purpose of my program is to alleviate boredem by providing a platform to play chess with your friends. . 3.A.ii: My game allows the player to choose a chess piece and then calculate the possible moves that piece can make based on the rules of chess. After finding the moves which can be made, my program will dipsplay those moves. Then, when a player chooses one of those possible moves the program updates the game in order to reflect that move being made. . 3.A.iii The inputs are all clicks by the player and they can have different outputs depending on the circumstances. If you click on a piece which is not yours or click on an empty square there will be no output. If you click on your own piece which has available moves the output will be displaying those moves. If you have already clicked on a piece and you click on one of the moves being displayed the output will be actually moving the piece to that spot. . 3.B.i . . . 3.B.ii The variable representing the list is called “moves” as it is generated in the getTotalMoves() method, but when it is called in getObstructedMoves() its name is changed to totalMoves to better represent it in that specific code segment. This is possible because these code segments are two seperate methods. . 3.B.iii The data in this list represents the total moves that a piece can make. This code specifically represents the total moves that a Knight would be able to make. . 3.B.iv This list manages complexity by neatly storing all of the possible moves that a piece, in this case the Knight, can move. This is useful for many reasons, and the code would be very difficult to recreate without this. Without this list, each move would need to be stored in a seperate variable. That in itself is not too bad, but the purpose of the “moves” list is to later filter through it in order to find which moves are not available. Without a list it would be incredibly difficult and tedious to go through this filtering process. Instead of using some kind of loop, like the forEach() method I used, you would have to individually check each move and then determine whether that move is possible or not. Then you’d have to find some way to show that the move isn’t possible, as you would be unable to just remove it from a list like I do currently. There are other programs which perform similar functions on the list of total moves so each of those would also have to be recreated in this way which would make this program way more complex than it needs to be. . 3.C.i . . . 3.C.ii This procedure is what actually moves the piece. This is the backbone of the functionality of the program. This method which I created is how anything changes in the game state, how a piece moves from one square to another. . 3.C.iii . 3.c.iii In my first code segment given the move function checks if the move which has been given is in the available moves for that piece. We can also see the available moves function which combines the captures and the free moves. To start at the lowest level, the available captures function iterates through each obstructed move and selects only the ones that have a piece that is the opposite color to the piece which is moving. It then returns these moves as those are the moves which the piece can make to capture another piece. The get free moves function does something similar but the opposite. It takes the total moves and removes all of the moves which are obstructed by something. That way the only moves remaining are the free moves which the piece can make and that list is returned. Finally these two lists are combined together in the get available moves function. In the move function itself that get available moves function is called that then runs the subsequent functions. Once the list of available moves has been generated the move function checks to see if the place that the piece has been told to move is actually a move that piece can make. If it is then the move is made. If not then the function does nothing. . 3.D.i First Call: In the first call the movePiece function will have parameters of currentM = “b1” and newM = “c3” and the board is in the following position: . . Second Call: In the second call the movePiece function will have parameters of currentM = “b1” and newM = “b3” and the board is in the same position as above. . 3.D.ii, First Call Conditions: The condition checks if the new move which was passed through is included in the list of available moves, which it is. Therefore it will change the board state, making the piece move. . Second Call Conditions: The condition checks if the new move which was passed through is included in the list of available moves, which it isn’t. It then checks if the piece is castling, which it is not. . 3.D.iii First Call Result: The code it will change the board state, making the piece move. This is later displayed on the players screen. . Second Call Result: Since both conditions are false the code does nothing. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/CPT",
            "relUrl": "/CPT",
            "date": " • 2023-02-24 00:00:00 -0600"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 5 Blogs",
            "content": "5.1 and 5.2 notes . Our project has a few benefits being a site to play video games. The major benefit is to alleviate boredom. It will do this by providing entertainment through the many different games available. Also, this website provides a premier avenue for friendly competition with your friends, through our online gameplay capabilities. It also can facilitate learning from your mistakes via the history page. . Our website could have a harmful effect if people become addicted to our games. . Internet blockers I think simply limit people. As highschoolers we should be able to think and make descisions for ourself. We’re mature, so we shouldn’t be limited from doing things. As highschoolers our education is already our own responsability. We don’t need others to keep us accountable. . I’m concerned about the digital divide because it won’t really get any better. It will only continue to increase and get worse and worse, those who don’t have access to technology may never be able to have adequate access in order to participate in a further technological society. . 5.3 and 5.4 notes . I think that this is very interesting. I don’t think computers can be inherently biased though, so I don’t like the term computer bias. All bias comes from people, because computers are by definition unbiased. Rather any bias is a sampling bias. This bias most likely comes from the developers, the people creating the computer, not the actual computer istelf. The HP facial regonition is a good example. It’s not that the computer is racist, it’s just when they were training the computer they only trained it with white people, most likely the HP employees. Especially with AI, we don’t actually know how the nueral networks work. If it’s only trained to find . Del Norte crowdsourcing mostly comes in the form of AP stats or AP psych forms. These crowdsourcing projects normally are in order to conduct some form of research or study based on the data they recieve. Generally these are for a grade. In my project we could use crowdsourcing by having people play games in order to give us some history data. . 5.5 and 5.6 notes . There are many different interesting liscense types. I personally am a big fan of open source, not just as a programmer, but also as a user. When something is open source, I have a much higher sense of security. I can trust that it’s safe, since if it wasn’t safe someone else would have said soemthing about it. As for our own project, since we aren’t planning on using our code privately for any purposes, we chose to use a GPL liscense. We want everyone to be able to use our code and any modifications to our code to be shared. . Some common PII taken in compsci are names, usernames, and a password, though the password is unique. Sometimes, the fitness ones specifically, will ask for weight, height and other important info for creating a workout plan. Good passwords are long and hard to guess. If it’s something simple someone doesn’t even need an algorithm to crack it. If it’s random but short, an algorithm will crack it quickly. One phishing scheme I have learned about was when my instagram got hacked. It took me to a page that looked like an instagram sign on and so I used it. Then my account started sending people dms and posting things, so I emailed facebook and they helped me get my account back. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%2022/2023/02/10/collegeBoard5blog.html",
            "relUrl": "/week%2022/2023/02/10/collegeBoard5blog.html",
            "date": " • 2023-02-10 00:00:00 -0600"
        }
        
    
  
    
        ,"post10": {
            "title": "Week 20 Blogs",
            "content": "5.1 and 5.2 notes . Our project has a few benefits being a site to play video games. The major benefit is to alleviate boredom. It will do this by providing entertainment through the many different games available. Also, this website provides a premier avenue for friendly competition with your friends, through our online gameplay capabilities. It also can facilitate learning from your mistakes via the history page. . Our website could have a harmful effect if people become addicted to our games. . Internet blockers I think simply limit people. As highschoolers we should be able to think and make descisions for ourself. We’re mature, so we shouldn’t be limited from doing things. As highschoolers our education is already our own responsability. We don’t need others to keep us accountable. . I’m concerned about the digital divide because it won’t really get any better. It will only continue to increase and get worse and worse, those who don’t have access to technology may never be able to have adequate access in order to participate in a further technological society. . Multiple Choice Test #2 . 49/50 . The one question I got wrong was the question about a heuristic solution and honestly I had never heard of that before in my life. I looked it up, but still got it wrong. . CPT Project . The code segment I will use will probably be one of my functions to find the available moves of a chess piece. These functions have parameters and also use many different lists to compute the possible moves. My purpose will be to alleviate boredem. . For example, my function to find the available captures take a list of the total obstructed moves and checks if each move is able to be captured. This has different inputs with differing outputs and uses lists to manage the complexity of the computation. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%2020/2023/02/01/week20blog.html",
            "relUrl": "/week%2020/2023/02/01/week20blog.html",
            "date": " • 2023-02-01 00:00:00 -0600"
        }
        
    
  
    
        ,"post11": {
            "title": "Ruby Fixes for M1 macs",
            "content": "Introduction . Essentially the issue to my understanding is mac has a base ruby version which isn’t compatiable for our uses. This isn’t bad, but the problem arises when you want to switch to a different version of ruby. You need to change the path which your system uses for ruby. The way I did this was using Chruby. Chruby is a ruby manager which allows you to change which version of ruby you want. It’s kind of overkill for our purposes, but it was the only thing I could get to work. . There are multiple prominent ruby managers and all of them will probably work. This is how to set up Chruby, but if you would like to look on your own for rvm or rbenv or something else entirely then you definitely can. Chruby is the simplest to use and understand. . What do you do . Step 1: Install brew and upgrade brew . First you need to install brew. Homebrew (brew) is a package manager which basically means it helps you install anything and everything that you need. If you don’t have it installed go to this link and run the command under install. . If you have brew then you need to make sure your brew is up to date. Run the following: . $ brew outdated #This command checks if your packages are outdated. If any of your packages are outdated, run the next two commands. $ brew update $ brew upgrade #These upgrade all of your brew dependencies . Restart your terminal (close and reopen) . Step 2: Install ruby manager and installer . Now you can actually install the ruby manager and installer. Run the follwing: . $ brew install chruby ruby-install . Step 3: Install ruby . Install whatever version of ruby you want. For this project you should use 2.7.7. Run the following: . $ ruby-install 2.7.7 . If it fails with it could be because: . Something is wrong with your development setup | You tried to install Ruby even though Homebrew reported warnings/errors | . Read the error message and try to fix it. If you can’t send a message on slack and mention Toby and I can look at it. . Step 4: cd into your directory . You should know how to do this. cd into whatever directory has the local server you want to run. This will probably be the repository that you copied from Mr. Mortensen. . Step 5: Configure your shell . My understanding of this is right now your computer wants to use the built in ruby version so we need to change it so that it uses the correct path. to do that run these three commands (don’t worry when it doesn’t say anything after you run the command, nothing is supposed to happen in terminal): . $ echo &quot;source $(brew --prefix)/opt/chruby/share/chruby/chruby.sh&quot; &gt;&gt; ~/.zshrc $ echo &quot;source $(brew --prefix)/opt/chruby/share/chruby/auto.sh&quot; &gt;&gt; ~/.zshrc $ echo &quot;chruby ruby-2.7.7&quot; &gt;&gt; ~/.zshrc . If you get an error saying that the file path can’t be found then restart from upgrading your homebrew. If you get any other error you could also try that or again put it on slack. . Step 6: Check if it worked . You should be using the correct ruby version now. Inside of the directory that you used cd to enter earlier run: . $ ruby -v . If it says 2.7.7 then it worked and you can move on. . If it doesn’t say 2.7.7 run: . $ chruby 2.7.7 . If that says chruby not found or something along those lines then run: . $ echo &quot;source ~/.bashrc&quot; &gt;&gt; ~/.bash_profile . Then restart the terminal and run: . $ chruby 2.7.7 . If the error persists run: . $ . /usr/local/opt/chruby/share/chruby/chruby.sh $ . ~/.bashrc . Then restart the terminal and run: . $ chruby 2.7.7 . If you get a different error (NOT the chruby not found error) or the error still doesn’t go away try restarting from the beginning or send it on slack. . Step 7: Check your Gemfile . Your gemfile is a file in the root of your project that you copied from Mr. Mortensen. Open it in vscode and look for it and check if it looks like this: . source &quot;https://rubygems.org&quot; gem &quot;github-pages&quot;, group: :jekyll_plugins . Delete anything extra that you have. . Step 8: Install Jekyll if you haven’t already . I didn’t need to do this but some of you might. It doesn’t hurt to run it anyway. Run: . $ gem insall jekyll . Step 9: Install bundler if you haven’t already . These instructions are also given on the bundler website. Run: . $ bundle install $ git add Gemfile Gemfile.lock . Step 10: Run your server . Now you should be ready to run your server. Run: . $ bundle exec jekyll serve . It will take a very long time the first time you run it. . Persisting errors . If you try to run your server and you still get any errors, the first thing you should do is check that you’re using the correct ruby version in the correct directory (ruby -v) If you are then try all of these steps again from the beginning. If you still are getting errors send a message on slack and I can try to help you. . In general however it is a good skill to be able to figure out some of the errors you get on your own. Read the error message, do what it says if there is a quick fix. Google error messages try to work through stuff if you think you’ll be able to. .",
            "url": "https://toby-leeder.github.io/CSPFastpages/rubyFixes",
            "relUrl": "/rubyFixes",
            "date": " • 2023-01-06 00:00:00 -0600"
        }
        
    
  
    
        ,"post12": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Minus Change Bits . +1 | 00000000 | 0 | 0 | 0 | -1 | | . Turn on | . | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/2022/11/15/binaryStuff.html",
            "relUrl": "/2022/11/15/binaryStuff.html",
            "date": " • 2022-11-15 00:00:00 -0600"
        }
        
    
  
    
        ,"post13": {
            "title": "Nightatthemuseum",
            "content": "",
            "url": "https://toby-leeder.github.io/CSPFastpages/2022/11/10/nightAtTheMuseum.html",
            "relUrl": "/2022/11/10/nightAtTheMuseum.html",
            "date": " • 2022-11-10 00:00:00 -0600"
        }
        
    
  
    
        ,"post14": {
            "title": "Agile Methodology Weekly Plans and Notes",
            "content": "Roles . Scrum Master: Toby Leeder Dev Ops: Gene Chang Frontend: Nathan Capule Backend: Caleb Navarro . Week 9 . Initial Meeting, Monday . Toby: Work on logic for pieces, starting with rook then beginning pawn | Gene: Ensure Flask is running on AWS and stays running | Caleb: Backend (inconclusive, waiting on more lessons from Mortenson) | Nathan: Work on creating a chess board with html and creating the pieces on it | . Midweek Meeting, Wednesday . Toby: Assist Gene with Flask on AWS (more experienced and therefore able to help), work with Nathan on integration (more info in Nathan’s changes) | Gene: Create Group Fastpages | Caleb: Create Functional API on group Fastpages connected to our group flask (running on AWS) | Nathan: Work on integration, help Toby with integrating his code done in Javascript Jupyter Notebook into the ChessBoard | . Final Meeting, Friday . All: Create Video Displaying Our Roles | Gene: Add new requirements to nginx file on AWS (given on Slack) | Nathan: Combine videos into a single four minute video ready to be presented on Monday | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/plans/2022/10/23/agile-stuff.html",
            "relUrl": "/plans/2022/10/23/agile-stuff.html",
            "date": " • 2022-10-23 00:00:00 -0500"
        }
        
    
  
    
        ,"post15": {
            "title": "Chess",
            "content": "How do I play chess?&lt;/i&gt; Report an Issue . . a b c d e f g h . 8 | | | | | | | | . 7 | | | | | | | | . 6 | | | | | | | | . 5 | | | | | | | | . 4 | | | | | | | | . 3 | | | | | | | | . 2 | | | | | | | | . 1 | | | | | | | | . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/project/2022/10/20/Chessboard.html",
            "relUrl": "/project/2022/10/20/Chessboard.html",
            "date": " • 2022-10-20 00:00:00 -0500"
        }
        
    
  
    
        ,"post16": {
            "title": "Fetching jokes thing",
            "content": "Joke HaHa Boohoo .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%209/2022/10/19/Jokes_Thing.html",
            "relUrl": "/week%209/2022/10/19/Jokes_Thing.html",
            "date": " • 2022-10-19 00:00:00 -0500"
        }
        
    
  
    
        ,"post17": {
            "title": "Program Purpose",
            "content": "Program Purpose . Big Idea 1 . Program Purpose and Function Our Program’s purpose is to play a succesful game of chess and declare a victor (or stalemate) and to allow the player to customize the game to a certain degree. The functions will be moving pieces, capturing pieces, recording captured pieces, customizing where the pieces are. . Big Idea 2 . Data Abstraction One small example of a list would be the pieces that have been captured, they would be kept in a list in order to display as well as calculate the points a player has. Also, the moves a pieces can legally make would be in a list as well, actually in a dictionary which corresponds the moves and pieces. Also, there would be lists of pieces for definitions and the board would be defined as a list of corresponding letters and numbers as well. . Big Idea 3 . Managing Complexity The list of possible moves helps to abstract the moves for each piece. In this way each piece instance can function the same way and only be specified by its defined characteristics. The board being defined as letter and number pairs also helps, as we will be able to add the number of squares a piece to the current place on the board in order to check. . Big Idea 4 . Procedural Abstraction We will have many procedures. One might be calculating the possible moves based on the piece type and the current position. This will be abstracted further through a function to calculate the change in letter and number of the posititon and return the change in x and y. . Big Idea 5 . Algorithm Implementation One algorithm we will use which will sequence, select and iterate is the algorithm to determine the possible moves. This will generate a list of options and return those options. . Big Idea 6 . Testing We will be blogging the issues we encounter (probably in a google drive so we can all work together) .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week%207/2022/10/10/program_purpose.html",
            "relUrl": "/week%207/2022/10/10/program_purpose.html",
            "date": " • 2022-10-10 00:00:00 -0500"
        }
        
    
  
    
        ,"post18": {
            "title": "More Python Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . More Python Learns . Also in the Lists and Dictionaries w/Python . Code Syntax Notes . List | key = [value, value, …] | Lists in python are sorta like arrays in Java. They are different because a list can have multiple different data types within it. Lists can also have multiple dictionary entries in which each dictionary has multiple key and value pairs within it. Entries can be added into a list using the .append() method or just use + and adding it. | . Dictionary | dictionary_key = {key: value, key: value …} | Dictionaries are similar to lists, but instead of just holding values with one single key, each individual value is paired with its own key. That means you can call each value using its unique key. This is useful for a lot of things. You can also create a list of dictionaries, in which a list has multiple dictionary entries. Each dictionary can have multiple key and value pairs and is only considered one entry in the list. | . Try, except | try: code except error: code except: code | This is an interesting code that I already knew about from previous experience, but I found it could be useful here. Essentially the try portion is what runs initially and it will keep running the code within it until it runs and returns an error. Then the except code runs after. You can change what the except code is depending on the error or you can leave it generic so it runs for any error. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/python2",
            "relUrl": "/notes/python2",
            "date": " • 2022-10-03 00:00:00 -0500"
        }
        
    
  
    
        ,"post19": {
            "title": "Python Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Python Learns . Also in the QnA w/Python post. . I’ve had very little experience with Python before I used it so here’s some of the new functionality I learned and the syntax for it. . Code Syntax Notes . Variables | key = value | Unlike Java, it looks like Python doesn’t really use variable assignments like java. Instead variables can just be assigned “any” and then can be assigned numbers, letters, strings or pretty much watever other value you want including lists. | . Functions | def function_name(parameter1, parameter2, parameterX): code return value | Functions are pretty similar to other languages for the most part. It is a little different than java in that you don’t really use keywords before to define it like int, string or void for the return type or static, private and public. They still function (get it?) pretty much the same though. | . For loops | for newVar in definedVar: code | For loops are probably the most different from Java. This is because they go through a list of a variable instead of creating a new integer and going until that integer reaches a value. That interger is suprisingly useful, so to me it seems like this change removes some of the functionality of a for loop. Despite this though I still found ways around it and was able to accomplish my goals. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/python1",
            "relUrl": "/notes/python1",
            "date": " • 2022-10-03 00:00:00 -0500"
        }
        
    
  
    
        ,"post20": {
            "title": "Bash Notes",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Bash Learns . Also in the Checks w/Bash post. . I’ve had basically no experience with Bash before this so it was interesting to learn some of the new functionality now as well. Here is some of what I learned. . Code Syntax Notes . Variables | key=value | Most variables work the same and it looks like bash works a similar way as well. You don’t put a space in between the key and the value. If you do it looks like bash reads the key as a command and so the variable doesn’t work. Also, to call a variable it looks like you need a $ sign in front, otherwise it just reads it as a string. | . Echo | echo “what you want to print” | Echo is the bash version of print and pretty much works the same, though you can do some cool stuff with periods with it. | . If then | if [[ condition ]] then code else code fi | This again is pretty similar to java or python though there are some differences. For example the condition needs [[]] which is different. Also, you need a then statement to run the code and at the end you need fi to finish the if statement. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/notes/bash",
            "relUrl": "/notes/bash",
            "date": " • 2022-10-03 00:00:00 -0500"
        }
        
    
  
    
        ,"post21": {
            "title": "Collegeboard Quizes",
            "content": ". Week 6 . Collaboration Quiz . Score: 3/3 This quiz was interesting, but easy. The last question I wasn’t sure on because it was correct on a technicality but I did get it right. While users could help identify errors they made, the couldn’t fix it. . Program Function and Purpose Quiz . Score: 6/6 This was the hardest quiz for sure. The fifth question had some code that was pretty difficult to understand but once I realized how ti worked it was pretty cool. Also in general the code language is a little weird. The way they set variables and print stuff. It seems like they changed a lot of stuff just for the sake of changing it and in turn made it worse. Overall though it was still easy. . Program Design and Development Quiz . Score: 3/3 This quiz was pretty easy overall. The only thing that I was confused on is that indexes for collegeboard start at 1. This means that arrays start at 1 and not zero so one question about switching the valuesin an array was a little weird. . Week 7 . Copy of Identifying and Correcting Errors Quiz . Score: 2/3 This quiz was the hardest one I’d had up to this point. It was the first one I got something wrong, but that was because I didn’t read that there were 2 answers. It doesn’t really make sense to me though. These situations are really unrealistic I feel, you don’t really end up with code like that which is just completely non-functional at a fundamental level. . Final . During the test . Question 16, I don’t think I did the Internet assignment so I didn’t know. I had to use other resources like the internet video to find the correct answer. | Question 17, I also didn’t know this one and had a friend help me figure it out. | Question 18, another I didn’t know. | Question 19 - 21, these questions were about binary and I didn’t know a lot about binary. I knew the basics, but Gene knew more about binary so he was able to help us. | Question 22, how does binary. I didn’t realize that you go right to left for binary numbers so that confused me, but I was able to look back at a previous question to figure it out. Score: 47/50 | Question 43, for this question I made the code myself in javascript, but I did it wrong. I thought it would run 5 times but it actually would have run 6 times so I needed to iterate through one more time. | Question 49, I guessed for this one because I was running out of time. If I had time I would have gotten it correct, it was a pretty simple problem. | Question 50, same as 49 I guessed for this one. It’s also a really simple question though that I would have gotten right. | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_6/2022/10/01/collegeboard_quiz.html",
            "relUrl": "/week_6/2022/10/01/collegeboard_quiz.html",
            "date": " • 2022-10-01 00:00:00 -0500"
        }
        
    
  
    
        ,"post22": {
            "title": "AppLab Plans",
            "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . Plans . To start, my applab will be a quiz. The questions will be about my robotics whatclub because I just wanted to come up with something random. . Who is the president of the club? Raadwan Masum (C) | Adrita Chakraborty | Kevin He | Toby Leeder | . | Which of the following is NOT a department in the robotics club? Outreach | Software (C) | Build | Buisness | . | Who of the following is NOT a member of leadership of the robotics club? Broden Golich | Toby Leeder | Luke Campillo (C) | Rohin Sood | . | Which department is the best department in the robotics club? Tech (Cish) | Build | Outreach | Buisness | None of them (C) | . | Who is the Vice President of the robotics club? Toby Leeder | Kevin He | Adrita Chakraborty | Hema | All of the above (C) | . | Stuff went wrong . this is where I takl about everything that is not really working . The first thing that I just figured out was how to call a table. Ideally my code is abstract, so I want it all to be in functions which run repeatedly with a table. The first part of that though is accessing the data in a table. The only way to do this that I found is use a getColumn function which returns a list of all the entries in the column which you can then access using basic list syntax. I didn’t know that you could use basic list syntax though and it took me a bit to figure that out. | Another thing that went wrong was I made a mistake and started off with the initial question number being 1. This meant that it started with entry number 1 in the table. At the beginning I just added in two table entrys so I didn’t notics this the entire time. This became an issue when I was trying to test mutiplt questions. The second question kept not loading and just saying undefined and it took me a bit to realize that this is because it was looking for a third entry that didn’t exist and not the second entry. I got confused, but eventually figured it out. | . Here it is . Here is a link to my final app lab project .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_3/2022/09/11/appLabPlanning.html",
            "relUrl": "/week_3/2022/09/11/appLabPlanning.html",
            "date": " • 2022-09-11 00:00:00 -0500"
        }
        
    
  
    
        ,"post23": {
            "title": "Alumni Panel",
            "content": "Alumni Panel Thoughts . I’m really glad I was able to attend this event. It was really interesting and I learned a lot of new things. I didn’t realize just how much programming is used in the STEM world and it was really interesting for me to learn that. Also, I learned that the best time to apply for internships is in September and December. Overall I’m really glad I went and I feel good about my choice in taking APCSP. . Alumni Panel Notes . Question Colein Anthony Andrew Maybel Allison Nitiya . How did you realize what you wanted to do and how did csp help? | “Hmm I can code well but I can 3d model better” Compsci is a lot about perspective, look at people who are not classmates and see how you compare | Loves problem solving and cs Liked curriculum | Realized he liked complexity, and theory about cs, liked java backends development and all that stuff Thought he was pretty decent at that | Didn’t like class, knew it was important to learn Did cs even though not a cs major It’s useful in life and you’ll need to know it at some point Didn’t like aerospace so switched to cog sci | Didn’t really like cs but still doing it Liked some design aspects of it and is doing cog sci | Always interested in computer science from young age Middle school and high school taking more seriously How could she apply her skills Realized what she’s creating could be used in the real world | . Biggest challenge you’ve encountered in comp sci | Starting sucks Error messages are annoying and you don’t know how to fix it There is something on the internet to help you | Clashing Egos, working together is hard and cs majors aren’t nice are very showy, can be frustrating Can feel bad about yourself You have to focus on yourself and your own path Don’t worry about other people | Theory is difficult, idea behind it Weird, complicated is confusing, hard transition from high school to college | Motivation to do CS, always someone better than you Internship makes you do CS, still need to do CS A specific project or purpose is helpful Frustrated with syntax Don’t expect you to know all the syntax, just google it or ask for help | Starting, temptation to bs stuff Making sure you don’t cut corners, actually do the work to learn Mindset to go above and beyond solves problems in the long run | Not always gonna have a rigid structure and how to do things Willing to kinda just start even if you don’t have a plan | . Are there any PBL (project-based learning) scenarios in College? | - Not that many, working on a project isn’t super common but it does still happen so you need to know how to do it |   | CS courses do have projects but there are also a lot of tests There is still PBL | Teacher doesn’t have time to answer everyone’s attention and answer every question Study groups help There are some project classes where they do work on a lot of projects but thats where managing groups is difficult Figure out what works best for you Especially internships they don’t really expect you to know what to do |   |   | . Have you applied cs in your major if you are not majoring in CS? | A lot of menial tasks that you can speed up by writing a script to help speed up things Coding is everywhere you need so you can know what you’re doing Advanced calculations are easier with coding as well |   | High level math computer science can help Math libraries can be helpful to use | Program stuff in CAD like analysis and cad You can code 3d printing stuff without a 3d model Making things faster so you don’t have to do it all manually Internships sometimes just make you do software Problem solving logic used everywhere | Cog sci does use computer science More front end Requirements are stats and psych courses, can use comp sci in stats Psych has cs as well, mat lab and other stuff |   | . For existing college students have you had a job at your school | Make a resume You put resumes into job sights Push yourself to be above and beyond Make your professors like you | Code ninjas, it’s a franchise | Tutor at the school LG internship, woked with APIs and web development, used javascript html and python | Interact with professors and ask them if there is any space in their lab Interact with the TAs and stuff |   |   | . Any personal projects? |   |   | Companies look for that especially without work experience If you can find the time it looks good 2-3 personal projects are really useful, they can look at what you’re doing |   |   |   | . Computer science in mechanical engineering | Mirrored components say mirrored at the end each time Made a script that isolated the mirrored and took out the text and removed it Sometimes you have to actually go into the code for Computer Aided Machinery Simulations for materials, sometimes done by hand |   |   |   |   |   | . Tips to get a job: . Have a resume | Know when to apply | A lot of companies start hiring in September and November the year before | Have proof of work that you’ve done | It doesn’t really matter what school you go to | Personal projects, project teams and clubs are important | Smaller local companies generally take high school interns | .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_2/2022/08/29/alumniPanel.html",
            "relUrl": "/week_2/2022/08/29/alumniPanel.html",
            "date": " • 2022-08-29 00:00:00 -0500"
        }
        
    
  
    
        ,"post24": {
            "title": "Database CRUD Operations",
            "content": "Database API . User ID Name Posts DOB Age . Create API . User ID: . Name: . Password: Verify Password: . Birthday: . Create .",
            "url": "https://toby-leeder.github.io/CSPFastpages/data/database",
            "relUrl": "/data/database",
            "date": " • 2022-07-10 00:00:00 -0500"
        }
        
    
  
    
        ,"post25": {
            "title": "Is this gonna work?",
            "content": "My first markdown thingy . It’s not actually called a markdown thingy . It’s really just a markdown post. It’s actually less letters than a markdown thingy so there is no reason to write markdown thingy. Maybe if I forgot the name I would write markdown thingy, but clearly I remember it is called a markdown post. Well that is all. . . . . . I just put a lot of dividers there . because why not . . this is a picture of among us . .",
            "url": "https://toby-leeder.github.io/CSPFastpages/week_0/2020/08/20/markdownpost.html",
            "relUrl": "/week_0/2020/08/20/markdownpost.html",
            "date": " • 2020-08-20 00:00:00 -0500"
        }
        
    
  
    
        ,"post26": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://toby-leeder.github.io/CSPFastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • 2020-01-14 00:00:00 -0600"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hi. My name is Toby. I do a little bit of CS every once and a while (that’s why I’m here) and I like doing it. I don’t know a lot but I’m looking forward to learning more! - August 26, 2022 .",
          "url": "https://toby-leeder.github.io/CSPFastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page3": {
          "title": "Lesson Notes",
          "content": "Lesson Notes | . Day 1, Unit 3 Sections 1-2 . Grade: 1/1 . I already knew most of this, but I saw a cool python syntax that I didn’t know. This was indexing through a list using a colon. I learned that the colon indexes from the number to the left of the colon to the number to the right of the colon. The double colon includes a jump in the middle. So essentially if you have :2: it will index throughout getting every other value in the list. | . Day 2, Unit 3 Sections 3-4 . Grade: 1/1 . New Sudo Code: len() returns the length of a string same name in python | . | lower() converts it all to lowercase same name in python | . | substring() returns the characters from the string beginning at the first condition and ending at the second position comparable to the : operator for indexes in python | . | . | . Day 3, Unit 3 Sections 5-7 . Grade: 1/1 . Comparing lists I didn’t really know how comparing lists worked in python before | . | . Day 3, Unit 3 Sections 8 and 10 . This was mine .",
          "url": "https://toby-leeder.github.io/CSPFastpages/lessonNotes",
          "relUrl": "/lessonNotes",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Notes",
          "content": "| Home | Python | Bash | More Python | Link 4 (TBD) . | . This is my notes pages, I plan on putting a lot of the things I learn and some important syntax in here as well as in the notebook which demonstrates my learning. That means most of the information here can be found somewhere else, but it will all be organized and in one place on this page. . Python Learns . Also in the QnA w/Python post. . I’ve had very little experience with Python before I used it so here’s some of the new functionality I learned and the syntax for it. . Code Syntax Notes . Variables | key = value | Unlike Java, it looks like Python doesn’t really use variable assignments like java. Instead variables can just be assigned “any” and then can be assigned numbers, letters, strings or pretty much watever other value you want including lists. | . Functions | def function_name(parameter1, parameter2, parameterX): code return value | Functions are pretty similar to other languages for the most part. It is a little different than java in that you don’t really use keywords before to define it like int, string or void for the return type or static, private and public. They still function (get it?) pretty much the same though. | . For loops | for newVar in definedVar: code | For loops are probably the most different from Java. This is because they go through a list of a variable instead of creating a new integer and going until that integer reaches a value. That interger is suprisingly useful, so to me it seems like this change removes some of the functionality of a for loop. Despite this though I still found ways around it and was able to accomplish my goals. | . Bash Learns . Also in the Checks w/Bash post. . I’ve had basically no experience with Bash before this so it was interesting to learn some of the new functionality now as well. Here is some of what I learned. . Code Syntax Notes . Variables | key=value | Most variables work the same and it looks like bash works a similar way as well. You don’t put a space in between the key and the value. If you do it looks like bash reads the key as a command and so the variable doesn’t work. Also, to call a variable it looks like you need a $ sign in front, otherwise it just reads it as a string. | . Echo | echo “what you want to print” | Echo is the bash version of print and pretty much works the same, though you can do some cool stuff with periods with it. | . If then | if [[ condition ]] then code else code fi | This again is pretty similar to java or python though there are some differences. For example the condition needs [[]] which is different. Also, you need a then statement to run the code and at the end you need fi to finish the if statement. | . More Python Learns . Also in the Lists and Dictionaries w/Python . Code Syntax Notes . List | key = [value, value, …] | Lists in python are sorta like arrays in Java. They are different because a list can have multiple different data types within it. Lists can also have multiple dictionary entries in which each dictionary has multiple key and value pairs within it. Entries can be added into a list using the .append() method or just use + and adding it. | . Dictionary | dictionary_key = {key: value, key: value …} | Dictionaries are similar to lists, but instead of just holding values with one single key, each individual value is paired with its own key. That means you can call each value using its unique key. This is useful for a lot of things. You can also create a list of dictionaries, in which a list has multiple dictionary entries. Each dictionary can have multiple key and value pairs and is only considered one entry in the list. | . Try, except | try: code except error: code except: code | This is an interesting code that I already knew about from previous experience, but I found it could be useful here. Essentially the try portion is what runs initially and it will keep running the code within it until it runs and returns an error. Then the except code runs after. You can change what the except code is depending on the error or you can leave it generic so it runs for any error. | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/notes/",
          "relUrl": "/notes/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
      ,"page9": {
          "title": "",
          "content": "",
          "url": "https://toby-leeder.github.io/CSPFastpages/temp",
          "relUrl": "/temp",
          "date": ""
      }
      
  

  
      ,"page10": {
          "title": "Timeline",
          "content": "Week Posts . 0 | First Markdown, First Jupyter Notebook, Second Jupyter Notebook | . 1 | QnA w/Python, Checks w/Bash, Alumni Panel Notes, Lanzi Class Calendar | . 2 | Lists and Dictionaries w/Python | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/timeline/",
          "relUrl": "/timeline/",
          "date": ""
      }
      
  

  
      ,"page11": {
          "title": "Vocabulary",
          "content": "This is a page where I will record the vocabulary that I learn throughout this course. . Variable a way to store data | can be put into different categories | Primitive Types Integer (Int): a whole number | Character (Char): a single letter or symbol | Float (Float): A number with a decimal | String (String): A line of text | Double (Double): A number with a decimal | Boolean (Bool) True of false value (stored as 1 or 0) | . | Collections List/Array (Arr): a list of values of the same type | Dictionary: A list of values of different types with keys and values | . | . | Concatenation Adding variables together use +, creates a larger variable or can be used for stuff like printing | . | Function A block of code that can be run when the function is called. Some functions are built in like printing functions and some are created by the programmer. Syntax differs by language, but most have | . | Jekyll language used for some parts of fastpages | . | Liquid Language used to build the tags page | . | Procedural Abstraction this is confusing for me. Essentially its a procedure of abstracting out functions to higher levels. For example, if we have a multiplication function and we run that function we don’t care how it multiplies the numbers we input, we just want it to multiply the numbers. This is procedurally abstracting the process to the lowest level of computations. | . | Local Server Running one right now! It’s a server running locally on my computer using Docker Packages. Allows for quick editing as your changes show up instantly. You also don’t need to push your changes to github for the changes to show up. This is because the server is built by reading the local files, not the cloud files on github. | . | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  

  
  

  
      ,"page17": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://toby-leeder.github.io/CSPFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}